{"data":{"markdownRemark":{"html":"<p>## title: 백준 문제풀이</p>\n<p>### bj 9226 - 도깨비말</p>\n<p>cpp string의 <code class=\"language-text\">substr</code>, <code class=\"language-text\">erase</code>를 활용하는 문자열 조작 구현 문제.</p>\n<ol>\n<li>TLE: 문자열을 뒤로 보내는 작업을 한 글자씩 하면 시간초과함. 인덱스를 이용하여 <code class=\"language-text\">substr</code>로 한번에 보내야 함.</li>\n<li>WA: 문제 다 안읽고 풀다가 틀렸다. 모음이 없는 경우도 처리했어야 함.</li>\n</ol>\n<p>&#x3C;details>&#x3C;summary>cpp solution&#x3C;/summary></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">bool</span> checkVowels\\<span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">bool</span> t<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">switch</span> \\<span class=\"token punctuation\">(</span>ch\\<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'a'</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'e'</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'i'</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'o'</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'u'</span><span class=\"token operator\">:</span>\n        t<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        \\<span class=\"token operator\">/</span>\\<span class=\"token operator\">*</span> code \\<span class=\"token operator\">*</span>\\<span class=\"token operator\">/</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> solve\\<span class=\"token punctuation\">(</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    string s<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span>\\<span class=\"token punctuation\">(</span>s<span class=\"token operator\">!=</span><span class=\"token string\">\"\\#\"</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        cin<span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span>s<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> idx<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span>\\<span class=\"token punctuation\">(</span>s<span class=\"token operator\">==</span><span class=\"token string\">\"\\#\"</span>\\<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n                \n        <span class=\"token keyword\">while</span>\\<span class=\"token punctuation\">(</span>idx<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>s<span class=\"token punctuation\">.</span>length\\<span class=\"token punctuation\">(</span>\\<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>checkVowels\\<span class=\"token punctuation\">(</span>s\\<span class=\"token punctuation\">[</span>idx\\<span class=\"token punctuation\">]</span>\\<span class=\"token punctuation\">)</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            \\<span class=\"token operator\">/</span>\\<span class=\"token operator\">/</span> s<span class=\"token operator\">+</span><span class=\"token operator\">=</span>s\\<span class=\"token punctuation\">[</span><span class=\"token number\">0</span>\\<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            \\<span class=\"token operator\">/</span>\\<span class=\"token operator\">/</span> s<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span>erase\\<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            idx<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \\<span class=\"token operator\">/</span>\\<span class=\"token operator\">/</span> cout <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> idx <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span>\\<span class=\"token punctuation\">(</span>idx<span class=\"token operator\">!=</span>s<span class=\"token punctuation\">.</span>length\\<span class=\"token punctuation\">(</span>\\<span class=\"token punctuation\">)</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            s<span class=\"token operator\">+</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span>substr\\<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>idx\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            s<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span>erase\\<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>idx\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            \\<span class=\"token operator\">/</span>\\<span class=\"token operator\">/</span> cout <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token string\">\"dsds\"</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        cout <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> \\<span class=\"token punctuation\">(</span>s<span class=\"token operator\">+</span><span class=\"token string\">\"ay\"</span>\\<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>&#x3C;/details></p>\n<p>### bj 1260 - DFS와 BFS</p>\n<p>https://www.acmicpc.net/problem/1260</p>\n<p>간단한 DFS BFS 구현 문제.</p>\n<p>양방향이라서 vector에 양쪽으로 넣어주어야 하고, 노드에 대해 오름차순 순서대로 탐색해야 하므로 sort를 해야 한다.</p>\n<p>&#x3C;details>&#x3C;summary>cpp solution&#x3C;/summary></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">bool</span> visited\\<span class=\"token punctuation\">[</span><span class=\"token number\">1010</span>\\<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> maps\\<span class=\"token punctuation\">[</span><span class=\"token number\">1010</span>\\<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> dfs\\<span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> start\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span>\\<span class=\"token punctuation\">(</span>visited\\<span class=\"token punctuation\">[</span>start\\<span class=\"token punctuation\">]</span>\\<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    visited\\<span class=\"token punctuation\">[</span>start\\<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> start <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span>\\<span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> target<span class=\"token operator\">:</span>maps\\<span class=\"token punctuation\">[</span>start\\<span class=\"token punctuation\">]</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n        dfs\\<span class=\"token punctuation\">(</span>target\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> bfs\\<span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> start\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    deque<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> q<span class=\"token punctuation\">;</span>\n    \n    q<span class=\"token punctuation\">.</span>push\\_back\\<span class=\"token punctuation\">(</span>start\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    visited\\<span class=\"token punctuation\">[</span>start\\<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">while</span>\\<span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span>empty\\<span class=\"token punctuation\">(</span>\\<span class=\"token punctuation\">)</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n<span class=\"token operator\">=</span>q<span class=\"token punctuation\">.</span>front\\<span class=\"token punctuation\">(</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        q<span class=\"token punctuation\">.</span>pop\\_front\\<span class=\"token punctuation\">(</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> n <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">for</span>\\<span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> target<span class=\"token operator\">:</span>maps\\<span class=\"token punctuation\">[</span>n\\<span class=\"token punctuation\">]</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span>\\<span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited\\<span class=\"token punctuation\">[</span>target\\<span class=\"token punctuation\">]</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                visited\\<span class=\"token punctuation\">[</span>target\\<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                q<span class=\"token punctuation\">.</span>push\\_back\\<span class=\"token punctuation\">(</span>target\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            \n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> solve\\<span class=\"token punctuation\">(</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">;</span>\n    cin<span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span>n<span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span>m<span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span>s<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span>\\<span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span>\n        cin<span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span>a<span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span>b<span class=\"token punctuation\">;</span>\n        \\<span class=\"token operator\">/</span>\\<span class=\"token operator\">/</span> cout <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>a <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token string\">' '</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> b<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>endl<span class=\"token punctuation\">;</span>\n        maps\\<span class=\"token punctuation\">[</span>a\\<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>push\\_back\\<span class=\"token punctuation\">(</span>b\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        maps\\<span class=\"token punctuation\">[</span>b\\<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>push\\_back\\<span class=\"token punctuation\">(</span>a\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span>\\<span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token number\">1010</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        sort\\<span class=\"token punctuation\">(</span>all\\<span class=\"token punctuation\">(</span>maps\\<span class=\"token punctuation\">[</span>i\\<span class=\"token punctuation\">]</span>\\<span class=\"token punctuation\">)</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        visited\\<span class=\"token punctuation\">[</span>i\\<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    dfs\\<span class=\"token punctuation\">(</span>s\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span>\\<span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token number\">1010</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        visited\\<span class=\"token punctuation\">[</span>i\\<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    bfs\\<span class=\"token punctuation\">(</span>s\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>&#x3C;/details></p>\n<p>### bj 2178 - 미로 탐색</p>\n<p>https://www.acmicpc.net/problem/2178</p>\n<p>경로 탐색하여 최단 경로 길이 출력하는 문제. bfs로 하려는데 {y,x}로만 하다가 생각해보니 경로 길이를 출력하려면 length도 필요했다. 그래서 상태에 추가했는데, 꼭 <code class=\"language-text\">pair&amp;lt;pair&amp;lt;int,int&amp;gt;,int&amp;gt;</code>를 써야 하는지 궁금했다.\n일단 struct를 써보니 더 편했다.</p>\n<p>&#x3C;details>&#x3C;summary>cpp solution&#x3C;/summary></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">bool</span> visited\\<span class=\"token punctuation\">[</span><span class=\"token number\">101</span>\\<span class=\"token punctuation\">]</span>\\<span class=\"token punctuation\">[</span><span class=\"token number\">101</span>\\<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> maps\\<span class=\"token punctuation\">[</span><span class=\"token number\">101</span>\\<span class=\"token punctuation\">]</span>\\<span class=\"token punctuation\">[</span><span class=\"token number\">101</span>\\<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> N<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">;</span>\n\n\\<span class=\"token operator\">/</span>\\<span class=\"token operator\">/</span> <span class=\"token keyword\">int</span> dfs\\<span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> start\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\\<span class=\"token operator\">/</span>\\<span class=\"token operator\">/</span>     <span class=\"token keyword\">if</span>\\<span class=\"token punctuation\">(</span>visited\\<span class=\"token punctuation\">[</span>start\\<span class=\"token punctuation\">]</span>\\<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\\<span class=\"token operator\">/</span>\\<span class=\"token operator\">/</span>         <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\\<span class=\"token operator\">/</span>\\<span class=\"token operator\">/</span>     <span class=\"token punctuation\">}</span>\n\\<span class=\"token operator\">/</span>\\<span class=\"token operator\">/</span>     visited\\<span class=\"token punctuation\">[</span>start\\<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\\<span class=\"token operator\">/</span>\\<span class=\"token operator\">/</span>     cout <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> start <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span>\n\\<span class=\"token operator\">/</span>\\<span class=\"token operator\">/</span>     <span class=\"token keyword\">for</span>\\<span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> target<span class=\"token operator\">:</span>maps\\<span class=\"token punctuation\">[</span>start\\<span class=\"token punctuation\">]</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\\<span class=\"token operator\">/</span>\\<span class=\"token operator\">/</span>         dfs\\<span class=\"token punctuation\">(</span>target\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\\<span class=\"token operator\">/</span>\\<span class=\"token operator\">/</span>     <span class=\"token punctuation\">}</span>\n\\<span class=\"token operator\">/</span>\\<span class=\"token operator\">/</span>     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\\<span class=\"token operator\">/</span>\\<span class=\"token operator\">/</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> State<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> cost<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> bfs\\<span class=\"token punctuation\">(</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    deque<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>State<span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> q<span class=\"token punctuation\">;</span>\n    \n    q<span class=\"token punctuation\">.</span>push\\_back\\<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    visited\\<span class=\"token punctuation\">[</span><span class=\"token number\">0</span>\\<span class=\"token punctuation\">]</span>\\<span class=\"token punctuation\">[</span><span class=\"token number\">0</span>\\<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">while</span>\\<span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span>empty\\<span class=\"token punctuation\">(</span>\\<span class=\"token punctuation\">)</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        State n<span class=\"token operator\">=</span>q<span class=\"token punctuation\">.</span>front\\<span class=\"token punctuation\">(</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        q<span class=\"token punctuation\">.</span>pop\\_front\\<span class=\"token punctuation\">(</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span>\\<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>y<span class=\"token operator\">==</span>N<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> n<span class=\"token punctuation\">.</span>x<span class=\"token operator\">==</span>M<span class=\"token operator\">-</span><span class=\"token number\">1</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">.</span>cost<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span>\\<span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> ndy<span class=\"token operator\">=</span>n<span class=\"token punctuation\">.</span>y<span class=\"token operator\">+</span>dyd\\<span class=\"token punctuation\">[</span>i\\<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> ndx<span class=\"token operator\">=</span>n<span class=\"token punctuation\">.</span>x<span class=\"token operator\">+</span>dxd\\<span class=\"token punctuation\">[</span>i\\<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span>\\<span class=\"token punctuation\">(</span>ndy<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token number\">0</span> <span class=\"token operator\">||</span> ndx<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token number\">0</span> <span class=\"token operator\">||</span> ndy<span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span><span class=\"token operator\">=</span>N <span class=\"token operator\">||</span> ndx<span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span><span class=\"token operator\">=</span>M\\<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span>\\<span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited\\<span class=\"token punctuation\">[</span>ndy\\<span class=\"token punctuation\">]</span>\\<span class=\"token punctuation\">[</span>ndx\\<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> maps\\<span class=\"token punctuation\">[</span>ndy\\<span class=\"token punctuation\">]</span>\\<span class=\"token punctuation\">[</span>ndx\\<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                visited\\<span class=\"token punctuation\">[</span>ndy\\<span class=\"token punctuation\">]</span>\\<span class=\"token punctuation\">[</span>ndx\\<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                q<span class=\"token punctuation\">.</span>push\\_back\\<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>ndy<span class=\"token punctuation\">,</span>ndx<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">.</span>cost<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">9999999</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> solve\\<span class=\"token punctuation\">(</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    cin<span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span>N<span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span>M<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span>\\<span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        string ml<span class=\"token punctuation\">;</span>\n        cin<span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span>ml<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span>\\<span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>c<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>M<span class=\"token punctuation\">;</span>c<span class=\"token operator\">++</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span>\\<span class=\"token punctuation\">(</span>ml\\<span class=\"token punctuation\">[</span>c\\<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'1'</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                maps\\<span class=\"token punctuation\">[</span>i\\<span class=\"token punctuation\">]</span>\\<span class=\"token punctuation\">[</span>c\\<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                maps\\<span class=\"token punctuation\">[</span>i\\<span class=\"token punctuation\">]</span>\\<span class=\"token punctuation\">[</span>c\\<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        \n    <span class=\"token punctuation\">}</span>\n    cout<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> bfs\\<span class=\"token punctuation\">(</span>\\<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>&#x3C;/details></p>\n<p>### bj 1697 - 숨바꼭질</p>\n<p>https://www.acmicpc.net/problem/1697</p>\n<p>x2 점프 뿐만 아니라 +1,-1 이동때에도 경계 체크를 항상 해주어야 한다. 다만 방향은 이동 방향으로만 해도 된다. +1인데 pos&#x3C;0이 될 리는 없기 때문.</p>\n<p>&#x3C;details>&#x3C;summary>cpp solution&#x3C;/summary></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">bool</span> visited\\<span class=\"token punctuation\">[</span><span class=\"token number\">100001</span>\\<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> N<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> State<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> time<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> bfs\\<span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> start\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    deque<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>State<span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> q<span class=\"token punctuation\">;</span>\n    \n    q<span class=\"token punctuation\">.</span>push\\_back\\<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>start<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    visited\\<span class=\"token punctuation\">[</span>start\\<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">while</span>\\<span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span>empty\\<span class=\"token punctuation\">(</span>\\<span class=\"token punctuation\">)</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        State n<span class=\"token operator\">=</span>q<span class=\"token punctuation\">.</span>front\\<span class=\"token punctuation\">(</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        q<span class=\"token punctuation\">.</span>pop\\_front\\<span class=\"token punctuation\">(</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span>\\<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>pos<span class=\"token operator\">==</span>K\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">if</span>\\<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>pos<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token number\">100001</span>\\<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span>\\<span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited\\<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">.</span>pos<span class=\"token operator\">+</span><span class=\"token number\">1</span>\\<span class=\"token punctuation\">]</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                visited\\<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">.</span>pos<span class=\"token operator\">+</span><span class=\"token number\">1</span>\\<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                q<span class=\"token punctuation\">.</span>push\\_back\\<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>n<span class=\"token punctuation\">.</span>pos<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">.</span>time<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span>\\<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>pos<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\\<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span>\\<span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited\\<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">.</span>pos<span class=\"token operator\">-</span><span class=\"token number\">1</span>\\<span class=\"token punctuation\">]</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                visited\\<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">.</span>pos<span class=\"token operator\">-</span><span class=\"token number\">1</span>\\<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                q<span class=\"token punctuation\">.</span>push\\_back\\<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>n<span class=\"token punctuation\">.</span>pos<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">.</span>time<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span>\\<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>pos\\<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token number\">100001</span>\\<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span>\\<span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited\\<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">.</span>pos\\<span class=\"token operator\">*</span><span class=\"token number\">2</span>\\<span class=\"token punctuation\">]</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            visited\\<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">.</span>pos\\<span class=\"token operator\">*</span><span class=\"token number\">2</span>\\<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                q<span class=\"token punctuation\">.</span>push\\_back\\<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>n<span class=\"token punctuation\">.</span>pos\\<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">.</span>time<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                \n            <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">9999999</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> solve\\<span class=\"token punctuation\">(</span>\\<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    cin<span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span>N<span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span>K<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> bfs\\<span class=\"token punctuation\">(</span>N\\<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>&#x3C;/details></p>\n<p>## tags\n\\#sport, \\#blog, \\#boj, \\#algorithm</p>","fields":{"slug":"백준-문제풀이"},"frontmatter":{"title":"백준 문제풀이","date":"15.11.2019","category":"sport","tags":["dev/sport","blog","errorTag: boj","errorTag: algorithm"],"banner":"/assets/bg/4.jpg"},"timeToRead":4}},"pageContext":{"slug":"백준-문제풀이","prev":{"excerpt":"비교적 쉬운 B,C,H,I는 대부분 풀었고, D를 도전하다가 계속 시간이 지나갔다. 그러다 J가 더 쉬운문제여서 J를 풀다가 인덱싱 부분이 헷갈려서 결국 제출하지 못했다. 7분 지나서 그냥 인덱싱 부분만 1-인덱싱으로 전부 차근차근 고치니 바로 해결됬다.생각보다 상위권 말고 대부분의 팀들은 B,C,H,I만 푼거 같았다. (여전히 L이 펜딩이라 지나봐야 암.)다른 블로그 보니 J가 무슨 convex hull trick…","html":"<p>비교적 쉬운 B,C,H,I는 대부분 풀었고, D를 도전하다가 계속 시간이 지나갔다. 그러다 J가 더 쉬운문제여서 J를 풀다가 인덱싱 부분이 헷갈려서 결국 제출하지 못했다. 7분 지나서 그냥 인덱싱 부분만 1-인덱싱으로 전부 차근차근 고치니 바로 해결됬다.</p>\n<p>생각보다 상위권 말고 대부분의 팀들은 B,C,H,I만 푼거 같았다. (여전히 L이 펜딩이라 지나봐야 암.)</p>\n<p>다른 블로그 보니 J가 무슨 convex hull trick을 써야 한다는 말이 있던데 생각보다 어려운 문제인건가..?</p>\n<p>## tags\n\\#sport, \\#blog</p>","id":"08b18d61-f60f-5c6a-960e-92d1c8c0d38b","fields":{"slug":"acm-icpc-예선-참가"},"frontmatter":{"date":"2019-10-09","title":"acm icpc 예선 참가","category":"sport","tags":["dev/sport","blog"],"banner":"/assets/bg/1.jpg"},"timeToRead":1},"next":{"excerpt":"","html":"","id":"a064fcbf-1be0-5a11-b7ea-887a21f5ffa1","fields":{"slug":""},"frontmatter":{"date":null,"title":"","category":null,"tags":null,"banner":null},"timeToRead":1}}}