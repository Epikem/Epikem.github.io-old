{"pageContext":{"posts":[{"excerpt":"각종 명령어를 치면서 정리하자. 또 금방 까먹는다이전에 했던 것과 비슷한 명령들은 생략.exec /bin/sh in first container of pod named \"monolith\" 및 플래그는 또 뭔가 했더니, 알고보니 가 플래그 줄임이고, 가  플래그의 줄임이었다. 그리고 플래그로 pod 내부의 컨테이너 중 어떤 컨테이너를 대상으로 할 지 선택할 수 있다. 아래는  도움말:Options:\n -c, --container…","html":"<p>각종 명령어를 치면서 정리하자. 또 금방 까먹는다</p>\n<p>이전에 했던 것과 비슷한 명령들은 생략.</p>\n<blockquote>\n<p>exec /bin/sh in first container of pod named \"monolith\"</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"ps\"><pre class=\"language-ps\"><code class=\"language-ps\">kubectl exec monolith --stdin --tty /bin/sh\n # is same with:\nkubectl exec monolith -it /bin/sh</code></pre></div>\n<p><code class=\"language-text\">--stdin</code> 및 <code class=\"language-text\">--tty</code>플래그는 또 뭔가 했더니, 알고보니 <code class=\"language-text\">-i</code>가 <code class=\"language-text\">--stdin</code>플래그 줄임이고, <code class=\"language-text\">-t</code>가 <code class=\"language-text\">--tty</code> 플래그의 줄임이었다. 그리고 <code class=\"language-text\">-c</code>플래그로 pod 내부의 컨테이너 중 어떤 컨테이너를 대상으로 할 지 선택할 수 있다. 아래는 <code class=\"language-text\">kubectl exec -h</code> 도움말:</p>\n<blockquote>\n<p>Options:\n-c, --container='': Container name. If omitted, the first container in the pod will be chosen</p>\n<p> -i, --stdin=false: Pass stdin to the container</p>\n<p> -t, --tty=false: Stdin is a TTY</p>\n<p>Usage:\nkubectl exec POD [-c CONTAINER] -- COMMAND [args...][options]</p>\n</blockquote>\n<p>이번 예에서는 https 트래픽을 처리할 수 있는 secure pod를 만들고, 그걸 Service로 외부 노출하여 접속해보는 것으로 보인다.</p>\n<h3 id=\"1\"><a href=\"#1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.</h3>\n<blockquote>\n<p>create tls certificates from files:</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"ps\"><pre class=\"language-ps\"><code class=\"language-ps\">ls tls/\n # &gt; ca-key.pem  ca.pem  cert.pem  key.pem\nkubectl create secret generic tls-certs --from-file tls/\n #&gt; secret/tls-certs created</code></pre></div>\n<blockquote>\n<p>generate nginx configmap from file</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"ps\"><pre class=\"language-ps\"><code class=\"language-ps\">cat nginx/proxy.conf\n # &gt; server {\n # &gt;   listen 443;\n # &gt;   ssl    on;\n # &gt; \n # &gt;   ssl_certificate     /etc/tls/cert.pem;\n # &gt;   ssl_certificate_key /etc/tls/key.pem;\n # &gt; \n # &gt;   location / {\n # &gt;     proxy_pass http://127.0.0.1:80;\n # &gt;   }\n # &gt; }\n\nkubectl create configmap nginx-proxy-conf --from-file nginx/proxy.conf\n # &gt; configmap/nginx-proxy-conf created\n\ncat pods/secure-monolith.yaml</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\">apiVersion: v1\nkind: Pod\nmetadata:\n  name: &quot;secure-monolith&quot;\n  labels:\n    app: monolith\nspec:\n  containers:\n    - name: nginx\n      image: &quot;nginx:1.9.14&quot;\n      lifecycle:\n        preStop:\n          exec:\n            command: [&quot;/usr/sbin/nginx&quot;,&quot;-s&quot;,&quot;quit&quot;]\n      volumeMounts:\n        - name: &quot;nginx-proxy-conf&quot;\n          mountPath: &quot;/etc/nginx/conf.d&quot;\n        - name: &quot;tls-certs&quot;\n          mountPath: &quot;/etc/tls&quot;\n    - name: monolith\n      image: &quot;kelseyhightower/monolith:1.0.0&quot;\n      ports:\n        - name: http\n          containerPort: 80\n        - name: health\n          containerPort: 81\n      resources:\n        limits:\n          cpu: 0.2\n          memory: &quot;10Mi&quot;\n      livenessProbe:\n        httpGet:\n          path: /healthz\n          port: 81\n          scheme: HTTP\n        initialDelaySeconds: 5\n        periodSeconds: 15\n        timeoutSeconds: 5\n      readinessProbe:\n        httpGet:\n          path: /readiness\n          port: 81\n          scheme: HTTP\n        initialDelaySeconds: 5\n        timeoutSeconds: 1\n  volumes:\n    - name: &quot;tls-certs&quot;\n      secret:\n        secretName: &quot;tls-certs&quot;\n    - name: &quot;nginx-proxy-conf&quot;\n      configMap:\n        name: &quot;nginx-proxy-conf&quot;\n        items:\n          - key: &quot;proxy.conf&quot;\n            path: &quot;proxy.conf&quot;</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ps\"><pre class=\"language-ps\"><code class=\"language-ps\">kubectl create -f pods/secure-monolith.yaml\n # &gt; pod/secure-monolith created</code></pre></div>\n<blockquote>\n<p>expose secure-monolith pod with kube service</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"ps\"><pre class=\"language-ps\"><code class=\"language-ps\">cat services/monolith.yaml</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\">kind: Service\napiVersion: v1\nmetadata:\n  name: &quot;monolith&quot;\nspec:\n  selector:\n    app: &quot;monolith&quot;\n    secure: &quot;enabled&quot;\n  ports:\n    - protocol: &quot;TCP&quot;\n      port: 443\n      targetPort: 443\n      nodePort: 31000\n  type: NodePort</code></pre></div>\n<blockquote>\n<p>Things to note:</p>\n<ol>\n<li>이 서비스는 selector를 통해 <code class=\"language-text\">app=monolith,secure=enabled</code>인 pod를 찾아 자동으로 노출한다.</li>\n<li>포트 31000의 외부 트래픽을 내부 포트 443의 nginx로 전달해야 하므로 여기서 nodeport를 expose해야 한다.</li>\n</ol>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"ps\"><pre class=\"language-ps\"><code class=\"language-ps\">kubectl create -f services/monolith.yaml\n # &gt; service/monolith created</code></pre></div>\n<p><code class=\"language-text\">gcloud compute firewall-rules</code> 명령으로 노출된 nodeport의 monolith service로의 트래픽을 허용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ps\"><pre class=\"language-ps\"><code class=\"language-ps\">gcloud compute firewall-rules create allow-monolith-nodeport --allow=tcp:31000\n\n #&gt; Creating firewall...done.</code></pre></div>\n<blockquote>\n<p>get an external IP address for one of the nodes.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"ps\"><pre class=\"language-ps\"><code class=\"language-ps\">gcloud compute instances list</code></pre></div>\n<blockquote>\n<p>try hitting the secure-monolith service using curl:</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">curl -k https://&lt;EXTERNAL_IP&gt;:31000</code></pre></div>\n<p>이 때, 연결이 실패하게 되는데, 예제에서 secure-monolith yaml에 <code class=\"language-text\">secure=enabled</code> 라벨을 빼놓았기 때문이다. 아래와 같이 <code class=\"language-text\">kubectl label pods</code>명령으로 label을 추가할 수 있고, label을 추가하면 서비스를 재시작하지 않고도 서비스가 알아서 갱신되며 endpoint가 생성된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ps\"><pre class=\"language-ps\"><code class=\"language-ps\">kubectl get pods -l &quot;app=monolith,secure=enabled&quot;\n #&gt; No resources found.\nkubectl label pods secure-monolith &#39;secure-enabled&#39;\n #&gt; error: at least one label update is required\nkubectl label pods secure-monolith &#39;secure=enabled&#39;\n #&gt; pod/secure-monolith labeled\nkubectl get pods secure-monolith --show-labels\n #&gt; NAME              READY   STATUS    RESTARTS   AGE     LABELS\n #&gt; secure-monolith   2/2     Running   0          9m54s   app=monolith,secure=enabled</code></pre></div>\n<p>다시 외부 ip로 접속하면 연결이 잘 된다.</p>\n<h2 id=\"tags\"><a href=\"#tags\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tags</h2>\n<p>  #cloud, #blog</p>","id":"847b9205-2cda-584d-995a-c6c1ab39ee40","fields":{"slug":"qwiklab-kubernetes-스터디"},"frontmatter":{"date":"2019-08-26","title":"qwiklab kubernetes 스터디","category":"blog","tags":["dev/cloud","blog"],"banner":"/assets/bg/2.jpg"},"timeToRead":3},{"excerpt":"다음과 같이 에 람다에 환경변수를 추가할 수 있다.아래는 예시.tags  #til, #cloud, #aws, #aws","html":"<p>다음과 같이 <code class=\"language-text\">cloudformation.yaml</code>에 람다에 환경변수를 추가할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">(lambda-function-name)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">...</span>\n  <span class=\"token key atrule\">Properties</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">...</span>\n    <span class=\"token key atrule\">Environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">Variables</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">(environment-variable-key)</span><span class=\"token punctuation\">:</span> (value)\n<span class=\"token punctuation\">...</span></code></pre></div>\n<p>아래는 예시.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">vocaboLambda</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">...</span>\n  <span class=\"token key atrule\">Properties</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">...</span>\n    <span class=\"token key atrule\">Environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">Variables</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">ELASTIC_URL</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>9200/\n<span class=\"token punctuation\">...</span></code></pre></div>\n<h2 id=\"tags\"><a href=\"#tags\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tags</h2>\n<p>  #til, #cloud, #aws, #aws</p>","id":"2ef9fa87-9d27-5abf-85ea-2d5ebfb5d338","fields":{"slug":"aws-cloudformation-lambda-add-environment-variables"},"frontmatter":{"date":"2019-05-31","title":"aws-cloudformation-lambda-add-environment-variables","category":"TIL","tags":["dev/til","dev/cloud","dev/cloud/aws","dev/cloud/aws"],"banner":"/assets/bg/3.jpg"},"timeToRead":1},{"excerpt":"aws Lambda로 전환 완료, https 적용 및 react devtools버그 해결(크롬 렌더링 문제).aws Lambda로 에 서버를 올렸는데 에러가 난 이유를 못찾아서 로그를 어디서 찾나 했는데 aws Lambda 다이어그램에서 확인해보니 aws CloudWatch에 기록되고 있었다. 로그를 확인해 보니 app.js 파일 1…","html":"<p>aws Lambda로 전환 완료, https 적용 및 react devtools버그 해결(크롬 렌더링 문제).</p>\n<p>aws Lambda로 <code class=\"language-text\">vocabo-api.epikem.com</code>에 서버를 올렸는데 에러가 난 이유를 못찾아서 로그를 어디서 찾나 했는데 aws Lambda 다이어그램에서 확인해보니 aws CloudWatch에 기록되고 있었다. 로그를 확인해 보니 app.js 파일 15번째 줄에서 컴파일 에러가 났는데, <code class=\"language-text\">new URL(&#39;...&#39;)</code> 부분이었다. 노드에서는 직접 <code class=\"language-text\">url</code> 모듈을 로드하지 않아도 코드가 돌아갔었는데, 람다에서는 로드를 해야하는 것이었다. 다음과 같이 <code class=\"language-text\">url</code>모듈의 <code class=\"language-text\">URL</code>을 로드하여 사용하니 이 부분은 해결되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">URL</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>다시 패키지 빌드 및 배포를 시도하니 이번엔 url이 잘못됬다는 에러가 떴는데, 예상한 대로 환경변수 문제였다. <code class=\"language-text\">.env</code>파일 추가로는 람다 패키지 추가가 되지 않았고, 다행히 AWS CloudFormation 공식문서에서 Lambda에 환경변수를 설정하는 방법을 찾아 다음과 같이 채운 다음 다시 배포하니 성공적으로 api 서버가 등록되었다. 드디어 https 및 커스텀 도메인이 적용된 api 서버를 만들었다. 게다가 호출한 만큼만 사용되므로 절약까지 된다. 다만 클라우드 저장소는 결국 샘플에서 수정만 한 것인데, 직접 이런 템플릿을 짜라 하면 도저히 못 할거 같은 느낌이 든다.. (하지만 이건 aws&#x26;cloudformation 쪽이니 모르는게 당연한 것이다)</p>\n<p>file: cloudformation.yaml</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">vocaboLambda</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">...</span>\n  <span class=\"token key atrule\">Properties</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">...</span>\n    <span class=\"token key atrule\">Environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">Variables</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">ELASTIC_URL</span><span class=\"token punctuation\">:</span> (value)\n<span class=\"token punctuation\">...</span></code></pre></div>\n<p>api gateway에서 요청량 제한하니 진짜 제한되는것이 신기하다.</p>\n<p>이상한게, 여전히 프론트가 모바일에서 안 뜨길래 찾아봤더니, react <code class=\"language-text\">BrowserHistory</code>사용이 문제가 될 수 있으므로 <code class=\"language-text\">HashHistory</code>를 쓰라는  글이 있었지만, 분명 데스크탑에서는 잘 떴기 때문에 이게 원인이 아니라고 생각했는데 정말이었다. 알고보니 데스크탑 크롬에서도 표시가 안 되었고, 콘솔을 보니 <code class=\"language-text\">website.reduxDevTools</code>가 없다는 에러가 표시되고 있었다. deprecate된다는 걸 전부터 보긴 했는데 아예 없앤것이거나, 설치가 안됬을때에 대한 코드 커버가 안되있거나 한거같은데, 그냥 귀찮아서 <code class=\"language-text\">redux-devtools-extension</code> 패키지를 설치해서 적용하여 해결했다.</p>\n<p>이제 모바일도 잘 들어가진다. 다만 반응형이라기엔 아쉬운 상태.</p>\n<p>할 것:</p>\n<ul>\n<li>반응형</li>\n<li>영어 검색 개선 (같은 단어 합치기)</li>\n<li>영어 검색시 5개에서 여러개로 늘리기</li>\n<li>회원 및 개인 단어장 기능. 이거 하려면 또 한 세월 걸릴 듯.</li>\n</ul>\n<p>등..</p>\n<p>그런데 이대로 <code class=\"language-text\">test2-backup</code> 브랜치를 진행해버리면 히스토리가 너무 더러워져버린다.</p>\n<h2 id=\"tags\"><a href=\"#tags\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tags</h2>\n<p>  #vocabo, #cloud, #aws, #aws</p>","id":"70f6e6da-f9ad-536f-b1b3-01b71d96d337","fields":{"slug":"vocabo-배포-마무리"},"frontmatter":{"date":"2019-05-31","title":"vocabo 배포 마무리","category":"vocabo","tags":["project/vocabo","dev/cloud","dev/cloud/aws","dev/cloud/aws"],"banner":"/assets/bg/2.jpg"},"timeToRead":1}],"tagName":"dev/cloud"}}