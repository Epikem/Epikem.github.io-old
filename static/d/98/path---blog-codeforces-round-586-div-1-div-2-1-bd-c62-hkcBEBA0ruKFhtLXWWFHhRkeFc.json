{"data":{"markdownRemark":{"html":"<h3 id=\"c-substring-game-in-the-lesson\"><a href=\"#c-substring-game-in-the-lesson\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>C. Substring Game in the Lesson</h3>\n<p>(이전 대회 문제.)\n사전순을 잘 이해하지 못해서 못풀었던거 같다. 감으로 님게임이 아닐거라고 예상은 했는데 졸려서 자버렸다.\n그러므로 사전순의 정의를 정리해보자:</p>\n<ol>\n<li>\n<p>길이가 다를 경우, 길이가 짧은 것이 앞? 아닌거 같다. 그냥 있는 글자들을 비교해서 달라지는 부분이 나온다면 달라지는 부분을 비교하여 앞인 것이 앞.</p>\n</li>\n<li>\n<p>길이가 다른데 글자는 다 같은 경우, 길이가 짧은 것이 앞.</p>\n</li>\n<li>\n<p>길이가 같을 경우, 가장 먼저 달라지는 부분이 앞인 것이 앞.</p>\n</li>\n<li>\n<p>숫자가 문자보다 우선</p>\n</li>\n<li>\n<p>공백이 문자보다 우선</p>\n</li>\n</ol>\n<h3 id=\"a-2048-game\"><a href=\"#a-2048-game\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A. 2048 Game</h3>\n<p>벡터 값 가져올때 확인을 안해서 런타임 에러가 났다. 오류가 날 수 있는 부분들은 반드시 확인부터 해야한다.</p>\n<details><summary>cpp solution(fail)</summary>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> T<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> T<span class=\"token punctuation\">;</span>\n    vll vec<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> t <span class=\"token operator\">&lt;</span> T<span class=\"token punctuation\">;</span> t<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n        cin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span>\n        ll tmp<span class=\"token punctuation\">;</span>\n        vec<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            cin<span class=\"token operator\">>></span>tmp<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tmp<span class=\"token operator\">&lt;=</span><span class=\"token number\">2048</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                vec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ll<span class=\"token punctuation\">)</span><span class=\"token function\">log2</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token keyword\">int</span> curN<span class=\"token operator\">=</span><span class=\"token number\">11</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> curLeft<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//// 아래 부분 주석을 해제하면 성공.</span>\n            <span class=\"token comment\">// if(vec.size()==0){</span>\n            <span class=\"token comment\">//     cout &lt;&lt; \"NO\" &lt;&lt; endl;</span>\n            <span class=\"token comment\">//     break;</span>\n            <span class=\"token comment\">// }</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>curN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curLeft<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"YES\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// cout &lt;&lt; curN &lt;&lt; \" \" &lt;&lt; endl;</span>\n                    curLeft<span class=\"token operator\">-</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"NO\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    vec<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                curN<span class=\"token operator\">-</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                curLeft<span class=\"token operator\">*</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curN<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"NO\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span></code></pre></div>\n</details>\n<h3 id=\"b-knights\"><a href=\"#b-knights\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>B. Knights</h3>\n<p>비교적 무난하게 풀었다. 하나를 정하고 재귀적으로 번갈아 지정하게 했더니 신기하게도 모든 칸이 번갈아 BWBW로 나왔다.</p>\n<h3 id=\"c-perfect-team\"><a href=\"#c-perfect-team\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>C. Perfect Team</h3>\n<p>자원 분배 문제. a,b,c자원에서, abc 하나씩 써서 팀으로 해야하는데, a와 b는 c로서 사용가능. 역으론 불가.</p>\n<p>a와 b를 서로 바꿀수는 없으니 비교해서 남는 부분을 c로 쓰는건 쉽다. 문제는 맞춘 a,b값을 s라 했을때 s &#x3C; c이면 a와b들을 c로서 써야할 수 있는데, 그걸 맞추는게 조금 까다롭다는 점. 수식전개를 하면 좀 간단한데, 또 주의할 점은, 제한이 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup></mrow><annotation encoding=\"application/x-tex\">10^8</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">8</span></span></span></span></span></span></span></span></span></span></span>이라서 float을 쓰면 수치오류로 틀리게 된다.</p>\n<h3 id=\"d-fail\"><a href=\"#d-fail\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>D. (fail)</h3>\n<p>와 1위 코드 보니깐 이런 문제를 선형으로 푸는데 신기하다. 이런 식으로 해도 풀리는구나.\n분명 높이를 2초과하여 올릴 이유는 없다는 것을 알았지만 실제 구현을 못했다. 양쪽을 다 참조해야할거같아서 그랬는데, 이런 코드를 보니 항상 앞에만 참조해서 해도 되는거같기도 하다.</p>\n<p><a href=\"https://codeforces.com/contest/1221/standings\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://codeforces.com/contest/1221/standings</a> 에서 코드 참조</p>\n<details><summary>cpp solution by kefaa2</summary>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MaxRaise<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxN<span class=\"token operator\">=</span><span class=\"token number\">300000</span><span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\nll arr<span class=\"token punctuation\">[</span>maxN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> cost<span class=\"token punctuation\">[</span>maxN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> q<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> q<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>q<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            cin <span class=\"token operator\">>></span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>></span> cost<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        vector <span class=\"token operator\">&lt;</span> pair <span class=\"token operator\">&lt;</span> ll<span class=\"token punctuation\">,</span> ll <span class=\"token operator\">></span> <span class=\"token operator\">></span> best<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> raise <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> raise <span class=\"token operator\">&lt;=</span> MaxRaise<span class=\"token punctuation\">;</span> raise<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            best<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>cost<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> raise<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> raise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> best<span class=\"token punctuation\">[</span>raise<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">' '</span> <span class=\"token operator\">&lt;&lt;</span> best<span class=\"token punctuation\">[</span>raise<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            vector <span class=\"token operator\">&lt;</span> pair <span class=\"token operator\">&lt;</span> ll<span class=\"token punctuation\">,</span> ll <span class=\"token operator\">></span> <span class=\"token operator\">></span> nbest<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> raise <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> raise <span class=\"token operator\">&lt;=</span> MaxRaise<span class=\"token punctuation\">;</span> raise<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                ll mn <span class=\"token operator\">=</span> <span class=\"token number\">2e18</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it <span class=\"token operator\">:</span> best<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span>second <span class=\"token operator\">!=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> raise<span class=\"token punctuation\">)</span> mn <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>mn<span class=\"token punctuation\">,</span> it<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                mn <span class=\"token operator\">+</span><span class=\"token operator\">=</span> raise <span class=\"token operator\">*</span> cost<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                nbest<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>mn<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> raise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            best <span class=\"token operator\">=</span> nbest<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        ll mn <span class=\"token operator\">=</span> <span class=\"token number\">2e18</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it <span class=\"token operator\">:</span> best<span class=\"token punctuation\">)</span> mn <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>mn<span class=\"token punctuation\">,</span> it<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> mn <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</details>\n<h2 id=\"tags\"><a href=\"#tags\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tags</h2>\n<p>  #sport, #blog</p>","fields":{"slug":"codeforces-round-586-div-1-div-2"},"frontmatter":{"title":"codeforces round 586(div1+div2)","date":"21.09.2019","category":"sport","tags":["dev/sport","blog"],"banner":"/assets/bg/2.jpg"},"timeToRead":3}},"pageContext":{"slug":"codeforces-round-586-div-1-div-2","prev":{"excerpt":"종만북 8장 - 양자화 Quantization모든 수들이 1000 이하이므로, 양자화는 1000 이하의 수들로만 하면 된다.\n1000 이하의 수에서 S…","html":"<h3 id=\"종만북-8장---양자화-quantization\"><a href=\"#%EC%A2%85%EB%A7%8C%EB%B6%81-8%EC%9E%A5---%EC%96%91%EC%9E%90%ED%99%94-quantization\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>종만북 8장 - 양자화 Quantization</h3>\n<p>모든 수들이 1000 이하이므로, 양자화는 1000 이하의 수들로만 하면 된다.\n1000 이하의 수에서 S개를 고르면 되는 것인데, 여전히 작진 않다.\n이게 동적계획법 파트에 있어서 그렇지, 아니었다면 무조건 탐욕법을 시도하다가 실패하게 되버릴거 같은데.\n어째서 이게 동적계획법일까. 그리고 어떻게 부분 구조를 찾아야 하는가.\n일단 가장 간단하게 생각나는 것은, 인덱스별이 아닌 선택 숫자별로 생각하는 것인데,\n그건 좀 당연한 것 같지만 cpp라면 가능할지도. 다 선택됬다면 계산을 하고, 아니면\n더 높은 다음 수를 선택하는 식으로. 그러면 결국 C(1000,S)번 계산해야한다. 가지치기를 늘릴 수 없을까?\n다 선택 후 계산을 할 게 아니라, 어차피 증가하면서 선택하므로 이번 선택을 했을 때, 이번 선택보다 작은 수들은 전부 이번 선택으로 계산될 것이다. 따라서 반복문에서 다음 수로 그게 가장 낮은걸로 선택하면 될까?\n그렇지는 않다. 그러면 무조건 낮은 수를 선택하게 되버린다.\n궁금한 게, 인덱스 기준이 아닌, 숫자 기준으로는 탐욕법을 써도 되지 않나??\n예를 들어, 1부터 1000까지 증가시키면서, 그 숫자가 추가됬을 때 얼마나 전체 cost가 줄어드는지 계산해서 가장 많이 줄이는 숫자를 추가하는 식으로 한다면?\n문제는 이후로 계산을 할 때 이전 숫자들로 양자화할지 이번 숫자로 양자화할지 계속 달라진다는 점. 하지만 그 점은 위의 방식에서도 고려되야 하는것은 마찬가지다.\n게다가 시도해보니 위의 탐욕법도 모든 closest를 갱신후 계산한다면 이중 반복문이 된다.</p>\n<details><summary>cpp solution (fail)</summary>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> N<span class=\"token punctuation\">,</span>S<span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> vec<span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> seps<span class=\"token punctuation\">;</span>\nll midpointCache<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nll <span class=\"token function\">getMinCost</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> begin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// cout &lt;&lt; \"calculating \" &lt;&lt; begin &lt;&lt; ' ' &lt;&lt; end &lt;&lt; endl;</span>\n    ll<span class=\"token operator\">&amp;</span> ret<span class=\"token operator\">=</span>midpointCache<span class=\"token punctuation\">[</span>begin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n    ret<span class=\"token operator\">=</span><span class=\"token number\">1012345678</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// for (int i = vec[begin]; i &lt;= vec[end-1]; i++)</span>\n    <span class=\"token comment\">// {</span>\n    <span class=\"token comment\">//     ll cost=0;</span>\n    <span class=\"token comment\">//     for (int j = begin; j &lt; end; j++)</span>\n    <span class=\"token comment\">//     {</span>\n    <span class=\"token comment\">//         cost+=(vec[j]-i)*(vec[j]-i);</span>\n    <span class=\"token comment\">//     }</span>\n    <span class=\"token comment\">//     if(cost&lt;ret){</span>\n    <span class=\"token comment\">//         ret=cost;</span>\n    <span class=\"token comment\">//     }   </span>\n    <span class=\"token comment\">// }</span>\n    ll sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> begin<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        sum<span class=\"token operator\">+</span><span class=\"token operator\">=</span>vec<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// int k=(int)(floorf((float)sum/(float)(end-begin+1)));</span>\n    <span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span>sum<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>end<span class=\"token operator\">-</span>begin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// cout &lt;&lt; k &lt;&lt; endl;</span>\n    ll cost<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> begin<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        cost<span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>k<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    ret<span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span>cost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    \n    cost<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> begin<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        cost<span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>k<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    ret<span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span>cost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nll <span class=\"token function\">getmin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sep<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">==</span>S<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// for (int i = 0; i &lt; seps.size(); i++)</span>\n        <span class=\"token comment\">// {</span>\n        <span class=\"token comment\">//     cout &lt;&lt; seps[i] &lt;&lt; ' ';</span>\n        <span class=\"token comment\">// }</span>\n        \n        <span class=\"token comment\">// cout &lt;&lt; endl;</span>\n        ll ret<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> s <span class=\"token operator\">&lt;</span> S<span class=\"token punctuation\">;</span> s<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// cout &lt;&lt; \"calculating seps:\" &lt;&lt; s &lt;&lt; ' ' &lt;&lt;seps[s] &lt;&lt; ' ' &lt;&lt; seps[s+1] &lt;&lt; endl;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">==</span>S<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                ret<span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token function\">getMinCost</span><span class=\"token punctuation\">(</span>seps<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> ret<span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token function\">getMinCost</span><span class=\"token punctuation\">(</span>seps<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>seps<span class=\"token punctuation\">[</span>s<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    ll ret<span class=\"token operator\">=</span><span class=\"token number\">10123456789ll</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> sep<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        seps<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ret<span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span> <span class=\"token function\">getmin</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> count<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        seps<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> C<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> C<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>c<span class=\"token operator\">&lt;</span>C<span class=\"token punctuation\">;</span>c<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        cin <span class=\"token operator\">>></span> N <span class=\"token operator\">>></span> S<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> tmp<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> <span class=\"token number\">101</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">101</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                midpointCache<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        \n        vec<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        seps<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            cin <span class=\"token operator\">>></span> tmp<span class=\"token punctuation\">;</span>\n            vec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        seps<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getmin</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n</details>\n<p>이렇게 생각하고 풀었는데, 여전히 틀렸다. 아무래도 정렬된 100개의 숫자여도 거기서 막대 10개를 꽂는 경우의 수가 너무 많은건가? 싶었다.</p>\n<p>해설을 보니, 재귀 구조로 앞의 x개만 선택하는 구조를 반복하는 식으로 풀었다. 그것이 내가 구현한 방식과 경우의 수가 크게 차이나나??</p>\n<p>아니면 s 그룹으로 분할한 다음 그 최소제곱을 위한 값을 구하는 과정이 너무 느렸는지도 모르겠다.</p>\n<p>책에서 나온 구조로 바꿨는데도 시간초과가 났다. 그렇다는 건 최소로 만드는 값을 구하는 과정이 메모이제이션이 제대로 안되었거나 너무 느렸다는 뜻이다. 지금 구조는 다음과 같은데 이게 그렇게 느리다면 어떻게 해야 줄일 수 있을까?\nd미분해서 평균\n을 써서 중앙값을 구할 생각까지는 했는데 다음과 같은 것들은 모자랐다. 결국 책 참조함.</p>\n<ul>\n<li>다음과 같이 하면 <code class=\"language-text\">round</code>함수 대신 간단하게 <code class=\"language-text\">int()</code>형 변환만으로 <code class=\"language-text\">round</code>의 효과를 낼 수 있다 : <code class=\"language-text\">val=int(0.5+floatval)</code> </li>\n<li><strong>중요</strong> 인덱스 계산이 조금 복잡하다. <code class=\"language-text\">A[i]</code>, <code class=\"language-text\">A[i]^2</code>들의 합인 <code class=\"language-text\">s1, s2</code>는 0-인덱스 기반인데, 그러면 구간 합을 구하기 위해 부분 합을 이용할 때 주의가 필요하다 :</li>\n</ul>\n<p><code class=\"language-text\">s[x]: sum of a[0]~a[x]</code> 라고 하면, <code class=\"language-text\">sum(a,b): sum of a[a]~a[b]</code>를 구하려면 그냥 <code class=\"language-text\">sum(a,b)=s[b]-s[a-1]</code>로 구현해서는 안 된다. a가 0일 때 문제가 되기 때문이다. 따라서 다음과 같이 구현해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">sumrange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> lo<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> hi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">[</span>hi<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>lo<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">?</span><span class=\"token number\">0</span><span class=\"token operator\">:</span>s<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>또, 만약 구간합 함수를 hi를 포함하지 않는 쪽(hi+1로 호출)으로 구현했다면, 구간합을 반환할 때는 hi+1을 써줘야 할 것이다.</li>\n<li><code class=\"language-text\">quantize</code>또는 나의 경우 <code class=\"language-text\">getmin</code>함수에서 내부 for문에서 인덱싱에 상당히 주의를 해야 한다.</li>\n<li><code class=\"language-text\">quantize</code>함수를 메모이제이션하지 않으면 시간초과가 난다.</li>\n</ul>\n<h3 id=\"종만북-8장---타일링-방법의-수-세기-tiling2\"><a href=\"#%EC%A2%85%EB%A7%8C%EB%B6%81-8%EC%9E%A5---%ED%83%80%EC%9D%BC%EB%A7%81-%EB%B0%A9%EB%B2%95%EC%9D%98-%EC%88%98-%EC%84%B8%EA%B8%B0-tiling2\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>종만북 8장 - 타일링 방법의 수 세기 TILING2</h3>\n<p>쉽게 품. 그래도 잘 이해되지 않는게 어떻게 점화식을 <code class=\"language-text\">s(l)=s(l-1)+s(l-2)</code>로 간단하게 찾을 수 있는지. 다음과 같은 조건을 만족하는 모든 부분집합을 찾아서 더하면 다 찾았다고 할 수 있겠지만, 그걸 찾기가 직관적이지 않을수도 있고 어려울 수도 있을거같은데. 연습이 필요할 거 같다.</p>\n<ul>\n<li>모든 분류를 합했을 때 모든 경우를 포함</li>\n<li>두 가지 이상의 분류에 중복되는 경우가 없음</li>\n</ul>\n<details><summary>cpp solution</summary>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> N<span class=\"token punctuation\">,</span>S<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> cache<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getComb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> ret<span class=\"token operator\">=</span>cache<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    ret<span class=\"token operator\">=</span><span class=\"token function\">getComb</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">getComb</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ret<span class=\"token operator\">=</span>ret<span class=\"token operator\">%</span>MOD<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    MOD<span class=\"token operator\">=</span><span class=\"token number\">1000000007</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> C<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> C<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">101</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        cache<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>c<span class=\"token operator\">&lt;</span>C<span class=\"token punctuation\">;</span>c<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        cin <span class=\"token operator\">>></span> N<span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getComb</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</details>\n<h3 id=\"종만북-8장---두니발-박사의-탈옥-numb3rs\"><a href=\"#%EC%A2%85%EB%A7%8C%EB%B6%81-8%EC%9E%A5---%EB%91%90%EB%8B%88%EB%B0%9C-%EB%B0%95%EC%82%AC%EC%9D%98-%ED%83%88%EC%98%A5-numb3rs\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>종만북 8장 - 두니발 박사의 탈옥 (NUMB3RS)</h3>\n<p>각 이동 확률 배열을 만든 다음, 날을 진행하면서 계산해나가게 했는데, 곱에 의한 수치적 오류의 누적으로 틀리는 것 같다. 생각보다는 쉽게 풀렸다. 당연히 확률 맵을 만들어서 매 날마다 다음 전체 상태를 계산하는게 기본이고 거기에 뭔가 메모이제이션 등을 해야하는것일 줄 알았는데 그냥 그게 전부였고, 곱의 수치오류로 한 번 틀렸는데 실수 변수를 전부 <code class=\"language-text\">double</code>형으로 바꾸니 해결되었다. </p>\n<details><summary>cpp solution</summary>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> N<span class=\"token punctuation\">,</span>D<span class=\"token punctuation\">,</span>P<span class=\"token punctuation\">;</span> <span class=\"token comment\">// N 2~50, D:1~100, P:0~N</span>\n<span class=\"token keyword\">int</span> maps<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> naverCounts<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> movemaps<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> probs<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> tmpProbs<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">calcprobs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> leftDays<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>leftDays<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> targetProb <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> targetProb <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> targetProb<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">double</span> nextProb<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token number\">0.0f</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> navers <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> navers <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> navers<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>maps<span class=\"token punctuation\">[</span>targetProb<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>navers<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                nextProb<span class=\"token operator\">+</span><span class=\"token operator\">=</span>movemaps<span class=\"token punctuation\">[</span>navers<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>targetProb<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>probs<span class=\"token punctuation\">[</span>navers<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        tmpProbs<span class=\"token punctuation\">[</span>targetProb<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>nextProb<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>probs<span class=\"token punctuation\">,</span> tmpProbs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">101</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// for (int i = 0; i &lt; N; i++)</span>\n    <span class=\"token comment\">// {</span>\n    <span class=\"token comment\">//     probs[i]=tmpProbs[i];</span>\n    <span class=\"token comment\">//     // cout &lt;&lt; probs[i] &lt;&lt; ' ';</span>\n    <span class=\"token comment\">// }</span>\n    <span class=\"token comment\">// cout&lt;&lt;endl;</span>\n    \n    <span class=\"token function\">calcprobs</span><span class=\"token punctuation\">(</span>leftDays<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> C<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> C<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>c<span class=\"token operator\">&lt;</span>C<span class=\"token punctuation\">;</span>c<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        cin <span class=\"token operator\">>></span> N <span class=\"token operator\">>></span> D <span class=\"token operator\">>></span> P<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 지난 일 수 d 교도소 마을 번호 p</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> naverCount<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                cin <span class=\"token operator\">>></span> maps<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>maps<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    naverCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            naverCounts<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>naverCount<span class=\"token punctuation\">;</span>\n            probs<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// cout &lt;&lt; \"step 0 \" &lt;&lt; endl;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> here <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> here <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> here<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> there <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> there <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> there<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>here<span class=\"token operator\">==</span>there<span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                movemaps<span class=\"token punctuation\">[</span>here<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>there<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token number\">1.0f</span><span class=\"token operator\">/</span>naverCounts<span class=\"token punctuation\">[</span>here<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// cout &lt;&lt; \"step 1 \" &lt;&lt; endl;</span>\n        \n        \n        probs<span class=\"token punctuation\">[</span>P<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token number\">1.0f</span><span class=\"token punctuation\">;</span>\n        cin <span class=\"token operator\">>></span> T<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// calc all probs</span>\n        <span class=\"token function\">calcprobs</span><span class=\"token punctuation\">(</span>D<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// cout &lt;&lt; \"step 2 \" &lt;&lt; endl;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> t <span class=\"token operator\">&lt;</span> T<span class=\"token punctuation\">;</span> t<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> village<span class=\"token punctuation\">;</span>\n            cin <span class=\"token operator\">>></span> village<span class=\"token punctuation\">;</span>\n            \n            std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>fixed <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>showpoint<span class=\"token punctuation\">;</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setprecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> probs<span class=\"token punctuation\">[</span>village<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n        \n        \n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n</details>\n<h2 id=\"tags\"><a href=\"#tags\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tags</h2>\n<p>  #sport, #blog</p>","id":"c0d68fa0-0a15-5724-9b59-88b2035da05d","fields":{"slug":"종만북-문제-풀이"},"frontmatter":{"date":"2019-09-14","title":"종만북 문제 풀이","category":"sport","tags":["dev/sport","blog"],"banner":"/assets/bg/2.jpg"},"timeToRead":6},"next":{"excerpt":"","html":"","id":"a064fcbf-1be0-5a11-b7ea-887a21f5ffa1","fields":{"slug":""},"frontmatter":{"date":null,"title":"","category":null,"tags":null,"banner":null},"timeToRead":1}}}