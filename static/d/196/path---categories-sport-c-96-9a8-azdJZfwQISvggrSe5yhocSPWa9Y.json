{"pageContext":{"posts":[{"excerpt":"C. Substring Game in the Lesson…","html":"<h3 id=\"c-substring-game-in-the-lesson\"><a href=\"#c-substring-game-in-the-lesson\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>C. Substring Game in the Lesson</h3>\n<p>(이전 대회 문제.)\n사전순을 잘 이해하지 못해서 못풀었던거 같다. 감으로 님게임이 아닐거라고 예상은 했는데 졸려서 자버렸다.\n그러므로 사전순의 정의를 정리해보자:</p>\n<ol>\n<li>\n<p>길이가 다를 경우, 길이가 짧은 것이 앞? 아닌거 같다. 그냥 있는 글자들을 비교해서 달라지는 부분이 나온다면 달라지는 부분을 비교하여 앞인 것이 앞.</p>\n</li>\n<li>\n<p>길이가 다른데 글자는 다 같은 경우, 길이가 짧은 것이 앞.</p>\n</li>\n<li>\n<p>길이가 같을 경우, 가장 먼저 달라지는 부분이 앞인 것이 앞.</p>\n</li>\n<li>\n<p>숫자가 문자보다 우선</p>\n</li>\n<li>\n<p>공백이 문자보다 우선</p>\n</li>\n</ol>\n<h3 id=\"a-2048-game\"><a href=\"#a-2048-game\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A. 2048 Game</h3>\n<p>벡터 값 가져올때 확인을 안해서 런타임 에러가 났다. 오류가 날 수 있는 부분들은 반드시 확인부터 해야한다.</p>\n<details><summary>cpp solution(fail)</summary>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> T<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> T<span class=\"token punctuation\">;</span>\n    vll vec<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> t <span class=\"token operator\">&lt;</span> T<span class=\"token punctuation\">;</span> t<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n        cin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span>\n        ll tmp<span class=\"token punctuation\">;</span>\n        vec<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            cin<span class=\"token operator\">>></span>tmp<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tmp<span class=\"token operator\">&lt;=</span><span class=\"token number\">2048</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                vec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ll<span class=\"token punctuation\">)</span><span class=\"token function\">log2</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token keyword\">int</span> curN<span class=\"token operator\">=</span><span class=\"token number\">11</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> curLeft<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//// 아래 부분 주석을 해제하면 성공.</span>\n            <span class=\"token comment\">// if(vec.size()==0){</span>\n            <span class=\"token comment\">//     cout &lt;&lt; \"NO\" &lt;&lt; endl;</span>\n            <span class=\"token comment\">//     break;</span>\n            <span class=\"token comment\">// }</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>curN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curLeft<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"YES\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// cout &lt;&lt; curN &lt;&lt; \" \" &lt;&lt; endl;</span>\n                    curLeft<span class=\"token operator\">-</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"NO\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    vec<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                curN<span class=\"token operator\">-</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                curLeft<span class=\"token operator\">*</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curN<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"NO\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span></code></pre></div>\n</details>\n<h3 id=\"b-knights\"><a href=\"#b-knights\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>B. Knights</h3>\n<p>비교적 무난하게 풀었다. 하나를 정하고 재귀적으로 번갈아 지정하게 했더니 신기하게도 모든 칸이 번갈아 BWBW로 나왔다.</p>\n<h3 id=\"c-perfect-team\"><a href=\"#c-perfect-team\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>C. Perfect Team</h3>\n<p>자원 분배 문제. a,b,c자원에서, abc 하나씩 써서 팀으로 해야하는데, a와 b는 c로서 사용가능. 역으론 불가.</p>\n<p>a와 b를 서로 바꿀수는 없으니 비교해서 남는 부분을 c로 쓰는건 쉽다. 문제는 맞춘 a,b값을 s라 했을때 s &#x3C; c이면 a와b들을 c로서 써야할 수 있는데, 그걸 맞추는게 조금 까다롭다는 점. 수식전개를 하면 좀 간단한데, 또 주의할 점은, 제한이 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup></mrow><annotation encoding=\"application/x-tex\">10^8</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">8</span></span></span></span></span></span></span></span></span></span></span>이라서 float을 쓰면 수치오류로 틀리게 된다.</p>\n<h3 id=\"d-fail\"><a href=\"#d-fail\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>D. (fail)</h3>\n<p>와 1위 코드 보니깐 이런 문제를 선형으로 푸는데 신기하다. 이런 식으로 해도 풀리는구나.\n분명 높이를 2초과하여 올릴 이유는 없다는 것을 알았지만 실제 구현을 못했다. 양쪽을 다 참조해야할거같아서 그랬는데, 이런 코드를 보니 항상 앞에만 참조해서 해도 되는거같기도 하다.</p>\n<p><a href=\"https://codeforces.com/contest/1221/standings\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://codeforces.com/contest/1221/standings</a> 에서 코드 참조</p>\n<details><summary>cpp solution by kefaa2</summary>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MaxRaise<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxN<span class=\"token operator\">=</span><span class=\"token number\">300000</span><span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\nll arr<span class=\"token punctuation\">[</span>maxN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> cost<span class=\"token punctuation\">[</span>maxN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> q<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> q<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>q<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            cin <span class=\"token operator\">>></span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>></span> cost<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        vector <span class=\"token operator\">&lt;</span> pair <span class=\"token operator\">&lt;</span> ll<span class=\"token punctuation\">,</span> ll <span class=\"token operator\">></span> <span class=\"token operator\">></span> best<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> raise <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> raise <span class=\"token operator\">&lt;=</span> MaxRaise<span class=\"token punctuation\">;</span> raise<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            best<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>cost<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> raise<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> raise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> best<span class=\"token punctuation\">[</span>raise<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">' '</span> <span class=\"token operator\">&lt;&lt;</span> best<span class=\"token punctuation\">[</span>raise<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            vector <span class=\"token operator\">&lt;</span> pair <span class=\"token operator\">&lt;</span> ll<span class=\"token punctuation\">,</span> ll <span class=\"token operator\">></span> <span class=\"token operator\">></span> nbest<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> raise <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> raise <span class=\"token operator\">&lt;=</span> MaxRaise<span class=\"token punctuation\">;</span> raise<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                ll mn <span class=\"token operator\">=</span> <span class=\"token number\">2e18</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it <span class=\"token operator\">:</span> best<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span>second <span class=\"token operator\">!=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> raise<span class=\"token punctuation\">)</span> mn <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>mn<span class=\"token punctuation\">,</span> it<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                mn <span class=\"token operator\">+</span><span class=\"token operator\">=</span> raise <span class=\"token operator\">*</span> cost<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                nbest<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>mn<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> raise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            best <span class=\"token operator\">=</span> nbest<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        ll mn <span class=\"token operator\">=</span> <span class=\"token number\">2e18</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it <span class=\"token operator\">:</span> best<span class=\"token punctuation\">)</span> mn <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>mn<span class=\"token punctuation\">,</span> it<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> mn <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</details>\n<h2 id=\"tags\"><a href=\"#tags\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tags</h2>\n<p>  #sport, #blog</p>","id":"157a0598-7e5e-5154-ac1f-395e7b2788c1","fields":{"slug":"codeforces-round-586-div-1-div-2"},"frontmatter":{"date":"2019-09-21","title":"codeforces round 586(div1+div2)","category":"sport","tags":["dev/sport","blog"],"banner":"/assets/bg/2.jpg"},"timeToRead":3},{"excerpt":"종만북 8장 - 양자화 Quantization모든 수들이 1000 이하이므로, 양자화는 1000 이하의 수들로만 하면 된다.\n1000 이하의 수에서 S…","html":"<h3 id=\"종만북-8장---양자화-quantization\"><a href=\"#%EC%A2%85%EB%A7%8C%EB%B6%81-8%EC%9E%A5---%EC%96%91%EC%9E%90%ED%99%94-quantization\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>종만북 8장 - 양자화 Quantization</h3>\n<p>모든 수들이 1000 이하이므로, 양자화는 1000 이하의 수들로만 하면 된다.\n1000 이하의 수에서 S개를 고르면 되는 것인데, 여전히 작진 않다.\n이게 동적계획법 파트에 있어서 그렇지, 아니었다면 무조건 탐욕법을 시도하다가 실패하게 되버릴거 같은데.\n어째서 이게 동적계획법일까. 그리고 어떻게 부분 구조를 찾아야 하는가.\n일단 가장 간단하게 생각나는 것은, 인덱스별이 아닌 선택 숫자별로 생각하는 것인데,\n그건 좀 당연한 것 같지만 cpp라면 가능할지도. 다 선택됬다면 계산을 하고, 아니면\n더 높은 다음 수를 선택하는 식으로. 그러면 결국 C(1000,S)번 계산해야한다. 가지치기를 늘릴 수 없을까?\n다 선택 후 계산을 할 게 아니라, 어차피 증가하면서 선택하므로 이번 선택을 했을 때, 이번 선택보다 작은 수들은 전부 이번 선택으로 계산될 것이다. 따라서 반복문에서 다음 수로 그게 가장 낮은걸로 선택하면 될까?\n그렇지는 않다. 그러면 무조건 낮은 수를 선택하게 되버린다.\n궁금한 게, 인덱스 기준이 아닌, 숫자 기준으로는 탐욕법을 써도 되지 않나??\n예를 들어, 1부터 1000까지 증가시키면서, 그 숫자가 추가됬을 때 얼마나 전체 cost가 줄어드는지 계산해서 가장 많이 줄이는 숫자를 추가하는 식으로 한다면?\n문제는 이후로 계산을 할 때 이전 숫자들로 양자화할지 이번 숫자로 양자화할지 계속 달라진다는 점. 하지만 그 점은 위의 방식에서도 고려되야 하는것은 마찬가지다.\n게다가 시도해보니 위의 탐욕법도 모든 closest를 갱신후 계산한다면 이중 반복문이 된다.</p>\n<details><summary>cpp solution (fail)</summary>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> N<span class=\"token punctuation\">,</span>S<span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> vec<span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> seps<span class=\"token punctuation\">;</span>\nll midpointCache<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nll <span class=\"token function\">getMinCost</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> begin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// cout &lt;&lt; \"calculating \" &lt;&lt; begin &lt;&lt; ' ' &lt;&lt; end &lt;&lt; endl;</span>\n    ll<span class=\"token operator\">&amp;</span> ret<span class=\"token operator\">=</span>midpointCache<span class=\"token punctuation\">[</span>begin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n    ret<span class=\"token operator\">=</span><span class=\"token number\">1012345678</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// for (int i = vec[begin]; i &lt;= vec[end-1]; i++)</span>\n    <span class=\"token comment\">// {</span>\n    <span class=\"token comment\">//     ll cost=0;</span>\n    <span class=\"token comment\">//     for (int j = begin; j &lt; end; j++)</span>\n    <span class=\"token comment\">//     {</span>\n    <span class=\"token comment\">//         cost+=(vec[j]-i)*(vec[j]-i);</span>\n    <span class=\"token comment\">//     }</span>\n    <span class=\"token comment\">//     if(cost&lt;ret){</span>\n    <span class=\"token comment\">//         ret=cost;</span>\n    <span class=\"token comment\">//     }   </span>\n    <span class=\"token comment\">// }</span>\n    ll sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> begin<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        sum<span class=\"token operator\">+</span><span class=\"token operator\">=</span>vec<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// int k=(int)(floorf((float)sum/(float)(end-begin+1)));</span>\n    <span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span>sum<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>end<span class=\"token operator\">-</span>begin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// cout &lt;&lt; k &lt;&lt; endl;</span>\n    ll cost<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> begin<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        cost<span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>k<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    ret<span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span>cost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    \n    cost<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> begin<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        cost<span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>k<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    ret<span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span>cost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nll <span class=\"token function\">getmin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sep<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">==</span>S<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// for (int i = 0; i &lt; seps.size(); i++)</span>\n        <span class=\"token comment\">// {</span>\n        <span class=\"token comment\">//     cout &lt;&lt; seps[i] &lt;&lt; ' ';</span>\n        <span class=\"token comment\">// }</span>\n        \n        <span class=\"token comment\">// cout &lt;&lt; endl;</span>\n        ll ret<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> s <span class=\"token operator\">&lt;</span> S<span class=\"token punctuation\">;</span> s<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// cout &lt;&lt; \"calculating seps:\" &lt;&lt; s &lt;&lt; ' ' &lt;&lt;seps[s] &lt;&lt; ' ' &lt;&lt; seps[s+1] &lt;&lt; endl;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">==</span>S<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                ret<span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token function\">getMinCost</span><span class=\"token punctuation\">(</span>seps<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> ret<span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token function\">getMinCost</span><span class=\"token punctuation\">(</span>seps<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>seps<span class=\"token punctuation\">[</span>s<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    ll ret<span class=\"token operator\">=</span><span class=\"token number\">10123456789ll</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> sep<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        seps<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ret<span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span> <span class=\"token function\">getmin</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> count<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        seps<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> C<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> C<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>c<span class=\"token operator\">&lt;</span>C<span class=\"token punctuation\">;</span>c<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        cin <span class=\"token operator\">>></span> N <span class=\"token operator\">>></span> S<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> tmp<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> <span class=\"token number\">101</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">101</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                midpointCache<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        \n        vec<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        seps<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            cin <span class=\"token operator\">>></span> tmp<span class=\"token punctuation\">;</span>\n            vec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        seps<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getmin</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n</details>\n<p>이렇게 생각하고 풀었는데, 여전히 틀렸다. 아무래도 정렬된 100개의 숫자여도 거기서 막대 10개를 꽂는 경우의 수가 너무 많은건가? 싶었다.</p>\n<p>해설을 보니, 재귀 구조로 앞의 x개만 선택하는 구조를 반복하는 식으로 풀었다. 그것이 내가 구현한 방식과 경우의 수가 크게 차이나나??</p>\n<p>아니면 s 그룹으로 분할한 다음 그 최소제곱을 위한 값을 구하는 과정이 너무 느렸는지도 모르겠다.</p>\n<p>책에서 나온 구조로 바꿨는데도 시간초과가 났다. 그렇다는 건 최소로 만드는 값을 구하는 과정이 메모이제이션이 제대로 안되었거나 너무 느렸다는 뜻이다. 지금 구조는 다음과 같은데 이게 그렇게 느리다면 어떻게 해야 줄일 수 있을까?\nd미분해서 평균\n을 써서 중앙값을 구할 생각까지는 했는데 다음과 같은 것들은 모자랐다. 결국 책 참조함.</p>\n<ul>\n<li>다음과 같이 하면 <code class=\"language-text\">round</code>함수 대신 간단하게 <code class=\"language-text\">int()</code>형 변환만으로 <code class=\"language-text\">round</code>의 효과를 낼 수 있다 : <code class=\"language-text\">val=int(0.5+floatval)</code> </li>\n<li><strong>중요</strong> 인덱스 계산이 조금 복잡하다. <code class=\"language-text\">A[i]</code>, <code class=\"language-text\">A[i]^2</code>들의 합인 <code class=\"language-text\">s1, s2</code>는 0-인덱스 기반인데, 그러면 구간 합을 구하기 위해 부분 합을 이용할 때 주의가 필요하다 :</li>\n</ul>\n<p><code class=\"language-text\">s[x]: sum of a[0]~a[x]</code> 라고 하면, <code class=\"language-text\">sum(a,b): sum of a[a]~a[b]</code>를 구하려면 그냥 <code class=\"language-text\">sum(a,b)=s[b]-s[a-1]</code>로 구현해서는 안 된다. a가 0일 때 문제가 되기 때문이다. 따라서 다음과 같이 구현해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">sumrange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> lo<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> hi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">[</span>hi<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>lo<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">?</span><span class=\"token number\">0</span><span class=\"token operator\">:</span>s<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>또, 만약 구간합 함수를 hi를 포함하지 않는 쪽(hi+1로 호출)으로 구현했다면, 구간합을 반환할 때는 hi+1을 써줘야 할 것이다.</li>\n<li><code class=\"language-text\">quantize</code>또는 나의 경우 <code class=\"language-text\">getmin</code>함수에서 내부 for문에서 인덱싱에 상당히 주의를 해야 한다.</li>\n<li><code class=\"language-text\">quantize</code>함수를 메모이제이션하지 않으면 시간초과가 난다.</li>\n</ul>\n<h3 id=\"종만북-8장---타일링-방법의-수-세기-tiling2\"><a href=\"#%EC%A2%85%EB%A7%8C%EB%B6%81-8%EC%9E%A5---%ED%83%80%EC%9D%BC%EB%A7%81-%EB%B0%A9%EB%B2%95%EC%9D%98-%EC%88%98-%EC%84%B8%EA%B8%B0-tiling2\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>종만북 8장 - 타일링 방법의 수 세기 TILING2</h3>\n<p>쉽게 품. 그래도 잘 이해되지 않는게 어떻게 점화식을 <code class=\"language-text\">s(l)=s(l-1)+s(l-2)</code>로 간단하게 찾을 수 있는지. 다음과 같은 조건을 만족하는 모든 부분집합을 찾아서 더하면 다 찾았다고 할 수 있겠지만, 그걸 찾기가 직관적이지 않을수도 있고 어려울 수도 있을거같은데. 연습이 필요할 거 같다.</p>\n<ul>\n<li>모든 분류를 합했을 때 모든 경우를 포함</li>\n<li>두 가지 이상의 분류에 중복되는 경우가 없음</li>\n</ul>\n<details><summary>cpp solution</summary>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> N<span class=\"token punctuation\">,</span>S<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> cache<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getComb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> ret<span class=\"token operator\">=</span>cache<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    ret<span class=\"token operator\">=</span><span class=\"token function\">getComb</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">getComb</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ret<span class=\"token operator\">=</span>ret<span class=\"token operator\">%</span>MOD<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    MOD<span class=\"token operator\">=</span><span class=\"token number\">1000000007</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> C<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> C<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">101</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        cache<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>c<span class=\"token operator\">&lt;</span>C<span class=\"token punctuation\">;</span>c<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        cin <span class=\"token operator\">>></span> N<span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getComb</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</details>\n<h3 id=\"종만북-8장---두니발-박사의-탈옥-numb3rs\"><a href=\"#%EC%A2%85%EB%A7%8C%EB%B6%81-8%EC%9E%A5---%EB%91%90%EB%8B%88%EB%B0%9C-%EB%B0%95%EC%82%AC%EC%9D%98-%ED%83%88%EC%98%A5-numb3rs\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>종만북 8장 - 두니발 박사의 탈옥 (NUMB3RS)</h3>\n<p>각 이동 확률 배열을 만든 다음, 날을 진행하면서 계산해나가게 했는데, 곱에 의한 수치적 오류의 누적으로 틀리는 것 같다. 생각보다는 쉽게 풀렸다. 당연히 확률 맵을 만들어서 매 날마다 다음 전체 상태를 계산하는게 기본이고 거기에 뭔가 메모이제이션 등을 해야하는것일 줄 알았는데 그냥 그게 전부였고, 곱의 수치오류로 한 번 틀렸는데 실수 변수를 전부 <code class=\"language-text\">double</code>형으로 바꾸니 해결되었다. </p>\n<details><summary>cpp solution</summary>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> N<span class=\"token punctuation\">,</span>D<span class=\"token punctuation\">,</span>P<span class=\"token punctuation\">;</span> <span class=\"token comment\">// N 2~50, D:1~100, P:0~N</span>\n<span class=\"token keyword\">int</span> maps<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> naverCounts<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> movemaps<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> probs<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> tmpProbs<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">calcprobs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> leftDays<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>leftDays<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> targetProb <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> targetProb <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> targetProb<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">double</span> nextProb<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token number\">0.0f</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> navers <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> navers <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> navers<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>maps<span class=\"token punctuation\">[</span>targetProb<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>navers<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                nextProb<span class=\"token operator\">+</span><span class=\"token operator\">=</span>movemaps<span class=\"token punctuation\">[</span>navers<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>targetProb<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>probs<span class=\"token punctuation\">[</span>navers<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        tmpProbs<span class=\"token punctuation\">[</span>targetProb<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>nextProb<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>probs<span class=\"token punctuation\">,</span> tmpProbs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">101</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// for (int i = 0; i &lt; N; i++)</span>\n    <span class=\"token comment\">// {</span>\n    <span class=\"token comment\">//     probs[i]=tmpProbs[i];</span>\n    <span class=\"token comment\">//     // cout &lt;&lt; probs[i] &lt;&lt; ' ';</span>\n    <span class=\"token comment\">// }</span>\n    <span class=\"token comment\">// cout&lt;&lt;endl;</span>\n    \n    <span class=\"token function\">calcprobs</span><span class=\"token punctuation\">(</span>leftDays<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> C<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> C<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>c<span class=\"token operator\">&lt;</span>C<span class=\"token punctuation\">;</span>c<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        cin <span class=\"token operator\">>></span> N <span class=\"token operator\">>></span> D <span class=\"token operator\">>></span> P<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 지난 일 수 d 교도소 마을 번호 p</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> naverCount<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                cin <span class=\"token operator\">>></span> maps<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>maps<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    naverCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            naverCounts<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>naverCount<span class=\"token punctuation\">;</span>\n            probs<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// cout &lt;&lt; \"step 0 \" &lt;&lt; endl;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> here <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> here <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> here<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> there <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> there <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> there<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>here<span class=\"token operator\">==</span>there<span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                movemaps<span class=\"token punctuation\">[</span>here<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>there<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token number\">1.0f</span><span class=\"token operator\">/</span>naverCounts<span class=\"token punctuation\">[</span>here<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// cout &lt;&lt; \"step 1 \" &lt;&lt; endl;</span>\n        \n        \n        probs<span class=\"token punctuation\">[</span>P<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token number\">1.0f</span><span class=\"token punctuation\">;</span>\n        cin <span class=\"token operator\">>></span> T<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// calc all probs</span>\n        <span class=\"token function\">calcprobs</span><span class=\"token punctuation\">(</span>D<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// cout &lt;&lt; \"step 2 \" &lt;&lt; endl;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> t <span class=\"token operator\">&lt;</span> T<span class=\"token punctuation\">;</span> t<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> village<span class=\"token punctuation\">;</span>\n            cin <span class=\"token operator\">>></span> village<span class=\"token punctuation\">;</span>\n            \n            std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>fixed <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>showpoint<span class=\"token punctuation\">;</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setprecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> probs<span class=\"token punctuation\">[</span>village<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n        \n        \n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n</details>\n<h2 id=\"tags\"><a href=\"#tags\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tags</h2>\n<p>  #sport, #blog</p>","id":"c0d68fa0-0a15-5724-9b59-88b2035da05d","fields":{"slug":"종만북-문제-풀이"},"frontmatter":{"date":"2019-09-14","title":"종만북 문제 풀이","category":"sport","tags":["dev/sport","blog"],"banner":"/assets/bg/2.jpg"},"timeToRead":6},{"excerpt":"종만북 8장 동적계획법 - JLIS이게 대체 어떻게 난이도 '하'라는건지 모르겠다.\n점화식 찾기도 어렵고 접근방법을 알지 못하면 어떻게 겹쳐지는 부분을 해결할 것인지 감도 못잡게 되는데..\n책보고 힌트를 알고도 답이 안 나와서 소스를 보고 이해하는것으로 넘어갔다.책에 있는 솔루션 그대로 하면 틀리고 부분을 빼줘야 한다. 왜 빼줘야하는건지는 잘 모르겠다.…","html":"<h3 id=\"종만북-8장-동적계획법---jlis\"><a href=\"#%EC%A2%85%EB%A7%8C%EB%B6%81-8%EC%9E%A5-%EB%8F%99%EC%A0%81%EA%B3%84%ED%9A%8D%EB%B2%95---jlis\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>종만북 8장 동적계획법 - JLIS</h3>\n<p>이게 대체 어떻게 난이도 '하'라는건지 모르겠다.\n점화식 찾기도 어렵고 접근방법을 알지 못하면 어떻게 겹쳐지는 부분을 해결할 것인지 감도 못잡게 되는데..\n책보고 힌트를 알고도 답이 안 나와서 소스를 보고 이해하는것으로 넘어갔다.</p>\n<p>책에 있는 솔루션 그대로 하면 틀리고 <code class=\"language-text\">ret=2;</code>부분을 빼줘야 한다. 왜 빼줘야하는건지는 잘 모르겠다. 2를 넣는게 맞는거 같아 보이는데.</p>\n<details><summary>cpp solution</summary>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> cache<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ll NEGINF<span class=\"token operator\">=</span>numeric_limits<span class=\"token operator\">&lt;</span>ll<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">jlis</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> indexA<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> indexB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> ret<span class=\"token operator\">=</span>cache<span class=\"token punctuation\">[</span>indexA<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>indexB<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n\n    ret<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    ll am<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>indexA<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">?</span> NEGINF<span class=\"token operator\">:</span>a<span class=\"token punctuation\">[</span>indexA<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ll bm<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>indexB<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">?</span> NEGINF<span class=\"token operator\">:</span>b<span class=\"token punctuation\">[</span>indexB<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ll maxElement<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>am<span class=\"token punctuation\">,</span>bm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// cout &lt;&lt; indexA &lt;&lt; ' ' &lt;&lt; indexB &lt;&lt; ' ' &lt;&lt; endl;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nextA<span class=\"token operator\">=</span>indexA<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>nextA<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>nextA<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>maxElement<span class=\"token operator\">&lt;</span>a<span class=\"token punctuation\">[</span>nextA<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            ret<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span> <span class=\"token function\">jlis</span><span class=\"token punctuation\">(</span>nextA<span class=\"token punctuation\">,</span>indexB<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nextB<span class=\"token operator\">=</span>indexB<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>nextB<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>nextB<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>maxElement<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">[</span>nextB<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            ret<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span> <span class=\"token function\">jlis</span><span class=\"token punctuation\">(</span>indexA<span class=\"token punctuation\">,</span>nextB<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</details>\n<p>내가 생각하지 못한 것: 어떻게 서로 겹치지 않도록 해야할지 감을 잡지 못했다.\n솔루션에서는 한 부분 구조에서 그 서로 겹치지 않도록 구조를 잡아주되, 그 외에는 생각보다 그렇게 그부분이 어렵게 처리되거나 그런게 없었다. 그저 두 인덱스에 대해 최대를 잡아 아무 쪽에서나 그보다 큰 수를 택하도록 되어있다. 그런데 이렇게만 하면 마지막 예제에서 10,10을 골라버려서 이후의 1,2를 선택하지 못하게 될 수가 있는데, 솔루션에서는 그걸 -1 입력에 대해서는 모든 시작점을 고를 수 있도록 <code class=\"language-text\">maxElement</code>를 작은 수로 설정하여 해결했다. </p>\n<h3 id=\"종만북-8장---원주율-외우기---pi\"><a href=\"#%EC%A2%85%EB%A7%8C%EB%B6%81-8%EC%9E%A5---%EC%9B%90%EC%A3%BC%EC%9C%A8-%EC%99%B8%EC%9A%B0%EA%B8%B0---pi\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>종만북 8장 - 원주율 외우기 - PI</h3>\n<p>각 선택 구현만 하면 간단한 동적 계획법 문제. 선택 구현에서 좀 실수가 있었다. 점화식을 구하자면 다음과 같이 표현할 수 있을 것이다.</p>\n<p><code class=\"language-text\">cost(start)=for all (cost, blockSize) in costChoice : min(cost(start+blockSize)+cost)</code></p>\n<p>위치에 대해서만 메모이제이션할 게 아니라, 각 숫자패턴에 대해 메모이제이션할 수 있다면 더 효율적일거 같은데 숫자패턴을 어떻게 메모이제이션할지 모르겠어서 그만뒀다.</p>\n<p><code class=\"language-text\">costCache[3][10][10][10][10][10]</code> 이렇게 해야 하나..? 그러면 메모리를 너무 먹는다. 하긴 각 숫자패턴도 이렇게 보면 10만가지 정도 되니 메모이제이션하기엔 좀 클지도 모르겠다.</p>\n<details><summary>cpp solution</summary>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10006</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> cache<span class=\"token punctuation\">[</span><span class=\"token number\">10006</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// int costCache[5][10];</span>\n<span class=\"token keyword\">int</span> len<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">calcBlockCost</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">calcCost</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// cost(pos)=min(cost(...))</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pos<span class=\"token operator\">>=</span>len<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 세자리~다섯자리에다가 패턴도 여러가지이므로 여러가지 선택이 가능한데, 이걸 어떻게 간단하게 구현할까?</span>\n    <span class=\"token comment\">// 모든 선택을 다 구현하려 하면 노가다다.</span>\n    <span class=\"token comment\">// 그러면 어차피 선택한 숫자에 대해 난이도는 최소로 결정할 것이므로, 선택을 세자리~다섯자리로 하고</span>\n    <span class=\"token comment\">// 계산은 다른 함수에서 하면 될 듯?</span>\n\n    <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> ret<span class=\"token operator\">=</span>cache<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n\n    ret<span class=\"token operator\">=</span><span class=\"token number\">1000000000</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        ret<span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span> <span class=\"token function\">calcBlockCost</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">calcCost</span><span class=\"token punctuation\">(</span>pos<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">calcBlockCost</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> block<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> start<span class=\"token operator\">+</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        block<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>start<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> difficulty<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// cout &lt;&lt; difficulty &lt;&lt; ' ' &lt;&lt; \"diff\" &lt;&lt; '\\n';</span>\n    <span class=\"token keyword\">bool</span> isAllSame<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> isMonoChange<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> toggle<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> isToggle<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> diff<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> isSequence<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isToggle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                toggle<span class=\"token punctuation\">[</span>i<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>block<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>toggle<span class=\"token punctuation\">[</span>i<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    isToggle<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            diff<span class=\"token operator\">=</span>block<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>block<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>diff<span class=\"token operator\">!=</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> diff<span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> isMonoChange<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>diff<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> isAllSame<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>diff<span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>block<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                isSequence<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                isMonoChange<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            diff<span class=\"token operator\">=</span>block<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>block<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>diff<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> isAllSame<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isAllSame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        difficulty<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isMonoChange<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        difficulty<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isToggle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        difficulty<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isSequence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        difficulty<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// cout &lt;&lt; start &lt;&lt; ' ' &lt;&lt; length &lt;&lt; ' ' &lt;&lt; difficulty &lt;&lt; \" cost\" &lt;&lt; endl;</span>\n    <span class=\"token keyword\">return</span> difficulty<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> C<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> C<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>c<span class=\"token operator\">&lt;</span>C<span class=\"token punctuation\">;</span>c<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        string s<span class=\"token punctuation\">;</span>\n        cin <span class=\"token operator\">>></span> s<span class=\"token punctuation\">;</span>\n        len<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>p<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            arr<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// cout &lt;&lt; arr[p];</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            cache<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">int</span> ans<span class=\"token operator\">=</span><span class=\"token function\">calcCost</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// cout &lt;&lt; '\\n';</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</details>\n<ul>\n<li>책에서는 점화식을 다음과 같이 깔끔하게 표기하고 있다.\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mi>e</mi><mi>m</mi><mi>o</mi><mi>r</mi><mi>i</mi><mi>z</mi><mi>e</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>m</mi><mi>i</mi><msubsup><mi>n</mi><mrow><mi>L</mi><mo>=</mo><mn>3</mn></mrow><mn>5</mn></msubsup><mo stretchy=\"false\">(</mo><mi>m</mi><mi>e</mi><mi>m</mi><mi>o</mi><mi>r</mi><mi>i</mi><mi>z</mi><mi>e</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>t</mi><mo>+</mo><mi>L</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>f</mi><mi>y</mi><mo stretchy=\"false\">(</mo><msub><mi>N</mi><mrow><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>t</mi><mo separator=\"true\">,</mo><mi>L</mi></mrow></msub><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">memorize(start)=min^5_{L=3}(memorize(start+L)+classify(N_{start,L}))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord mathdefault\">e</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.089439em;vertical-align:-0.275331em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">i</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-2.424669em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">L</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">3</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.275331em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord mathdefault\">e</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">t</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">L</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.328331em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">s</span><span class=\"mord mathdefault mtight\">t</span><span class=\"mord mathdefault mtight\">a</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault mtight\">t</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathdefault mtight\">L</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>풀 때는 단조수열, 두 숫자가 반복하여 바뀌는 것에 대한 단어가 생각이 안나서 <code class=\"language-text\">isMonoChange</code>,<code class=\"language-text\">isToggle</code>같은 이름으로 했는데, 단조수열은 <code class=\"language-text\">progressive</code>, 반복수열은 <code class=\"language-text\">alternating</code>이란 좋은 이름이 있다.</li>\n</ul>\n<h2 id=\"tags\"><a href=\"#tags\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tags</h2>\n<p>  #sport, #blog</p>","id":"380cbaf7-ddf3-5344-9299-1cbffb7acb4b","fields":{"slug":"종만북-문제-풀이"},"frontmatter":{"date":"2019-09-11","title":"종만북 문제 풀이","category":"sport","tags":["dev/sport","blog"],"banner":"/assets/bg/4.jpg"},"timeToRead":4},{"excerpt":"백준 3019 - 테트리스https://www.acmicpc.net/problem/3019일단 방법의 수를 구해야 하므로,\n방법의 수는 현재 블록을 놓을 수 있는 형태의 칸수 패턴들 마다 1씩 증가한다.\n그런데, 가장 큰 문제는 블록 및 블록 회전을 구현하는 것.\n회전까지 구현하려면 일일히 하면 너무 노가다일거 같은데.\n그냥…","html":"<h3 id=\"백준-3019---테트리스\"><a href=\"#%EB%B0%B1%EC%A4%80-3019---%ED%85%8C%ED%8A%B8%EB%A6%AC%EC%8A%A4\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>백준 3019 - 테트리스</h3>\n<p><a href=\"https://www.acmicpc.net/problem/3019\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.acmicpc.net/problem/3019</a></p>\n<p>일단 방법의 수를 구해야 하므로,\n방법의 수는 현재 블록을 놓을 수 있는 형태의 칸수 패턴들 마다 1씩 증가한다.\n그런데, 가장 큰 문제는 블록 및 블록 회전을 구현하는 것.\n회전까지 구현하려면 일일히 하면 너무 노가다일거 같은데.\n그냥 4개 블록을 끊어지지만 않게 구현한 모든 가지수가 필요한 것 아닌가?\n그걸 어떻게 할지가 문제다.\n사실 형태상 가로로 밀 수 있다면 모든 가로 패턴이, 세로로 밀 수 있다면 모든 세로 패턴을 구할 수 있는데,\n어떤 블록은 180도 회전하면 같은 모양이 되고, 어떤 블록들은 아니다.\n그렇게 모든 회전까지 포함한 가지수들을 구현해서,\n그리고 바닥에 놓을 수 있는지는 그 가지수들의 패턴을 역이용해서\n가장 아래에 있는 블록 기준 다른 아래에 돌출된 블록들의 상대적 위치를 기록하면\n될 거 같은데.. 구현이 어려울 거 같다.\n아무래도 지금은 블록들을 생성을 어떻게 해야 할 지 감이 안 오는데,\n각 블록의 번호의 회전 상태에 따라 아래의 패턴만 저장해서 비교해도 되지 않을까?</p>\n<p>마지막으로 생각한 방식이 정확히 맞아서 바로 성공했다. 각 바닥의 패턴, 각 블록의 상대적 바닥 패턴을 기록해서 원소별로 더한 후, 더한 결과가 수평이 맞는지 확인했다.</p>\n<details><summary>python solution</summary>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">def solve():\n    bottomPatterns={}\n    bottomPatterns[1]=[[0],[0,0,0,0]]\n    bottomPatterns[2]=[[0,0]]\n    bottomPatterns[3]=[[0,0,-1],[-1,0]]\n    bottomPatterns[4]=[[-1,0,0],[0,-1]]\n    bottomPatterns[5]=[[0,0,0],[0,-1],[-1,0,-1],[-1,0]]\n    bottomPatterns[6]=[[0,0,0],[0,0],[0,-1,-1],[-2,0]]\n    bottomPatterns[7]=[[0,0,0],[0,-2],[-1,-1,0],[0,0]]\n    \n    patterns={1:[],2:[],3:[],4:[]}\n\n    c,p=ria()\n    maps=ria()\n    for i in range(c):\n        if(i+4&lt;=c):\n            patterns[4].append(maps[i:i+4])\n        if(i+3&lt;=c):\n            patterns[3].append(maps[i:i+3])\n        if(i+2&lt;=c):\n            patterns[2].append(maps[i:i+2])\n        if(i+1&lt;=c):\n            patterns[1].append(maps[i:i+1])\n    # it(patterns)\n\n    ans = 0\n    for patArr in bottomPatterns[p]:\n        pattern=patterns[len(patArr)]\n        for pat in pattern:\n            copyPat=pat[:]\n            # if(len(patArr) != len(copyPat)):\n            #     it(&#39;ERROR&#39;)\n            base=copyPat[0]+patArr[0]\n            success=True\n            # it(&#39;patArr: &#39;, patArr, &#39; pattern: &#39;, pat)\n            for i in range(len(copyPat)):\n                copyPat[i]+=patArr[i]\n                if(base != copyPat[i]):\n                    # it(&#39;Fail for this.&#39;)\n                    success=False\n                    break\n            if(success):\n                ans+=1\n    print(ans)\n    pass</code></pre></div>\n</details>\n<h3 id=\"백준-2210---테트리스\"><a href=\"#%EB%B0%B1%EC%A4%80-2210---%ED%85%8C%ED%8A%B8%EB%A6%AC%EC%8A%A4\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>백준 2210 - 테트리스</h3>\n<p><a href=\"https://www.acmicpc.net/problem/2210\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.acmicpc.net/problem/2210</a></p>\n<p>5x5 크기 정도이므로, 주어진 대로 구현해도 될 거 같다.\n임의의 위치에서 랜덤하게 움직이는 모든 경우의 수가 몇 가지 정도일까?\n생각보다 상당히 많을거 같기도 한데, 길이도 6 제한이므로 괜찮지 않을까.</p>\n<p>라고 생각했고 pypy3로 280ms로 맞았다. 혹시 python3로 하면 시간초과될까? 하고 내봤더니 놀랍게도 152ms로 맞았다. 어째서 python3가 더 빠른거지??</p>\n<details><summary>python solution</summary>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">def solve():\n    patset=set()\n    dy=[0,0,+1,-1]\n    dx=[+1,-1,0,0]\n    maps=create2DArray(5,5,-1)\n    for r in range(5):\n        maps[r]=ria()\n    def move(y,x,pat=[]):\n        if(len(pat)==6):\n            tup = tuple(pat)\n            if(tup in patset):\n                return\n            patset.add(tup)\n            return\n        for i in range(4):\n            ny,nx=y+dy[i],x+dx[i]\n            # it(&#39;try &#39; ,ny, &#39; &#39; ,nx, &#39; &#39; , len(pat))\n            if(ny&lt;0 or ny&gt;=5 or nx&lt;0 or nx&gt;=5):\n                continue\n            tmppat=pat[:]\n            tmppat.append(maps[ny][nx])\n            move(ny,nx,tmppat)\n        pass\n\n    for r in range(5):\n        for c in range(5):\n            move(r,c)\n    \n    # it(patset)\n    print(len(patset))\n    pass</code></pre></div>\n</details>\n<h3 id=\"백준-2805---나무-자르기\"><a href=\"#%EB%B0%B1%EC%A4%80-2805---%EB%82%98%EB%AC%B4-%EC%9E%90%EB%A5%B4%EA%B8%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>백준 2805 - 나무 자르기</h3>\n<p><a href=\"https://www.acmicpc.net/problem/2805\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.acmicpc.net/problem/2805</a></p>\n<p>이런 경우 보통 매 반복마다 전체를 돌면 시간초과되고,\n정보를 간단하게 압축해야 한다.\n나무가 무려 백만개까지 되므로,\n근데 높이가 인덱싱 가능한 수치가 아니다. 흠 어떻게 해야 하지??\n일단 백만개나 되므로 정렬만 해도 거의 시간초과 아닌가??\n이진 탐색을 해도 될까 이문제에서?</p>\n<details><summary>python solution</summary>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">def solve():\n    n,m=ria()\n    maps=ria()\n    lo=0\n    hi=1000000000\n    def calcsum(mm):\n        sums=0\n        for i in range(n):\n            sums+=max(maps[i]-mm,0)\n        return sums\n    while(lo+1&lt;hi):\n        # if(hi-lo&lt;0.000001):\n        #     break\n        mid=(lo+hi)//2\n        cent=calcsum(mid)\n        # it(&#39;lo &#39;,lo, &#39; hi &#39;, hi, &#39; cent &#39;, cent)\n        if(cent&lt;m):\n            hi=mid\n            continue\n        else:\n            lo=mid\n            continue\n\n    # it(lo,hi)\n    print(round(lo))\n    pass</code></pre></div>\n</details>\n<h3 id=\"종만북-8장---trianglepath\"><a href=\"#%EC%A2%85%EB%A7%8C%EB%B6%81-8%EC%9E%A5---trianglepath\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>종만북 8장 - TRIANGLEPATH</h3>\n<p>동적 계획법 없이 반대로 풀기로도 풀린다.</p>\n<details><summary>cpp solution</summary>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> maps<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> C<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> C<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>c<span class=\"token operator\">&lt;</span>C<span class=\"token punctuation\">;</span>c<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n        cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> r<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>r<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>r<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>c<span class=\"token operator\">&lt;=</span>r<span class=\"token punctuation\">;</span>c<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                cin <span class=\"token operator\">>></span> maps<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> r<span class=\"token operator\">=</span>n<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>r<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>r<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>c<span class=\"token operator\">&lt;=</span>r<span class=\"token punctuation\">;</span>c<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                maps<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maps<span class=\"token punctuation\">[</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> maps<span class=\"token punctuation\">[</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> maps<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// for(int r=0;r&lt;n;r++){</span>\n        <span class=\"token comment\">//     for(int c=0;c&lt;=r;c++){</span>\n        <span class=\"token comment\">//         cout &lt;&lt; maps[r][c] &lt;&lt; ' ';</span>\n        <span class=\"token comment\">//     }</span>\n        <span class=\"token comment\">//     cout &lt;&lt; '\\n';</span>\n        <span class=\"token comment\">// }</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> maps<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n</details>\n<p>여전히 vscode markdown에 cpp/c 문법 하이라이팅에 에러가 있다.</p>\n<ul>\n<li>최적 부분 구조에 속하지 않는 정보를 제하는 것이 중요하다.</li>\n</ul>\n<p>그러나 이렇게 푸는 것은 풀리긴 하지만 별로 배우는 건 없다. 지금 다시 상세히 읽으니 이해가 된다. 대체 왜 각 상태의 모든 정보를 담은 <code class=\"language-text\">searchMax(y,x,sum)</code>을 그대로 메모이제이션을 해서는 안 되는지. 그렇게 하려면 두 가지 문제가 있다:</p>\n<ol>\n<li><code class=\"language-text\">sum</code>을 기준으로 메모이제이션 하므로 숫자의 크기가 클 경우 많은 메모리가 필요하게 된다.</li>\n<li><code class=\"language-text\">sum</code>을 기준으로 하므로 합이 겹치지 않는 경우는 전부 다른 경우로 계산된다.</li>\n</ol>\n<p>그런데 어떻게 여기서 <code class=\"language-text\">sum</code>을 빼도 된다고 생각할 수 있을까? 그 기준은 무조건 <strong>이미 선택한 정보인가</strong> 이다. <code class=\"language-text\">y, x</code>는 앞으로 재귀 호출이 선택할 정보들을 결정하기에 필요한 정보지만, <code class=\"language-text\">sum</code>은 이미 선택한 정보다. 여전히 잘 와닿지 않는다. 그렇다면 이렇게 물어보자. '<code class=\"language-text\">sum</code>이 바뀌고 다른게 그대로라면, 앞으로의 선택에 영향을 주는가?'. </p>\n<h3 id=\"종만북-8장---lis\"><a href=\"#%EC%A2%85%EB%A7%8C%EB%B6%81-8%EC%9E%A5---lis\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>종만북 8장 - LIS</h3>\n<details><summary>cpp solution</summary>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">505</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> mins<span class=\"token punctuation\">[</span><span class=\"token number\">505</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 역시 cache를 505x505로 하니 메모리 초과가 되버리는거 같다.</span>\n<span class=\"token comment\">// 그렇다면, 그냥 모든 수 500가지에 대해, 그 수를 기준으로 치고, 500개 중 넘는 걸 세는 것을 해서</span>\n<span class=\"token comment\">// 최대 길이를 저장한다면? 시간복잡도 500*500*50=250000*50=1250,0000 cpp로는 충분할지도. 하지만 이건</span>\n<span class=\"token comment\">// 전혀 동적계획이 아닌데.. 아니, 넘는 걸 센다고 해도 그게 그대로 길이가 되지 않는구나..</span>\n<span class=\"token comment\">// 현재 쓰는 코드도 start를 지정하면 cache에서 start를 뺄 수 있는것 아닌가?</span>\n<span class=\"token comment\">// 음 역시 len은 선택해온 정보고, start는 앞으로 선택을 결정하는 정보니 len을 지워야 하는건가??</span>\n<span class=\"token comment\">// 그렇지만 len 없이 어떻게 점화식을 나타내지?</span>\n\n<span class=\"token comment\">// 사실 기억으론 배열에 인덱스에 해당하는 길이의 최대한 작은 수를 저장하는 방식으로 관리하는 것으로 기억나긴 하는데.. 그건 그냥 기억으로 푸는 것일 뿐. 왜 그렇게 해야 하는지 스스로 논리적으로 유도하기가 힘들다.</span>\n<span class=\"token comment\">// </span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> C<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> C<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>c<span class=\"token operator\">&lt;</span>C<span class=\"token punctuation\">;</span>c<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 어떻게 풀었었는지 까먹었다.</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> t<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>t<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>t<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            cin <span class=\"token operator\">>></span> arr<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            mins<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>BIG<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 특정 수를 선택하면, 기준 수가 늘어나버리고,</span>\n        <span class=\"token comment\">// 선택하지 않으면 길이가 짧아진다.</span>\n        <span class=\"token comment\">// 즉, 길이가 길거나 선택 수가 작은 정보들을 우선순위 큐를 사용하여 관리한다면?</span>\n        <span class=\"token comment\">// 아니면, 각 길이별로 배열에, 그 최소 선택수를 저장하여 관리하면서,</span>\n        <span class=\"token comment\">// 높은 수를 만나게 되면 길이+1 칸에 그 높은수를 저장한다면?,</span>\n        <span class=\"token comment\">// 그러면 특정 수에 대해 어느 칸에 더할 수 있는지 매 번 찾아야 한다..</span>\n        \n        <span class=\"token keyword\">int</span> ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">&lt;</span>mins<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">></span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                        ans<span class=\"token operator\">=</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    mins<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>cur<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// if(cur &lt; mins[ans-1]){</span>\n            <span class=\"token comment\">//     mins[ans-1]=cur;</span>\n            <span class=\"token comment\">// }</span>\n\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// for(int k=0;k&lt;n;k++){</span>\n        <span class=\"token comment\">//     if(mins[k]==BIG){</span>\n        <span class=\"token comment\">//         ans=k;</span>\n        <span class=\"token comment\">//     }</span>\n        <span class=\"token comment\">// }</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>분명 위의 문제는 최적 부분 구조에 이전의 기록인 합산이 포함되지 않는 구조여서 뺄 수 있었지만, 이번 문제에서는 특정 위치에서 특정 start가 정해져도 최대 길이인지 결정하려면 현재 길이가 필요해지고, 현재 길이를 캐시하려고 하면 메모리가 너무 늘어나버리는 문제가 있었다. 나는 반드시 재귀를 호출할 때 인덱스 0부터 시작해야한다고 생각해서 시그니쳐를 <code class=\"language-text\">search(int cur, int start, int sum)</code> 이런 식으로 생각해서, 인덱스를 증가하면서 이전 수와 비교 (또는 현재 수 기준 다음 수와 비교)하여 감소했으면, 초기화하거나, 그대로 진행하는 것 중의 최대, 증가했으면, 선택하거나, 그대로 진행하는것 중의 최대 이렇게 4가지 선택을 해서 계산하게 했으나 시간초과가 났다.</p>\n<p>그냥 바깥 반복문에서 모든 start를 시도하게 하면, 또 그 search에서 현 start 이상의 다른 start를 지정하는 식으로 호출될 수 있다. 그리고 그렇게 <code class=\"language-text\">search(int start)</code>를 <code class=\"language-text\">start</code> 값 이상의 lis라고 정의하면 <code class=\"language-text\">sum</code>도 필요 없게 된다. 어째서 그럴까? 어떻게 해야 이런 풀이를 생각해낼 수 있을까..</p>\n<p>배울 기법:</p>\n<ul>\n<li><code class=\"language-text\">S[-1]=-inf</code>같은 식으로 지정하여, 바깥 반복문을 돌면서 최대값을 찾아야 하는 것을 -1을 호출하여 모든 경우를 다시 호출하게 만들기(?)</li>\n</ul>\n</details>\n<h2 id=\"tags\"><a href=\"#tags\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tags</h2>\n<p>  #sport, #blog</p>","id":"ad962ba3-4ef5-5a48-b6fd-476362c9a933","fields":{"slug":"백준-문제-풀이"},"frontmatter":{"date":"2019-08-28","title":"백준 문제 풀이","category":"sport","tags":["dev/sport","blog"],"banner":"/assets/bg/2.jpg"},"timeToRead":6},{"excerpt":"백준 16137 - 견우와 직녀https://www.acmicpc.net/problem/16137다리를 연속해서 건너서는 안 된다는 조건 때문에 여러 번 틀림. 다 풀었다고 생각되더라도 다시한번 모든 조건을 구현했는지 확인해야겠다. 아니면 처음부터 다양한 조건들을 나타내는 테스트 케이스들을 하나씩 만들어 보는게 좋을수도. bfs로는 구현하기 까다롭다고 생각했는데 (주기 다리 건너기 때문에) 검색해보니 bfs…","html":"<h3 id=\"백준-16137---견우와-직녀\"><a href=\"#%EB%B0%B1%EC%A4%80-16137---%EA%B2%AC%EC%9A%B0%EC%99%80-%EC%A7%81%EB%85%80\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>백준 16137 - 견우와 직녀</h3>\n<p><a href=\"https://www.acmicpc.net/problem/16137\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.acmicpc.net/problem/16137</a></p>\n<p>다리를 연속해서 건너서는 안 된다는 조건 때문에 여러 번 틀림. 다 풀었다고 생각되더라도 다시한번 모든 조건을 구현했는지 확인해야겠다. 아니면 처음부터 다양한 조건들을 나타내는 테스트 케이스들을 하나씩 만들어 보는게 좋을수도. </p>\n<p>bfs로는 구현하기 까다롭다고 생각했는데 (주기 다리 건너기 때문에) 검색해보니 bfs로 구현한 사람이 있었다. 다리 사용의 유무 때문에도 bfs로 구현하기 어렵다고 생각했지만 bfs로 구현한 코드가 있다. 그 경우 이전 정보에 대해 필요한 유일한 정보인 이전 위치가 절벽이었는지에 대한 정보를 탐색할 때 얻기 위해, 현재 상태 정보에 현재 위치가 절벽인지에 대한 여부를 상태 정보에 넣는다. 또, 탐색 거리를 건너뛰는 문제에 대한 점은 bfs에서도 visited여부만으로 갱신하는 게 아니라, cost를 더 줄일 수 있으면 탐색함으로써 구현 가능하다.</p>\n<h2 id=\"tags\"><a href=\"#tags\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tags</h2>\n<p>  #sport, #blog</p>","id":"4412220d-2f53-5dbc-a04d-092dded43336","fields":{"slug":"백준-문제-풀이"},"frontmatter":{"date":"2019-08-26","title":"백준 문제 풀이","category":"sport","tags":["dev/sport","blog"],"banner":"/assets/bg/2.jpg"},"timeToRead":1},{"excerpt":"cf: 해설을 보는데 뭔가 알 듯도 한데 이해가 안 간다.새로운 하노이 탑은 하도 안 되서 인터넷에 검색해봤는데 내 풀이랑 원리는 똑같은 것이 나왔다.\n결국 파이썬의 한계인건가?? 분명 어딘가 병목이 있으리라 생각하고 별 최적화를 다 해봤지만 여전히 시간초과가 떴다. 그리고 양방향 탐색을 적용하면 틀려버린다..파이썬 가 느리다고 해서 custom copy…","html":"<p>cf: 해설을 보는데 뭔가 알 듯도 한데 이해가 안 간다.</p>\n<p>새로운 하노이 탑은 하도 안 되서 인터넷에 검색해봤는데 내 풀이랑 원리는 똑같은 것이 나왔다.\n결국 파이썬의 한계인건가?? 분명 어딘가 병목이 있으리라 생각하고 별 최적화를 다 해봤지만 여전히 시간초과가 떴다. 그리고 양방향 탐색을 적용하면 틀려버린다..</p>\n<p>파이썬 <code class=\"language-text\">copy.deepcopy</code>가 느리다고 해서 custom copy도 만들고, 기타등등 여러가지를 해봤지만 계속 시간초과가 났다. 입출력은 매우 작기 때문에 입출력이 원인일 리도 없다. 필요한 만큼의 시간복잡도를 썼을 뿐인데 실패하면 대체 어떻게 해야 하나??</p>\n<h3 id=\"boj-12906---백조와-호수\"><a href=\"#boj-12906---%EB%B0%B1%EC%A1%B0%EC%99%80-%ED%98%B8%EC%88%98\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>boj 12906 - 백조와 호수</h3>\n<p>그냥 주어진 대로 매번 녹이면서 탐색하면 시간초과. 유니온-파인드 원리를 이용해 얼음들을 녹이면서 효율적으로 물들이 만났는지 확인해야 한다.</p>\n<p>어려움들:</p>\n<ul>\n<li>물들을 dfs 탐색하면서 처음 그룹에 넣는건 어렵지 않았는데, 나중에 얼음을 녹이면서 그 관리가 어려웠다. 다음 연산들이 모두 효율적이어야 했기 때문이다:</li>\n<li>\n<ol>\n<li>특정 칸의 그룹 찾기: <code class=\"language-text\">groupof[y][x]-&gt;int</code>배열을 사용.</li>\n</ol>\n</li>\n<li>x. 특정 그룹의 모든 칸 찾기 <code class=\"language-text\">groupToCells[g]-&gt;list((y,x))</code> 배열을 사용. 그러나 나중에 필요없어졌다.</li>\n<li>\n<ol start=\"3\">\n<li>두 백조의 그룹이 같은지 확인하기: 처음엔 그냥 <code class=\"language-text\">groupof[(pl1)]==groupof[(pl2)]</code>이렇게 구현했는데, 나중에 그룹 합치기가 문제가 되어 <code class=\"language-text\">getGroup(y,x)-&gt;int</code>함수를 만들었다.</li>\n</ol>\n</li>\n<li>\n<ol start=\"4\">\n<li>두 그룹 합치기: 처음엔 '특정 그룹의 모든 칸 찾기'를 하는 <code class=\"language-text\">groupToCells</code>배열을 관리하여 합칠 일이 생기면 한쪽 그룹의 모든 칸들의 그룹값을 바꿔줌으로써 해결하려 했으나, <code class=\"language-text\">nextMeltQ</code>에 이미 들어가 있는 녹일 칸의 물 그룹 정보는 바뀌질 않아 문제가 생겼다. 그래서 다시 그룹간의 동일관계를 나타내는 <code class=\"language-text\">mergedGroup[g]-&gt;int</code> 배열을 만들었다. 처음엔 각자 자기 자신을 가리키다가, 합칠 때는 한 그룹이 다른 그룹을 가리키게 하고, 그룹을 찾는 것은 <code class=\"language-text\">getGroup</code>함수에서 <code class=\"language-text\">mergedGroup[g]</code>가 <code class=\"language-text\">g</code>자기 자신을 가리킬 때까지 찾아 들어가게 했다. 유니온-파인드의 최적화중 하나인 경로 압축도 사용했다. <code class=\"language-text\">mergedGroup[initialG]=g</code></li>\n</ol>\n</li>\n</ul>\n<p>아래는 최종 <code class=\"language-text\">getGroup</code>함수:</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">def getGroup(y,x):\n    if(y&lt;0 or y&gt;=r or x&lt;0 or x&gt;=c):\n        return -1\n    g = groupOf[y][x]\n    lg = mergedGroup[g]\n    gg = mergedGroup[mergedGroup[g]]\n    while(lg!=gg):\n        lg=gg\n        gg=mergedGroup[lg]\n    mergedGroup[g]=gg\n    return gg</code></pre></div>\n<p>그리고 위의 연산들을 해야 하는 상황을 잘 구별해서 작성해야 한다.</p>\n<ul>\n<li>\n<ol start=\"5\">\n<li>녹일 때 모든 주변 물 그룹들을 합쳐야 한다. set로 중복을 없게 넣은 다음 리스트로 만들어서 i,i+1 물 그룹들을 합쳐가는 방식으로 구현했다.</li>\n</ol>\n</li>\n<li>\n<ol start=\"6\">\n<li>얼음 녹일 때 주변 물 그룹의 번호를 부여해야 했다. 처음엔 <code class=\"language-text\">melt</code>함수에서 꺼내서 4방향을 탐색해서 그 번호들을 부여하려 했는데, 그렇게 되면 어느 우선순위로 할지 정해야 하고, 아예 처음에 <code class=\"language-text\">dfs</code>를 할 때 현재 위치가 물일 경우 주변 4방향을 녹일 타겟 큐에 넣는 것이므로, 녹일 타겟 정보에 현재 물의 그룹 번호를 같이 넣어주면 되었다.</li>\n</ol>\n</li>\n</ul>\n<p>예기치 못한 버그도 있었다:</p>\n<ul>\n<li>\n<ol>\n<li>\n<p>분명 예제에 그룹 7이 나올 수가 없는데 녹이면서 그룹7이 오른쪽 위 구석에 생겨났다. 그리고 녹이면서 한 쪽 끝에 있는 그룹이 다른쪽 그룹에 나타나는 경우가 생겼다. 왜인가 했더니, 파이썬 배열 인덱싱이 음수를 허용하기 때문이었다. 경계 체크를 하기 귀찮아서 try-except문으로 대신하려고 했는데 돌아가긴 돌아가길래 잘 되나 싶었는데 이것이 원인으로 위의 문제가 생긴 것이었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">...\npy,px=ny+dy[i],nx+dx[i]\ntry:\npg = groupOf[py][px] # 나중엔 getGroup함수 사용.\nexcept:\npg = -1\nif(pg&gt;0):\nnearGroups.add(pg)\nelif(pg==0):\n# it(&#39;putting next.&#39;, py,px,g)\nnextMeltQ.put((py,px,g))\n...</code></pre></div>\n<p>이렇게 하게 되면, py나 px가 음수가 나와도, 마지막 값 등을 참조하게 되면서 코드는 작동은 되지만 이상하게 작동하게 된다. 따라서 파이썬 배열에서 경계 체크를 할 때는 반드시 일일히 if문으로 검사해야 한다.</p>\n</li>\n</ol>\n</li>\n</ul>\n<p>여전히 실패하길래 대체 뭐가 문제지 하다가, 매 반복마다 녹이는 얼음의 개수를 띄워보니 얼음의 개수가 맵의 크기보다 커지고 있었다. 또 큐에 넣을 때 중복 검사를 해야한다는걸 잊은 것이다. 이걸 고치고 나니 훨씬 빨라졌는데 제출해보니 틀렸다고 뜬다. 질문을 찾아보니 53%에서 틀리면 백조 위치를 물로 고려하지 않을 경우 발생한다고 되어있었다. 분명 처음 물 그룹을 지정할 때는 백조의 위치도 물과 동일하게 처리했는데, 두번째 반복문에서 막상 얼음을 돌면서 주변 물을 찾을 때는 <code class=\"language-text\">&#39;.&#39;</code>으로 찾다 보니 백조는 무시된 것이었다. 이 부분을 고치자 드디어 통과했다.</p>\n<p>다른 모범 답을 보니 훨씬 간단하게 백조의 큐, 물의 큐로 두 종류의 큐를 써서 (실제 큐는 각 큐마다 next큐가 필요해서 4개) 구현되어 있었다.</p>\n<h3 id=\"boj-5213---과외맨\"><a href=\"#boj-5213---%EA%B3%BC%EC%99%B8%EB%A7%A8\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>boj 5213 - 과외맨</h3>\n<p>원리는 간단한 bfs인데, 구현이 힘들었다.\n처음 구현할 때는 다음과 같이 구현했다:</p>\n<ol>\n<li>블럭 단위가 아니라 모든 숫자들을 맵으로 구현해서 가로로 2n, 세로로 n정도 되는 맵에 저장함.</li>\n<li>초기화 하면서 각 칸에는 그 칸의 숫자, 그 칸에 해당하는 블럭의 번호를 저장함</li>\n<li>탐색을 하면서 홀수면 왼쪽, 왼쪽 위, 왼쪽 아래, 오른쪽 칸을 체크, 짝수면 비슷하게 반대쪽으로 체크 하여 숫자가 같으면 큐에 집어넣음</li>\n<li>그런데 이렇게 했더니 같은 블럭에 해당하는 숫자를 알 수가 없었다. 그래서 만약 같은 블록이었다면 큐의 앞에 집어넣는게 아니라, 맨끝에 집어넣어서 바로 다음에 나올 수 있도록 집어넣음. (deque이기 때문에 가능)</li>\n</ol>\n<p>이렇게 풀었는데, 틀려버렸다. 출처 테스트 케이스 중 4번을 집어넣으니 정답 코드는 169가 나오는데 내 코드는 185정도가 나왔다. 대체 왜일까. 분명 큐의 맨 끝에 집어넣었기 때문에 바로 다음에 나머지를 찾게 되니 문제는 없을거 같은데 라고 생각했지만 계속 틀렸기에 어쩔 수 없이 블럭 단위로 재구현하니 맞았다.</p>\n<p>아무래도 큐의 맨 끝에 넣더라도, 한 칸에서 4방향 검사할 때 그런 현상이 중첩되면서 답이 틀어지는 경우가 생기는 모양이다.</p>\n<p>코드를 버리기 아까워서 또는 정말 이것때문인지 확인하고 싶어서 방향벡터 for문 안에서 num이 같은 경우 다시 그 안에서 방향을 돌려서 해볼까 싶기도 했는데 포기하고 재구현했다.</p>\n<ul>\n<li>배운 점: bfs에서 한 번에 탐색해야 하는 단계는 큐에 반드시 함께 넣어주어야 하며, 큐의 맨 끝에 넣는다고 해도 탐색 순서가 어긋날 수 있다.</li>\n</ul>\n<h2 id=\"tags\"><a href=\"#tags\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tags</h2>\n<p>  #sport, #algorithm, #boj</p>","id":"34b5b3f4-10bb-599b-9460-24ed003e1efe","fields":{"slug":"boj-스터디-2-주차-나머지-codeforces-복기"},"frontmatter":{"date":"2019-08-20","title":"boj 스터디 2주차 나머지, codeforces 복기","category":"sport","tags":["dev/sport","errorTag: algorithm","errorTag: boj"],"banner":"/assets/bg/1.jpg"},"timeToRead":4},{"excerpt":"1. N과 M (9)https://www.acmicpc.net/problem/15663중복 없게 해야 하는데 set를 써서 했더니 이상하게 순서가 반대로 되길래 결과 배열에 수열들을 넣어서 마지막에 결과 배열을 파이썬 리스트의 reverse함수를 이용해 순서를 뒤집어 출력하려 했더니 이상하게 내부 배열들이 비어버렸다. 그래서 파이썬 reverse…","html":"<h3 id=\"1-n과-m-9\"><a href=\"#1-n%EA%B3%BC-m-9\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. N과 M (9)</h3>\n<p><a href=\"https://www.acmicpc.net/problem/15663\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.acmicpc.net/problem/15663</a></p>\n<p>중복 없게 해야 하는데 set를 써서 했더니 이상하게 순서가 반대로 되길래 결과 배열에 수열들을 넣어서 마지막에 결과 배열을 파이썬 리스트의 reverse함수를 이용해 순서를 뒤집어 출력하려 했더니 이상하게 내부 배열들이 비어버렸다. 그래서 파이썬 reverse는 중첩 배열에 쓸 수 없는건가? 했더니 문제는 다른 곳에 있었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">ans = [[8,8],[7,2],[4,6],[3,6]]\nans.reverse()\nprint(ans)\n#x &gt;&gt;&gt; [[3, 6], [4, 6], [7, 2], [8, 8]]</code></pre></div>\n<p>직접 따로 해보니 중첩 배열에서도 reverse 함수가 잘 작동하는 것을 확인할 수 있었다. 그래서 다시 찾아보니 다음 코드가 문제였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">  if(str(chosen) not in coll):\n    coll.add(str(chosen))\n    #x print(*chosen)\n    it(chosen, ans)\n    ans.append(chosen)\n    print(ans)\n  return</code></pre></div>\n<p><code class=\"language-text\">chosen</code>이라는 수열의 수를 담은 리스트들을 조건이 맞을 때 <code class=\"language-text\">ans</code>배열에 담으려 했는데, 위와 같이 하면 <code class=\"language-text\">chosen</code>의 수들을 복사하여 담는 것이 아니라, <code class=\"language-text\">chosen</code>이라는 배열의 참조를 담게 되어버리는 것이었다. c++에서 벡터를 매개변수로 넘길 때 참조자를 쓰지 않으면 복사를 하게 되어 성능이 떨어진다는 말이 있는 것 처럼 파이썬에서도 기본 자료형 제외하면 이렇게 참조가 넘어가는 것이다.</p>\n<p>이 부분을 고쳐서 뒤집어서 출력해도 순서가 이상하게 출력되었는데, 알고보니 처음 입력받은 수들의 배열 <code class=\"language-text\">arr</code>을 정렬해야 하는 것이었다.</p>\n<p>중복 외에는 딱히 앞의 것과 다른것은 없으므로 이후의 N과 M들은 생략.</p>\n<h3 id=\"bj-2290---lcd-test\"><a href=\"#bj-2290---lcd-test\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>bj 2290 - LCD Test</h3>\n<p><a href=\"https://www.acmicpc.net/problem/2290\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.acmicpc.net/problem/2290</a></p>\n<p>파이썬에서는 문자열을 <code class=\"language-text\">split</code>함수로 바로 문자열의 문자들을 담은 리스트로 바꿀 수가 없고, <code class=\"language-text\">map</code>또는 <code class=\"language-text\">list</code>함수를 이용해야 한다. <code class=\"language-text\">split(&#39;&#39;)</code>을 쓰면 에러가 나고, <code class=\"language-text\">split()</code>을 쓰면 문자별 분리가 되지 않는다. 아래와 같이 써야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">a = &#39;1234567890&#39;\nb = list(a)\nb\n#x &gt;&gt;&gt; [&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,...,&#39;0&#39;]</code></pre></div>\n<h3 id=\"bj-2234---성곽\"><a href=\"#bj-2234---%EC%84%B1%EA%B3%BD\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>bj 2234 - 성곽</h3>\n<p><a href=\"https://www.acmicpc.net/problem/2234\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.acmicpc.net/problem/2234</a></p>\n<p>어떻게 할지는 대충 알겠는데 구현이 좀 어려웠다. 구현력이 부족함.\n전체 칸들에 대한 반복을 돌면서 각 칸이 visit되어있지 않다면 그 칸을 root로 등록하고, 그 칸부터 dfs로 인접 칸들을 다 찾으면서 dict로 모든 인접 칸들이 그 칸을 가리키게 하여 방을 만듬.</p>\n<p>조금 귀찮았던 건, </p>\n<ol>\n<li>마지막을 풀기 위해 특정 칸에 해당하는 방의 사이즈를 얻거나 해야 할 때 <code class=\"language-text\">roomof</code>나 <code class=\"language-text\">sizeofroom</code>을 접근하려면 항상 인덱스 범위를 체크해야 하므로 그걸 다 함수화해야 했던것</li>\n<li>모든 벽을 검사하면서 체크할 때 두 칸이 같은 방에 속한지 검사해야하는 것.</li>\n</ol>\n<h3 id=\"codeforces-educational-round-참가\"><a href=\"#codeforces-educational-round-%EC%B0%B8%EA%B0%80\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>codeforces educational round 참가</h3>\n<p>B번 풀이중 파이썬 배열 이상한 특징 발견..</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">costs = create2dArray(10,10, 999)\nvisited = [0]*11\ndef solve():\n    def calcDiff(a,b):\n        return b-a if b&gt;=a else b+10-a\n    def calcCost(diff,i,j):\n        \n        # it(&#39;diff&#39;,diff)\n        return costs[i][j][diff]\n    def fillCost(i,j, ic, jc, origin, num):\n        if(visited[num][ic][jc]): return\n        visited[num][ic][jc]=True\n        if(origin==num and (ic &gt; 0 or jc &gt; 0)):\n            return\n        if(ic &gt; 10 or jc &gt; 10): return\n        if(i &gt; j):\n            it(&#39;i,j , costs[i][j]&#39;,i,j, costs[i][j])\n            \n            costs[i][j][num] = costs[j][i][num]\n            return\n        \n        co = ic+jc\n        costs[i][j][num]=min(costs[i][j][num], co)\n        costs[j][i][num]=min(costs[j][i][num], co)\n        \n        fillCost(i,j,ic+1,jc,origin, num+i if num+i&lt;10 else num+i-10)\n        fillCost(i,j,ic,jc+1,origin, num+j if num+j&lt;10 else num+j-10)\n        pass\n    s = rs()\n    arrs = list(map(int, list(s)))\n    ans = create2dArray(10,10,-1)\n    \n    for i in range(10):\n        for j in range(10):\n            # it(&#39;i,j&#39;, i, j)\n            if(i&gt;j):\n                ans[i][j]=ans[j][i]\n                continue\n            for i in range(11):\n                visited[i] = create2dArray(11,11,False)\n            it(&#39;costs&#39;, costs)\n            costs[i][j] = [999]*10\n            costs[j][i] = [999]*10\n            \n            fillCost(i,j,0,0,0,0)\n            # it(&#39;s&#39;,s)\n            sums = 0\n            for c in range(len(s)-1):\n                # it(&#39;sums&#39;,sums)\n                # it(&#39;len s&#39;, len(s), s)\n                sums+=calcCost(calcDiff(arrs[c],arrs[c+1]),i,j)\n            ans[i][j] = sums-len(s)+1 if sums&lt;999 else -1\n            pass</code></pre></div>\n<p>위 코드에서 visited관련 코드를 잘 지우면 잘 돌아가는데, visited 관련 코드를 추가하고 나니 costs가 정의했던 대로 안 동작하고 차원이 낮아져버렸다. 원인이 뭘까? 분명 1차원 배열 선언만 쓰면 참조 문제가 발생하지 않는 것 아니었나? 아니면 return해버려서 문제가 되었나? 하지만 매우 세부적인 조건을 만족할 때만 return하게 했는데.</p>\n<h2 id=\"tags\"><a href=\"#tags\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tags</h2>\n<p>  #sport, #algorithm, #boj</p>","id":"0fd58479-5617-5b17-9d57-f529322e084d","fields":{"slug":"boj-스터디-2-주차-1"},"frontmatter":{"date":"2019-08-08","title":"boj 스터디 2주차 1","category":"sport","tags":["dev/sport","errorTag: algorithm"],"banner":"/assets/bg/2.jpg"},"timeToRead":3},{"excerpt":"알고리즘 공부algospot와일드카드 - WILDCARDtagsalgospot와일드카드 - WILDCARDhttps://algospot.com/judge/problem/read/WILDCARD처음에는 시그니쳐를  이렇게 했다가 성가셔서 w,t 문자열 매개변수를 밖으로 뺐다. 의 매치 조건을 어떻게 해야 하는지 좀 헷갈려서 한 번 오답이 났다. 두가지 경우라고 생각했는데 0문자 이상이므로 다음과 같이 3가지 or 조건이다.…","html":"<p>알고리즘 공부</p>\n<hr>\n<ol>\n<li>\n<p><a href=\"#algospot\">algospot</a></p>\n<ol>\n<li><a href=\"#%EC%99%80%EC%9D%BC%EB%93%9C%EC%B9%B4%EB%93%9C---wildcard\">와일드카드 - WILDCARD</a></li>\n</ol>\n</li>\n<li><a href=\"#tags\">tags</a></li>\n</ol>\n<h2 id=\"algospot\"><a href=\"#algospot\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>algospot</h2>\n<h3 id=\"와일드카드---wildcard\"><a href=\"#%EC%99%80%EC%9D%BC%EB%93%9C%EC%B9%B4%EB%93%9C---wildcard\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>와일드카드 - WILDCARD</h3>\n<p><a href=\"https://algospot.com/judge/problem/read/WILDCARD\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://algospot.com/judge/problem/read/WILDCARD</a></p>\n<p>처음에는 시그니쳐를 <code class=\"language-text\">match(w,t,ia,ib)</code> 이렇게 했다가 성가셔서 w,t 문자열 매개변수를 밖으로 뺐다. <code class=\"language-text\">*</code>의 매치 조건을 어떻게 해야 하는지 좀 헷갈려서 한 번 오답이 났다. 두가지 경우라고 생각했는데 0문자 이상이므로 다음과 같이 3가지 or 조건이다. 0문자 매치하고 나가는 경우를 생각 안 해버렸다. 그리고 중간에 메모이제이션을 했더니 다 true가 되버리는 문제가 있었는데, 캐시 초기화를 안해서였다.\n매 번 캐시 접근할 때 인덱싱으로 하기 귀찮은데, cpp의 참조자 같은 건 없을까?\n함수로 만들면 좀더 편할지도?</p>\n<ul>\n<li>1문자 매치하고 나가기 (ia+1,ib+1)</li>\n<li>1문자 매치하고 ia는 홀딩 (ia, ib+1)</li>\n<li>0문자 매치하고 나가기 (ia+1, ib)</li>\n</ul>\n<h2 id=\"tags\"><a href=\"#tags\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tags</h2>\n<p>  #algorithm, #algospot, #python</p>","id":"8ca8f177-0e4c-5f9b-8cbb-de1228bd35cc","fields":{"slug":"sport"},"frontmatter":{"date":"2019-04-21","title":"sport","category":"sport","tags":["dev/sport"],"banner":"/assets/bg/4.jpg"},"timeToRead":1},{"excerpt":"…","html":"<p>아직도 문제를 접근하려 하면 막막하다. 다시 앞부분을 참조해서 체계적인 문제 해결을 할 수 있도록 해보자.</p>\n<blockquote>\n<p>문제해결능력을 기르는 방법\n내가 뭘 못하고 있는지 단계별로 풀이과정을 나누어 파악하고, 어느 부분을 개선할지 생각해야 한다.\n문제 해결 과정 :</p>\n<ol>\n<li>문제 읽고 이해하기</li>\n<li>재정의와 추상화 : 자신의 언어로 추상화 및 문제의 추상화.</li>\n<li>계획 세우기</li>\n<li>계획 검증하기</li>\n<li>계획 수행하기</li>\n<li>회고하기</li>\n<li>문제를 풀지 못할 때 : 풀지 못한 이유에 대해 생각. 내 접근방법의 문제점 등</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>알고리즘 문제해결전략의 체계적인 문제해결을 위한 질문들:</p>\n<ol>\n<li>비슷한 문제를 풀어본 적이 있던가?</li>\n<li>단순한 방법에서 시작할 수 없을까?</li>\n<li>문제 풀이 과정을 수식화할 수 없을까?</li>\n<li>문제를 단순하게 변형할 수 없을까?</li>\n<li>그림으로 표현할 수 있을까?</li>\n<li>수식으로 표현할 수 있을까?</li>\n<li>문제를 분해할 수 있을까?</li>\n<li>문제를 뒤에서부터 푸는게 나을까?</li>\n<li>순서를 강제할 수 있을까?</li>\n<li>특정 형태의 답만을 고려할 수 있을까?</li>\n</ol>\n</blockquote>\n<h2 id=\"tags\"><a href=\"#tags\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tags</h2>\n<ul>\n<li>#sport, #python</li>\n</ul>","id":"4fe74df8-c788-512b-8225-0ed5f91ff07c","fields":{"slug":"알고리즘-문제풀이-2019-04-18"},"frontmatter":{"date":"2019-04-18","title":"알고리즘 문제풀이 2019-04-18","category":"sport","tags":["dev/sport"],"banner":"/assets/bg/1.jpg"},"timeToRead":1}],"categoryName":"sport"}}