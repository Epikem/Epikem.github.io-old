{"pageContext":{"posts":[{"excerpt":"…","html":"<h3 id=\"개구리\"><a href=\"#%EA%B0%9C%EA%B5%AC%EB%A6%AC\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개구리</h3>\n<p>방향이 수직, 위치가 격자로 고정된 두 선분간 거리를 효율적으로 구할 수 있어야 풀 수 있다.</p>\n<p>그걸 차마 구현할 수 있을거라고 생각을 못해서 모든 선들의 몸통을 포함해서 점으로 만든 다음, 모든 점 집합간 다익스트라를 돌리면 되지 않을까 생각했으나 시간복잡도가 될 수가 없었다. (실패)</p>\n<h3 id=\"트럭\"><a href=\"#%ED%8A%B8%EB%9F%AD\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>트럭</h3>\n<p>처음엔 그리디로 한 번에 들어갈 수 있는 하중 기준으로 그룹화해서 그룹 길이만 따져서 더하면 되지 않을까 했는데, 앞차가 나갔을 때 뒷차가 들어올 수도 있다는 점을 고려하지 못했다. </p>\n<p>한 번에 단위시간만 이동가능하고, 앞 차가 다 나갔을 때 뒷차가 들어올 수 있는지 등등도 계산해야 해서 까다로운데 숫자가 작아서 그냥 시뮬레이션을 돌렸다.</p>\n<details><summary>cpp solution</summary>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MaxN<span class=\"token operator\">=</span><span class=\"token number\">1010</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span>MaxN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> bridge<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// https://www.acmicpc.net/problem/13327</span>\n    <span class=\"token comment\">// https://www.acmicpc.net/problem/13335</span>\n    <span class=\"token comment\">// https://www.acmicpc.net/problem/13332</span>\n\n    <span class=\"token comment\">// 길이 W, 최대 하중 L, ai 트럭무게, 한번에 단위시간만 이동가능. </span>\n    <span class=\"token keyword\">int</span> N<span class=\"token punctuation\">,</span>W<span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">;</span>\n    cin<span class=\"token operator\">>></span>N<span class=\"token operator\">>></span>W<span class=\"token operator\">>></span>L<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> n<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        cin<span class=\"token operator\">>></span>arr<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 순서를 바꿀 수 없으므로, 그리디로 해도 될거 같다.</span>\n        <span class=\"token comment\">// 그러나 문제는 단위시간만 이동 가능하다는것.</span>\n        <span class=\"token comment\">// 그 부분은 그냥 해당 길이 k 그룹이 다 건너는데 걸리는 시간을 f(k,w)로 계산하면 된다.</span>\n        <span class=\"token comment\">// 길이 1이면 w+1, 2면 w+2, ... k면 w+k일듯.</span>\n        <span class=\"token comment\">// 아니다. 앞 트럭들중 몇이 다 건넜을 때, 하중이 괜찮다면 뒤의 트럭이 바로 들어와야 한다.</span>\n        <span class=\"token comment\">// </span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 그럼 그냥 시간이 널널하니 다 돌려도 괜찮을 수 있다.</span>\n\n    <span class=\"token keyword\">int</span> t<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> cur<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> curLoad<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">&lt;</span><span class=\"token number\">150000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        t<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        curLoad<span class=\"token operator\">-</span><span class=\"token operator\">=</span>bridge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        bridge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curLoad<span class=\"token operator\">+</span>arr<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            bridge<span class=\"token punctuation\">[</span>W<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            curLoad<span class=\"token operator\">+</span><span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            cur<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> bridge<span class=\"token punctuation\">[</span>W<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">bool</span> left<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>bridge<span class=\"token punctuation\">[</span>W<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ww <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> ww <span class=\"token operator\">&lt;</span> W<span class=\"token punctuation\">;</span> ww<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// cout &lt;&lt; bridge[ww] &lt;&lt; ' ';</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bridge<span class=\"token punctuation\">[</span>ww<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                left<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            bridge<span class=\"token punctuation\">[</span>ww<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>bridge<span class=\"token punctuation\">[</span>ww<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// cout &lt;&lt; endl;</span>\n        <span class=\"token comment\">// cout &lt;&lt; t &lt;&lt; ' ' &lt;&lt; curLoad &lt;&lt; ' ' &lt;&lt; left &lt;&lt; ' ' &lt;&lt; cur &lt;&lt; ' ' &lt;&lt; n &lt;&lt; endl;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>left <span class=\"token operator\">&amp;&amp;</span> cur<span class=\"token operator\">>=</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> t <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</details>\n<h2 id=\"tags\"><a href=\"#tags\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tags</h2>\n<p>  #sport, #blog</p>","id":"e422472f-3a7d-526a-859a-d697653b72a6","fields":{"slug":"acm-icpc-문제-대전-international-regional-2016"},"frontmatter":{"date":"2019-10-01","title":"acm icpc 문제 대전 international regional 2016","category":"sport","tags":["dev/sport","blog"],"banner":"/assets/bg/2.jpg"},"timeToRead":2},{"excerpt":"C. Substring Game in the Lesson…","html":"<h3 id=\"c-substring-game-in-the-lesson\"><a href=\"#c-substring-game-in-the-lesson\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>C. Substring Game in the Lesson</h3>\n<p>(이전 대회 문제.)\n사전순을 잘 이해하지 못해서 못풀었던거 같다. 감으로 님게임이 아닐거라고 예상은 했는데 졸려서 자버렸다.\n그러므로 사전순의 정의를 정리해보자:</p>\n<ol>\n<li>\n<p>길이가 다를 경우, 길이가 짧은 것이 앞? 아닌거 같다. 그냥 있는 글자들을 비교해서 달라지는 부분이 나온다면 달라지는 부분을 비교하여 앞인 것이 앞.</p>\n</li>\n<li>\n<p>길이가 다른데 글자는 다 같은 경우, 길이가 짧은 것이 앞.</p>\n</li>\n<li>\n<p>길이가 같을 경우, 가장 먼저 달라지는 부분이 앞인 것이 앞.</p>\n</li>\n<li>\n<p>숫자가 문자보다 우선</p>\n</li>\n<li>\n<p>공백이 문자보다 우선</p>\n</li>\n</ol>\n<h3 id=\"a-2048-game\"><a href=\"#a-2048-game\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A. 2048 Game</h3>\n<p>벡터 값 가져올때 확인을 안해서 런타임 에러가 났다. 오류가 날 수 있는 부분들은 반드시 확인부터 해야한다.</p>\n<details><summary>cpp solution(fail)</summary>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> T<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> T<span class=\"token punctuation\">;</span>\n    vll vec<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> t <span class=\"token operator\">&lt;</span> T<span class=\"token punctuation\">;</span> t<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n        cin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span>\n        ll tmp<span class=\"token punctuation\">;</span>\n        vec<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            cin<span class=\"token operator\">>></span>tmp<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tmp<span class=\"token operator\">&lt;=</span><span class=\"token number\">2048</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                vec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ll<span class=\"token punctuation\">)</span><span class=\"token function\">log2</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token keyword\">int</span> curN<span class=\"token operator\">=</span><span class=\"token number\">11</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> curLeft<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//// 아래 부분 주석을 해제하면 성공.</span>\n            <span class=\"token comment\">// if(vec.size()==0){</span>\n            <span class=\"token comment\">//     cout &lt;&lt; \"NO\" &lt;&lt; endl;</span>\n            <span class=\"token comment\">//     break;</span>\n            <span class=\"token comment\">// }</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>curN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curLeft<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"YES\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// cout &lt;&lt; curN &lt;&lt; \" \" &lt;&lt; endl;</span>\n                    curLeft<span class=\"token operator\">-</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"NO\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    vec<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                curN<span class=\"token operator\">-</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                curLeft<span class=\"token operator\">*</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curN<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"NO\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span></code></pre></div>\n</details>\n<h3 id=\"b-knights\"><a href=\"#b-knights\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>B. Knights</h3>\n<p>비교적 무난하게 풀었다. 하나를 정하고 재귀적으로 번갈아 지정하게 했더니 신기하게도 모든 칸이 번갈아 BWBW로 나왔다.</p>\n<h3 id=\"c-perfect-team\"><a href=\"#c-perfect-team\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>C. Perfect Team</h3>\n<p>자원 분배 문제. a,b,c자원에서, abc 하나씩 써서 팀으로 해야하는데, a와 b는 c로서 사용가능. 역으론 불가.</p>\n<p>a와 b를 서로 바꿀수는 없으니 비교해서 남는 부분을 c로 쓰는건 쉽다. 문제는 맞춘 a,b값을 s라 했을때 s &#x3C; c이면 a와b들을 c로서 써야할 수 있는데, 그걸 맞추는게 조금 까다롭다는 점. 수식전개를 하면 좀 간단한데, 또 주의할 점은, 제한이 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup></mrow><annotation encoding=\"application/x-tex\">10^8</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">8</span></span></span></span></span></span></span></span></span></span></span>이라서 float을 쓰면 수치오류로 틀리게 된다.</p>\n<h3 id=\"d-fail\"><a href=\"#d-fail\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>D. (fail)</h3>\n<p>와 1위 코드 보니깐 이런 문제를 선형으로 푸는데 신기하다. 이런 식으로 해도 풀리는구나.\n분명 높이를 2초과하여 올릴 이유는 없다는 것을 알았지만 실제 구현을 못했다. 양쪽을 다 참조해야할거같아서 그랬는데, 이런 코드를 보니 항상 앞에만 참조해서 해도 되는거같기도 하다.</p>\n<p><a href=\"https://codeforces.com/contest/1221/standings\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://codeforces.com/contest/1221/standings</a> 에서 코드 참조</p>\n<details><summary>cpp solution by kefaa2</summary>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MaxRaise<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxN<span class=\"token operator\">=</span><span class=\"token number\">300000</span><span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\nll arr<span class=\"token punctuation\">[</span>maxN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> cost<span class=\"token punctuation\">[</span>maxN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> q<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> q<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>q<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            cin <span class=\"token operator\">>></span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>></span> cost<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        vector <span class=\"token operator\">&lt;</span> pair <span class=\"token operator\">&lt;</span> ll<span class=\"token punctuation\">,</span> ll <span class=\"token operator\">></span> <span class=\"token operator\">></span> best<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> raise <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> raise <span class=\"token operator\">&lt;=</span> MaxRaise<span class=\"token punctuation\">;</span> raise<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            best<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>cost<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> raise<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> raise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> best<span class=\"token punctuation\">[</span>raise<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">' '</span> <span class=\"token operator\">&lt;&lt;</span> best<span class=\"token punctuation\">[</span>raise<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            vector <span class=\"token operator\">&lt;</span> pair <span class=\"token operator\">&lt;</span> ll<span class=\"token punctuation\">,</span> ll <span class=\"token operator\">></span> <span class=\"token operator\">></span> nbest<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> raise <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> raise <span class=\"token operator\">&lt;=</span> MaxRaise<span class=\"token punctuation\">;</span> raise<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                ll mn <span class=\"token operator\">=</span> <span class=\"token number\">2e18</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it <span class=\"token operator\">:</span> best<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span>second <span class=\"token operator\">!=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> raise<span class=\"token punctuation\">)</span> mn <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>mn<span class=\"token punctuation\">,</span> it<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                mn <span class=\"token operator\">+</span><span class=\"token operator\">=</span> raise <span class=\"token operator\">*</span> cost<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                nbest<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>mn<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> raise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            best <span class=\"token operator\">=</span> nbest<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        ll mn <span class=\"token operator\">=</span> <span class=\"token number\">2e18</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it <span class=\"token operator\">:</span> best<span class=\"token punctuation\">)</span> mn <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>mn<span class=\"token punctuation\">,</span> it<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> mn <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</details>\n<h2 id=\"tags\"><a href=\"#tags\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tags</h2>\n<p>  #sport, #blog</p>","id":"157a0598-7e5e-5154-ac1f-395e7b2788c1","fields":{"slug":"codeforces-round-586-div-1-div-2"},"frontmatter":{"date":"2019-09-21","title":"codeforces round 586(div1+div2)","category":"sport","tags":["dev/sport","blog"],"banner":"/assets/bg/2.jpg"},"timeToRead":3},{"excerpt":"종만북 8장 - 양자화 Quantization모든 수들이 1000 이하이므로, 양자화는 1000 이하의 수들로만 하면 된다.\n1000 이하의 수에서 S…","html":"<h3 id=\"종만북-8장---양자화-quantization\"><a href=\"#%EC%A2%85%EB%A7%8C%EB%B6%81-8%EC%9E%A5---%EC%96%91%EC%9E%90%ED%99%94-quantization\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>종만북 8장 - 양자화 Quantization</h3>\n<p>모든 수들이 1000 이하이므로, 양자화는 1000 이하의 수들로만 하면 된다.\n1000 이하의 수에서 S개를 고르면 되는 것인데, 여전히 작진 않다.\n이게 동적계획법 파트에 있어서 그렇지, 아니었다면 무조건 탐욕법을 시도하다가 실패하게 되버릴거 같은데.\n어째서 이게 동적계획법일까. 그리고 어떻게 부분 구조를 찾아야 하는가.\n일단 가장 간단하게 생각나는 것은, 인덱스별이 아닌 선택 숫자별로 생각하는 것인데,\n그건 좀 당연한 것 같지만 cpp라면 가능할지도. 다 선택됬다면 계산을 하고, 아니면\n더 높은 다음 수를 선택하는 식으로. 그러면 결국 C(1000,S)번 계산해야한다. 가지치기를 늘릴 수 없을까?\n다 선택 후 계산을 할 게 아니라, 어차피 증가하면서 선택하므로 이번 선택을 했을 때, 이번 선택보다 작은 수들은 전부 이번 선택으로 계산될 것이다. 따라서 반복문에서 다음 수로 그게 가장 낮은걸로 선택하면 될까?\n그렇지는 않다. 그러면 무조건 낮은 수를 선택하게 되버린다.\n궁금한 게, 인덱스 기준이 아닌, 숫자 기준으로는 탐욕법을 써도 되지 않나??\n예를 들어, 1부터 1000까지 증가시키면서, 그 숫자가 추가됬을 때 얼마나 전체 cost가 줄어드는지 계산해서 가장 많이 줄이는 숫자를 추가하는 식으로 한다면?\n문제는 이후로 계산을 할 때 이전 숫자들로 양자화할지 이번 숫자로 양자화할지 계속 달라진다는 점. 하지만 그 점은 위의 방식에서도 고려되야 하는것은 마찬가지다.\n게다가 시도해보니 위의 탐욕법도 모든 closest를 갱신후 계산한다면 이중 반복문이 된다.</p>\n<details><summary>cpp solution (fail)</summary>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> N<span class=\"token punctuation\">,</span>S<span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> vec<span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> seps<span class=\"token punctuation\">;</span>\nll midpointCache<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nll <span class=\"token function\">getMinCost</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> begin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// cout &lt;&lt; \"calculating \" &lt;&lt; begin &lt;&lt; ' ' &lt;&lt; end &lt;&lt; endl;</span>\n    ll<span class=\"token operator\">&amp;</span> ret<span class=\"token operator\">=</span>midpointCache<span class=\"token punctuation\">[</span>begin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n    ret<span class=\"token operator\">=</span><span class=\"token number\">1012345678</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// for (int i = vec[begin]; i &lt;= vec[end-1]; i++)</span>\n    <span class=\"token comment\">// {</span>\n    <span class=\"token comment\">//     ll cost=0;</span>\n    <span class=\"token comment\">//     for (int j = begin; j &lt; end; j++)</span>\n    <span class=\"token comment\">//     {</span>\n    <span class=\"token comment\">//         cost+=(vec[j]-i)*(vec[j]-i);</span>\n    <span class=\"token comment\">//     }</span>\n    <span class=\"token comment\">//     if(cost&lt;ret){</span>\n    <span class=\"token comment\">//         ret=cost;</span>\n    <span class=\"token comment\">//     }   </span>\n    <span class=\"token comment\">// }</span>\n    ll sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> begin<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        sum<span class=\"token operator\">+</span><span class=\"token operator\">=</span>vec<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// int k=(int)(floorf((float)sum/(float)(end-begin+1)));</span>\n    <span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span>sum<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>end<span class=\"token operator\">-</span>begin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// cout &lt;&lt; k &lt;&lt; endl;</span>\n    ll cost<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> begin<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        cost<span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>k<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    ret<span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span>cost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    \n    cost<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> begin<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        cost<span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>k<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    ret<span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span>cost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nll <span class=\"token function\">getmin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sep<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">==</span>S<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// for (int i = 0; i &lt; seps.size(); i++)</span>\n        <span class=\"token comment\">// {</span>\n        <span class=\"token comment\">//     cout &lt;&lt; seps[i] &lt;&lt; ' ';</span>\n        <span class=\"token comment\">// }</span>\n        \n        <span class=\"token comment\">// cout &lt;&lt; endl;</span>\n        ll ret<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> s <span class=\"token operator\">&lt;</span> S<span class=\"token punctuation\">;</span> s<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// cout &lt;&lt; \"calculating seps:\" &lt;&lt; s &lt;&lt; ' ' &lt;&lt;seps[s] &lt;&lt; ' ' &lt;&lt; seps[s+1] &lt;&lt; endl;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">==</span>S<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                ret<span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token function\">getMinCost</span><span class=\"token punctuation\">(</span>seps<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> ret<span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token function\">getMinCost</span><span class=\"token punctuation\">(</span>seps<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>seps<span class=\"token punctuation\">[</span>s<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    ll ret<span class=\"token operator\">=</span><span class=\"token number\">10123456789ll</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> sep<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        seps<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ret<span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span> <span class=\"token function\">getmin</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> count<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        seps<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> C<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> C<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>c<span class=\"token operator\">&lt;</span>C<span class=\"token punctuation\">;</span>c<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        cin <span class=\"token operator\">>></span> N <span class=\"token operator\">>></span> S<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> tmp<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> <span class=\"token number\">101</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">101</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                midpointCache<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        \n        vec<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        seps<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            cin <span class=\"token operator\">>></span> tmp<span class=\"token punctuation\">;</span>\n            vec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        seps<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getmin</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n</details>\n<p>이렇게 생각하고 풀었는데, 여전히 틀렸다. 아무래도 정렬된 100개의 숫자여도 거기서 막대 10개를 꽂는 경우의 수가 너무 많은건가? 싶었다.</p>\n<p>해설을 보니, 재귀 구조로 앞의 x개만 선택하는 구조를 반복하는 식으로 풀었다. 그것이 내가 구현한 방식과 경우의 수가 크게 차이나나??</p>\n<p>아니면 s 그룹으로 분할한 다음 그 최소제곱을 위한 값을 구하는 과정이 너무 느렸는지도 모르겠다.</p>\n<p>책에서 나온 구조로 바꿨는데도 시간초과가 났다. 그렇다는 건 최소로 만드는 값을 구하는 과정이 메모이제이션이 제대로 안되었거나 너무 느렸다는 뜻이다. 지금 구조는 다음과 같은데 이게 그렇게 느리다면 어떻게 해야 줄일 수 있을까?\nd미분해서 평균\n을 써서 중앙값을 구할 생각까지는 했는데 다음과 같은 것들은 모자랐다. 결국 책 참조함.</p>\n<ul>\n<li>다음과 같이 하면 <code class=\"language-text\">round</code>함수 대신 간단하게 <code class=\"language-text\">int()</code>형 변환만으로 <code class=\"language-text\">round</code>의 효과를 낼 수 있다 : <code class=\"language-text\">val=int(0.5+floatval)</code> </li>\n<li><strong>중요</strong> 인덱스 계산이 조금 복잡하다. <code class=\"language-text\">A[i]</code>, <code class=\"language-text\">A[i]^2</code>들의 합인 <code class=\"language-text\">s1, s2</code>는 0-인덱스 기반인데, 그러면 구간 합을 구하기 위해 부분 합을 이용할 때 주의가 필요하다 :</li>\n</ul>\n<p><code class=\"language-text\">s[x]: sum of a[0]~a[x]</code> 라고 하면, <code class=\"language-text\">sum(a,b): sum of a[a]~a[b]</code>를 구하려면 그냥 <code class=\"language-text\">sum(a,b)=s[b]-s[a-1]</code>로 구현해서는 안 된다. a가 0일 때 문제가 되기 때문이다. 따라서 다음과 같이 구현해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">sumrange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> lo<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> hi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">[</span>hi<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>lo<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">?</span><span class=\"token number\">0</span><span class=\"token operator\">:</span>s<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>또, 만약 구간합 함수를 hi를 포함하지 않는 쪽(hi+1로 호출)으로 구현했다면, 구간합을 반환할 때는 hi+1을 써줘야 할 것이다.</li>\n<li><code class=\"language-text\">quantize</code>또는 나의 경우 <code class=\"language-text\">getmin</code>함수에서 내부 for문에서 인덱싱에 상당히 주의를 해야 한다.</li>\n<li><code class=\"language-text\">quantize</code>함수를 메모이제이션하지 않으면 시간초과가 난다.</li>\n</ul>\n<h3 id=\"종만북-8장---타일링-방법의-수-세기-tiling2\"><a href=\"#%EC%A2%85%EB%A7%8C%EB%B6%81-8%EC%9E%A5---%ED%83%80%EC%9D%BC%EB%A7%81-%EB%B0%A9%EB%B2%95%EC%9D%98-%EC%88%98-%EC%84%B8%EA%B8%B0-tiling2\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>종만북 8장 - 타일링 방법의 수 세기 TILING2</h3>\n<p>쉽게 품. 그래도 잘 이해되지 않는게 어떻게 점화식을 <code class=\"language-text\">s(l)=s(l-1)+s(l-2)</code>로 간단하게 찾을 수 있는지. 다음과 같은 조건을 만족하는 모든 부분집합을 찾아서 더하면 다 찾았다고 할 수 있겠지만, 그걸 찾기가 직관적이지 않을수도 있고 어려울 수도 있을거같은데. 연습이 필요할 거 같다.</p>\n<ul>\n<li>모든 분류를 합했을 때 모든 경우를 포함</li>\n<li>두 가지 이상의 분류에 중복되는 경우가 없음</li>\n</ul>\n<details><summary>cpp solution</summary>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> N<span class=\"token punctuation\">,</span>S<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> cache<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getComb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> ret<span class=\"token operator\">=</span>cache<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    ret<span class=\"token operator\">=</span><span class=\"token function\">getComb</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">getComb</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ret<span class=\"token operator\">=</span>ret<span class=\"token operator\">%</span>MOD<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    MOD<span class=\"token operator\">=</span><span class=\"token number\">1000000007</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> C<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> C<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">101</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        cache<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>c<span class=\"token operator\">&lt;</span>C<span class=\"token punctuation\">;</span>c<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        cin <span class=\"token operator\">>></span> N<span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getComb</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</details>\n<h3 id=\"종만북-8장---두니발-박사의-탈옥-numb3rs\"><a href=\"#%EC%A2%85%EB%A7%8C%EB%B6%81-8%EC%9E%A5---%EB%91%90%EB%8B%88%EB%B0%9C-%EB%B0%95%EC%82%AC%EC%9D%98-%ED%83%88%EC%98%A5-numb3rs\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>종만북 8장 - 두니발 박사의 탈옥 (NUMB3RS)</h3>\n<p>각 이동 확률 배열을 만든 다음, 날을 진행하면서 계산해나가게 했는데, 곱에 의한 수치적 오류의 누적으로 틀리는 것 같다. 생각보다는 쉽게 풀렸다. 당연히 확률 맵을 만들어서 매 날마다 다음 전체 상태를 계산하는게 기본이고 거기에 뭔가 메모이제이션 등을 해야하는것일 줄 알았는데 그냥 그게 전부였고, 곱의 수치오류로 한 번 틀렸는데 실수 변수를 전부 <code class=\"language-text\">double</code>형으로 바꾸니 해결되었다. </p>\n<details><summary>cpp solution</summary>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> N<span class=\"token punctuation\">,</span>D<span class=\"token punctuation\">,</span>P<span class=\"token punctuation\">;</span> <span class=\"token comment\">// N 2~50, D:1~100, P:0~N</span>\n<span class=\"token keyword\">int</span> maps<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> naverCounts<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> movemaps<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> probs<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> tmpProbs<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">calcprobs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> leftDays<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>leftDays<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> targetProb <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> targetProb <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> targetProb<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">double</span> nextProb<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token number\">0.0f</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> navers <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> navers <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> navers<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>maps<span class=\"token punctuation\">[</span>targetProb<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>navers<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                nextProb<span class=\"token operator\">+</span><span class=\"token operator\">=</span>movemaps<span class=\"token punctuation\">[</span>navers<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>targetProb<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>probs<span class=\"token punctuation\">[</span>navers<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        tmpProbs<span class=\"token punctuation\">[</span>targetProb<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>nextProb<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>probs<span class=\"token punctuation\">,</span> tmpProbs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">101</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// for (int i = 0; i &lt; N; i++)</span>\n    <span class=\"token comment\">// {</span>\n    <span class=\"token comment\">//     probs[i]=tmpProbs[i];</span>\n    <span class=\"token comment\">//     // cout &lt;&lt; probs[i] &lt;&lt; ' ';</span>\n    <span class=\"token comment\">// }</span>\n    <span class=\"token comment\">// cout&lt;&lt;endl;</span>\n    \n    <span class=\"token function\">calcprobs</span><span class=\"token punctuation\">(</span>leftDays<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> C<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> C<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>c<span class=\"token operator\">&lt;</span>C<span class=\"token punctuation\">;</span>c<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        cin <span class=\"token operator\">>></span> N <span class=\"token operator\">>></span> D <span class=\"token operator\">>></span> P<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 지난 일 수 d 교도소 마을 번호 p</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> naverCount<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                cin <span class=\"token operator\">>></span> maps<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>maps<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    naverCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            naverCounts<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>naverCount<span class=\"token punctuation\">;</span>\n            probs<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// cout &lt;&lt; \"step 0 \" &lt;&lt; endl;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> here <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> here <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> here<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> there <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> there <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> there<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>here<span class=\"token operator\">==</span>there<span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                movemaps<span class=\"token punctuation\">[</span>here<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>there<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token number\">1.0f</span><span class=\"token operator\">/</span>naverCounts<span class=\"token punctuation\">[</span>here<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// cout &lt;&lt; \"step 1 \" &lt;&lt; endl;</span>\n        \n        \n        probs<span class=\"token punctuation\">[</span>P<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token number\">1.0f</span><span class=\"token punctuation\">;</span>\n        cin <span class=\"token operator\">>></span> T<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// calc all probs</span>\n        <span class=\"token function\">calcprobs</span><span class=\"token punctuation\">(</span>D<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// cout &lt;&lt; \"step 2 \" &lt;&lt; endl;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> t <span class=\"token operator\">&lt;</span> T<span class=\"token punctuation\">;</span> t<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> village<span class=\"token punctuation\">;</span>\n            cin <span class=\"token operator\">>></span> village<span class=\"token punctuation\">;</span>\n            \n            std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>fixed <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>showpoint<span class=\"token punctuation\">;</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setprecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> probs<span class=\"token punctuation\">[</span>village<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n        \n        \n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n</details>\n<h2 id=\"tags\"><a href=\"#tags\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tags</h2>\n<p>  #sport, #blog</p>","id":"c0d68fa0-0a15-5724-9b59-88b2035da05d","fields":{"slug":"종만북-문제-풀이"},"frontmatter":{"date":"2019-09-14","title":"종만북 문제 풀이","category":"sport","tags":["dev/sport","blog"],"banner":"/assets/bg/2.jpg"},"timeToRead":6},{"excerpt":"종만북 8장 동적계획법 - JLIS이게 대체 어떻게 난이도 '하'라는건지 모르겠다.\n점화식 찾기도 어렵고 접근방법을 알지 못하면 어떻게 겹쳐지는 부분을 해결할 것인지 감도 못잡게 되는데..\n책보고 힌트를 알고도 답이 안 나와서 소스를 보고 이해하는것으로 넘어갔다.책에 있는 솔루션 그대로 하면 틀리고 부분을 빼줘야 한다. 왜 빼줘야하는건지는 잘 모르겠다.…","html":"<h3 id=\"종만북-8장-동적계획법---jlis\"><a href=\"#%EC%A2%85%EB%A7%8C%EB%B6%81-8%EC%9E%A5-%EB%8F%99%EC%A0%81%EA%B3%84%ED%9A%8D%EB%B2%95---jlis\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>종만북 8장 동적계획법 - JLIS</h3>\n<p>이게 대체 어떻게 난이도 '하'라는건지 모르겠다.\n점화식 찾기도 어렵고 접근방법을 알지 못하면 어떻게 겹쳐지는 부분을 해결할 것인지 감도 못잡게 되는데..\n책보고 힌트를 알고도 답이 안 나와서 소스를 보고 이해하는것으로 넘어갔다.</p>\n<p>책에 있는 솔루션 그대로 하면 틀리고 <code class=\"language-text\">ret=2;</code>부분을 빼줘야 한다. 왜 빼줘야하는건지는 잘 모르겠다. 2를 넣는게 맞는거 같아 보이는데.</p>\n<details><summary>cpp solution</summary>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> cache<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ll NEGINF<span class=\"token operator\">=</span>numeric_limits<span class=\"token operator\">&lt;</span>ll<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">jlis</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> indexA<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> indexB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> ret<span class=\"token operator\">=</span>cache<span class=\"token punctuation\">[</span>indexA<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>indexB<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n\n    ret<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    ll am<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>indexA<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">?</span> NEGINF<span class=\"token operator\">:</span>a<span class=\"token punctuation\">[</span>indexA<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ll bm<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>indexB<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">?</span> NEGINF<span class=\"token operator\">:</span>b<span class=\"token punctuation\">[</span>indexB<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ll maxElement<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>am<span class=\"token punctuation\">,</span>bm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// cout &lt;&lt; indexA &lt;&lt; ' ' &lt;&lt; indexB &lt;&lt; ' ' &lt;&lt; endl;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nextA<span class=\"token operator\">=</span>indexA<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>nextA<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>nextA<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>maxElement<span class=\"token operator\">&lt;</span>a<span class=\"token punctuation\">[</span>nextA<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            ret<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span> <span class=\"token function\">jlis</span><span class=\"token punctuation\">(</span>nextA<span class=\"token punctuation\">,</span>indexB<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nextB<span class=\"token operator\">=</span>indexB<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>nextB<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>nextB<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>maxElement<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">[</span>nextB<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            ret<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span> <span class=\"token function\">jlis</span><span class=\"token punctuation\">(</span>indexA<span class=\"token punctuation\">,</span>nextB<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</details>\n<p>내가 생각하지 못한 것: 어떻게 서로 겹치지 않도록 해야할지 감을 잡지 못했다.\n솔루션에서는 한 부분 구조에서 그 서로 겹치지 않도록 구조를 잡아주되, 그 외에는 생각보다 그렇게 그부분이 어렵게 처리되거나 그런게 없었다. 그저 두 인덱스에 대해 최대를 잡아 아무 쪽에서나 그보다 큰 수를 택하도록 되어있다. 그런데 이렇게만 하면 마지막 예제에서 10,10을 골라버려서 이후의 1,2를 선택하지 못하게 될 수가 있는데, 솔루션에서는 그걸 -1 입력에 대해서는 모든 시작점을 고를 수 있도록 <code class=\"language-text\">maxElement</code>를 작은 수로 설정하여 해결했다. </p>\n<h3 id=\"종만북-8장---원주율-외우기---pi\"><a href=\"#%EC%A2%85%EB%A7%8C%EB%B6%81-8%EC%9E%A5---%EC%9B%90%EC%A3%BC%EC%9C%A8-%EC%99%B8%EC%9A%B0%EA%B8%B0---pi\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>종만북 8장 - 원주율 외우기 - PI</h3>\n<p>각 선택 구현만 하면 간단한 동적 계획법 문제. 선택 구현에서 좀 실수가 있었다. 점화식을 구하자면 다음과 같이 표현할 수 있을 것이다.</p>\n<p><code class=\"language-text\">cost(start)=for all (cost, blockSize) in costChoice : min(cost(start+blockSize)+cost)</code></p>\n<p>위치에 대해서만 메모이제이션할 게 아니라, 각 숫자패턴에 대해 메모이제이션할 수 있다면 더 효율적일거 같은데 숫자패턴을 어떻게 메모이제이션할지 모르겠어서 그만뒀다.</p>\n<p><code class=\"language-text\">costCache[3][10][10][10][10][10]</code> 이렇게 해야 하나..? 그러면 메모리를 너무 먹는다. 하긴 각 숫자패턴도 이렇게 보면 10만가지 정도 되니 메모이제이션하기엔 좀 클지도 모르겠다.</p>\n<details><summary>cpp solution</summary>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10006</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> cache<span class=\"token punctuation\">[</span><span class=\"token number\">10006</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// int costCache[5][10];</span>\n<span class=\"token keyword\">int</span> len<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">calcBlockCost</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">calcCost</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// cost(pos)=min(cost(...))</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pos<span class=\"token operator\">>=</span>len<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 세자리~다섯자리에다가 패턴도 여러가지이므로 여러가지 선택이 가능한데, 이걸 어떻게 간단하게 구현할까?</span>\n    <span class=\"token comment\">// 모든 선택을 다 구현하려 하면 노가다다.</span>\n    <span class=\"token comment\">// 그러면 어차피 선택한 숫자에 대해 난이도는 최소로 결정할 것이므로, 선택을 세자리~다섯자리로 하고</span>\n    <span class=\"token comment\">// 계산은 다른 함수에서 하면 될 듯?</span>\n\n    <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> ret<span class=\"token operator\">=</span>cache<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n\n    ret<span class=\"token operator\">=</span><span class=\"token number\">1000000000</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        ret<span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span> <span class=\"token function\">calcBlockCost</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">calcCost</span><span class=\"token punctuation\">(</span>pos<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">calcBlockCost</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> block<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> start<span class=\"token operator\">+</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        block<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>start<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> difficulty<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// cout &lt;&lt; difficulty &lt;&lt; ' ' &lt;&lt; \"diff\" &lt;&lt; '\\n';</span>\n    <span class=\"token keyword\">bool</span> isAllSame<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> isMonoChange<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> toggle<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> isToggle<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> diff<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> isSequence<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isToggle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                toggle<span class=\"token punctuation\">[</span>i<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>block<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>toggle<span class=\"token punctuation\">[</span>i<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    isToggle<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            diff<span class=\"token operator\">=</span>block<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>block<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>diff<span class=\"token operator\">!=</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> diff<span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> isMonoChange<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>diff<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> isAllSame<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>diff<span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>block<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                isSequence<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                isMonoChange<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            diff<span class=\"token operator\">=</span>block<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>block<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>diff<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> isAllSame<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isAllSame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        difficulty<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isMonoChange<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        difficulty<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isToggle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        difficulty<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isSequence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        difficulty<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// cout &lt;&lt; start &lt;&lt; ' ' &lt;&lt; length &lt;&lt; ' ' &lt;&lt; difficulty &lt;&lt; \" cost\" &lt;&lt; endl;</span>\n    <span class=\"token keyword\">return</span> difficulty<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> C<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> C<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>c<span class=\"token operator\">&lt;</span>C<span class=\"token punctuation\">;</span>c<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        string s<span class=\"token punctuation\">;</span>\n        cin <span class=\"token operator\">>></span> s<span class=\"token punctuation\">;</span>\n        len<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>p<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            arr<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// cout &lt;&lt; arr[p];</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            cache<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">int</span> ans<span class=\"token operator\">=</span><span class=\"token function\">calcCost</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// cout &lt;&lt; '\\n';</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</details>\n<ul>\n<li>책에서는 점화식을 다음과 같이 깔끔하게 표기하고 있다.\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mi>e</mi><mi>m</mi><mi>o</mi><mi>r</mi><mi>i</mi><mi>z</mi><mi>e</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>m</mi><mi>i</mi><msubsup><mi>n</mi><mrow><mi>L</mi><mo>=</mo><mn>3</mn></mrow><mn>5</mn></msubsup><mo stretchy=\"false\">(</mo><mi>m</mi><mi>e</mi><mi>m</mi><mi>o</mi><mi>r</mi><mi>i</mi><mi>z</mi><mi>e</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>t</mi><mo>+</mo><mi>L</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>f</mi><mi>y</mi><mo stretchy=\"false\">(</mo><msub><mi>N</mi><mrow><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>t</mi><mo separator=\"true\">,</mo><mi>L</mi></mrow></msub><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">memorize(start)=min^5_{L=3}(memorize(start+L)+classify(N_{start,L}))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord mathdefault\">e</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.089439em;vertical-align:-0.275331em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">i</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-2.424669em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">L</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">3</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.275331em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord mathdefault\">e</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">t</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">L</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.328331em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">s</span><span class=\"mord mathdefault mtight\">t</span><span class=\"mord mathdefault mtight\">a</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault mtight\">t</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathdefault mtight\">L</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>풀 때는 단조수열, 두 숫자가 반복하여 바뀌는 것에 대한 단어가 생각이 안나서 <code class=\"language-text\">isMonoChange</code>,<code class=\"language-text\">isToggle</code>같은 이름으로 했는데, 단조수열은 <code class=\"language-text\">progressive</code>, 반복수열은 <code class=\"language-text\">alternating</code>이란 좋은 이름이 있다.</li>\n</ul>\n<h2 id=\"tags\"><a href=\"#tags\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tags</h2>\n<p>  #sport, #blog</p>","id":"380cbaf7-ddf3-5344-9299-1cbffb7acb4b","fields":{"slug":"종만북-문제-풀이"},"frontmatter":{"date":"2019-09-11","title":"종만북 문제 풀이","category":"sport","tags":["dev/sport","blog"],"banner":"/assets/bg/4.jpg"},"timeToRead":4},{"excerpt":"백준 3019 - 테트리스https://www.acmicpc.net/problem/3019일단 방법의 수를 구해야 하므로,\n방법의 수는 현재 블록을 놓을 수 있는 형태의 칸수 패턴들 마다 1씩 증가한다.\n그런데, 가장 큰 문제는 블록 및 블록 회전을 구현하는 것.\n회전까지 구현하려면 일일히 하면 너무 노가다일거 같은데.\n그냥…","html":"<h3 id=\"백준-3019---테트리스\"><a href=\"#%EB%B0%B1%EC%A4%80-3019---%ED%85%8C%ED%8A%B8%EB%A6%AC%EC%8A%A4\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>백준 3019 - 테트리스</h3>\n<p><a href=\"https://www.acmicpc.net/problem/3019\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.acmicpc.net/problem/3019</a></p>\n<p>일단 방법의 수를 구해야 하므로,\n방법의 수는 현재 블록을 놓을 수 있는 형태의 칸수 패턴들 마다 1씩 증가한다.\n그런데, 가장 큰 문제는 블록 및 블록 회전을 구현하는 것.\n회전까지 구현하려면 일일히 하면 너무 노가다일거 같은데.\n그냥 4개 블록을 끊어지지만 않게 구현한 모든 가지수가 필요한 것 아닌가?\n그걸 어떻게 할지가 문제다.\n사실 형태상 가로로 밀 수 있다면 모든 가로 패턴이, 세로로 밀 수 있다면 모든 세로 패턴을 구할 수 있는데,\n어떤 블록은 180도 회전하면 같은 모양이 되고, 어떤 블록들은 아니다.\n그렇게 모든 회전까지 포함한 가지수들을 구현해서,\n그리고 바닥에 놓을 수 있는지는 그 가지수들의 패턴을 역이용해서\n가장 아래에 있는 블록 기준 다른 아래에 돌출된 블록들의 상대적 위치를 기록하면\n될 거 같은데.. 구현이 어려울 거 같다.\n아무래도 지금은 블록들을 생성을 어떻게 해야 할 지 감이 안 오는데,\n각 블록의 번호의 회전 상태에 따라 아래의 패턴만 저장해서 비교해도 되지 않을까?</p>\n<p>마지막으로 생각한 방식이 정확히 맞아서 바로 성공했다. 각 바닥의 패턴, 각 블록의 상대적 바닥 패턴을 기록해서 원소별로 더한 후, 더한 결과가 수평이 맞는지 확인했다.</p>\n<details><summary>python solution</summary>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">def solve():\n    bottomPatterns={}\n    bottomPatterns[1]=[[0],[0,0,0,0]]\n    bottomPatterns[2]=[[0,0]]\n    bottomPatterns[3]=[[0,0,-1],[-1,0]]\n    bottomPatterns[4]=[[-1,0,0],[0,-1]]\n    bottomPatterns[5]=[[0,0,0],[0,-1],[-1,0,-1],[-1,0]]\n    bottomPatterns[6]=[[0,0,0],[0,0],[0,-1,-1],[-2,0]]\n    bottomPatterns[7]=[[0,0,0],[0,-2],[-1,-1,0],[0,0]]\n    \n    patterns={1:[],2:[],3:[],4:[]}\n\n    c,p=ria()\n    maps=ria()\n    for i in range(c):\n        if(i+4&lt;=c):\n            patterns[4].append(maps[i:i+4])\n        if(i+3&lt;=c):\n            patterns[3].append(maps[i:i+3])\n        if(i+2&lt;=c):\n            patterns[2].append(maps[i:i+2])\n        if(i+1&lt;=c):\n            patterns[1].append(maps[i:i+1])\n    # it(patterns)\n\n    ans = 0\n    for patArr in bottomPatterns[p]:\n        pattern=patterns[len(patArr)]\n        for pat in pattern:\n            copyPat=pat[:]\n            # if(len(patArr) != len(copyPat)):\n            #     it(&#39;ERROR&#39;)\n            base=copyPat[0]+patArr[0]\n            success=True\n            # it(&#39;patArr: &#39;, patArr, &#39; pattern: &#39;, pat)\n            for i in range(len(copyPat)):\n                copyPat[i]+=patArr[i]\n                if(base != copyPat[i]):\n                    # it(&#39;Fail for this.&#39;)\n                    success=False\n                    break\n            if(success):\n                ans+=1\n    print(ans)\n    pass</code></pre></div>\n</details>\n<h3 id=\"백준-2210---테트리스\"><a href=\"#%EB%B0%B1%EC%A4%80-2210---%ED%85%8C%ED%8A%B8%EB%A6%AC%EC%8A%A4\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>백준 2210 - 테트리스</h3>\n<p><a href=\"https://www.acmicpc.net/problem/2210\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.acmicpc.net/problem/2210</a></p>\n<p>5x5 크기 정도이므로, 주어진 대로 구현해도 될 거 같다.\n임의의 위치에서 랜덤하게 움직이는 모든 경우의 수가 몇 가지 정도일까?\n생각보다 상당히 많을거 같기도 한데, 길이도 6 제한이므로 괜찮지 않을까.</p>\n<p>라고 생각했고 pypy3로 280ms로 맞았다. 혹시 python3로 하면 시간초과될까? 하고 내봤더니 놀랍게도 152ms로 맞았다. 어째서 python3가 더 빠른거지??</p>\n<details><summary>python solution</summary>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">def solve():\n    patset=set()\n    dy=[0,0,+1,-1]\n    dx=[+1,-1,0,0]\n    maps=create2DArray(5,5,-1)\n    for r in range(5):\n        maps[r]=ria()\n    def move(y,x,pat=[]):\n        if(len(pat)==6):\n            tup = tuple(pat)\n            if(tup in patset):\n                return\n            patset.add(tup)\n            return\n        for i in range(4):\n            ny,nx=y+dy[i],x+dx[i]\n            # it(&#39;try &#39; ,ny, &#39; &#39; ,nx, &#39; &#39; , len(pat))\n            if(ny&lt;0 or ny&gt;=5 or nx&lt;0 or nx&gt;=5):\n                continue\n            tmppat=pat[:]\n            tmppat.append(maps[ny][nx])\n            move(ny,nx,tmppat)\n        pass\n\n    for r in range(5):\n        for c in range(5):\n            move(r,c)\n    \n    # it(patset)\n    print(len(patset))\n    pass</code></pre></div>\n</details>\n<h3 id=\"백준-2805---나무-자르기\"><a href=\"#%EB%B0%B1%EC%A4%80-2805---%EB%82%98%EB%AC%B4-%EC%9E%90%EB%A5%B4%EA%B8%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>백준 2805 - 나무 자르기</h3>\n<p><a href=\"https://www.acmicpc.net/problem/2805\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.acmicpc.net/problem/2805</a></p>\n<p>이런 경우 보통 매 반복마다 전체를 돌면 시간초과되고,\n정보를 간단하게 압축해야 한다.\n나무가 무려 백만개까지 되므로,\n근데 높이가 인덱싱 가능한 수치가 아니다. 흠 어떻게 해야 하지??\n일단 백만개나 되므로 정렬만 해도 거의 시간초과 아닌가??\n이진 탐색을 해도 될까 이문제에서?</p>\n<details><summary>python solution</summary>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">def solve():\n    n,m=ria()\n    maps=ria()\n    lo=0\n    hi=1000000000\n    def calcsum(mm):\n        sums=0\n        for i in range(n):\n            sums+=max(maps[i]-mm,0)\n        return sums\n    while(lo+1&lt;hi):\n        # if(hi-lo&lt;0.000001):\n        #     break\n        mid=(lo+hi)//2\n        cent=calcsum(mid)\n        # it(&#39;lo &#39;,lo, &#39; hi &#39;, hi, &#39; cent &#39;, cent)\n        if(cent&lt;m):\n            hi=mid\n            continue\n        else:\n            lo=mid\n            continue\n\n    # it(lo,hi)\n    print(round(lo))\n    pass</code></pre></div>\n</details>\n<h3 id=\"종만북-8장---trianglepath\"><a href=\"#%EC%A2%85%EB%A7%8C%EB%B6%81-8%EC%9E%A5---trianglepath\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>종만북 8장 - TRIANGLEPATH</h3>\n<p>동적 계획법 없이 반대로 풀기로도 풀린다.</p>\n<details><summary>cpp solution</summary>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> maps<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> C<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> C<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>c<span class=\"token operator\">&lt;</span>C<span class=\"token punctuation\">;</span>c<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n        cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> r<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>r<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>r<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>c<span class=\"token operator\">&lt;=</span>r<span class=\"token punctuation\">;</span>c<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                cin <span class=\"token operator\">>></span> maps<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> r<span class=\"token operator\">=</span>n<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>r<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>r<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>c<span class=\"token operator\">&lt;=</span>r<span class=\"token punctuation\">;</span>c<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                maps<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maps<span class=\"token punctuation\">[</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> maps<span class=\"token punctuation\">[</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> maps<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// for(int r=0;r&lt;n;r++){</span>\n        <span class=\"token comment\">//     for(int c=0;c&lt;=r;c++){</span>\n        <span class=\"token comment\">//         cout &lt;&lt; maps[r][c] &lt;&lt; ' ';</span>\n        <span class=\"token comment\">//     }</span>\n        <span class=\"token comment\">//     cout &lt;&lt; '\\n';</span>\n        <span class=\"token comment\">// }</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> maps<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n</details>\n<p>여전히 vscode markdown에 cpp/c 문법 하이라이팅에 에러가 있다.</p>\n<ul>\n<li>최적 부분 구조에 속하지 않는 정보를 제하는 것이 중요하다.</li>\n</ul>\n<p>그러나 이렇게 푸는 것은 풀리긴 하지만 별로 배우는 건 없다. 지금 다시 상세히 읽으니 이해가 된다. 대체 왜 각 상태의 모든 정보를 담은 <code class=\"language-text\">searchMax(y,x,sum)</code>을 그대로 메모이제이션을 해서는 안 되는지. 그렇게 하려면 두 가지 문제가 있다:</p>\n<ol>\n<li><code class=\"language-text\">sum</code>을 기준으로 메모이제이션 하므로 숫자의 크기가 클 경우 많은 메모리가 필요하게 된다.</li>\n<li><code class=\"language-text\">sum</code>을 기준으로 하므로 합이 겹치지 않는 경우는 전부 다른 경우로 계산된다.</li>\n</ol>\n<p>그런데 어떻게 여기서 <code class=\"language-text\">sum</code>을 빼도 된다고 생각할 수 있을까? 그 기준은 무조건 <strong>이미 선택한 정보인가</strong> 이다. <code class=\"language-text\">y, x</code>는 앞으로 재귀 호출이 선택할 정보들을 결정하기에 필요한 정보지만, <code class=\"language-text\">sum</code>은 이미 선택한 정보다. 여전히 잘 와닿지 않는다. 그렇다면 이렇게 물어보자. '<code class=\"language-text\">sum</code>이 바뀌고 다른게 그대로라면, 앞으로의 선택에 영향을 주는가?'. </p>\n<h3 id=\"종만북-8장---lis\"><a href=\"#%EC%A2%85%EB%A7%8C%EB%B6%81-8%EC%9E%A5---lis\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>종만북 8장 - LIS</h3>\n<details><summary>cpp solution</summary>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">505</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> mins<span class=\"token punctuation\">[</span><span class=\"token number\">505</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 역시 cache를 505x505로 하니 메모리 초과가 되버리는거 같다.</span>\n<span class=\"token comment\">// 그렇다면, 그냥 모든 수 500가지에 대해, 그 수를 기준으로 치고, 500개 중 넘는 걸 세는 것을 해서</span>\n<span class=\"token comment\">// 최대 길이를 저장한다면? 시간복잡도 500*500*50=250000*50=1250,0000 cpp로는 충분할지도. 하지만 이건</span>\n<span class=\"token comment\">// 전혀 동적계획이 아닌데.. 아니, 넘는 걸 센다고 해도 그게 그대로 길이가 되지 않는구나..</span>\n<span class=\"token comment\">// 현재 쓰는 코드도 start를 지정하면 cache에서 start를 뺄 수 있는것 아닌가?</span>\n<span class=\"token comment\">// 음 역시 len은 선택해온 정보고, start는 앞으로 선택을 결정하는 정보니 len을 지워야 하는건가??</span>\n<span class=\"token comment\">// 그렇지만 len 없이 어떻게 점화식을 나타내지?</span>\n\n<span class=\"token comment\">// 사실 기억으론 배열에 인덱스에 해당하는 길이의 최대한 작은 수를 저장하는 방식으로 관리하는 것으로 기억나긴 하는데.. 그건 그냥 기억으로 푸는 것일 뿐. 왜 그렇게 해야 하는지 스스로 논리적으로 유도하기가 힘들다.</span>\n<span class=\"token comment\">// </span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> C<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> C<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>c<span class=\"token operator\">&lt;</span>C<span class=\"token punctuation\">;</span>c<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 어떻게 풀었었는지 까먹었다.</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> t<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>t<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>t<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            cin <span class=\"token operator\">>></span> arr<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            mins<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>BIG<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 특정 수를 선택하면, 기준 수가 늘어나버리고,</span>\n        <span class=\"token comment\">// 선택하지 않으면 길이가 짧아진다.</span>\n        <span class=\"token comment\">// 즉, 길이가 길거나 선택 수가 작은 정보들을 우선순위 큐를 사용하여 관리한다면?</span>\n        <span class=\"token comment\">// 아니면, 각 길이별로 배열에, 그 최소 선택수를 저장하여 관리하면서,</span>\n        <span class=\"token comment\">// 높은 수를 만나게 되면 길이+1 칸에 그 높은수를 저장한다면?,</span>\n        <span class=\"token comment\">// 그러면 특정 수에 대해 어느 칸에 더할 수 있는지 매 번 찾아야 한다..</span>\n        \n        <span class=\"token keyword\">int</span> ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">&lt;</span>mins<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">></span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                        ans<span class=\"token operator\">=</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    mins<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>cur<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// if(cur &lt; mins[ans-1]){</span>\n            <span class=\"token comment\">//     mins[ans-1]=cur;</span>\n            <span class=\"token comment\">// }</span>\n\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// for(int k=0;k&lt;n;k++){</span>\n        <span class=\"token comment\">//     if(mins[k]==BIG){</span>\n        <span class=\"token comment\">//         ans=k;</span>\n        <span class=\"token comment\">//     }</span>\n        <span class=\"token comment\">// }</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>분명 위의 문제는 최적 부분 구조에 이전의 기록인 합산이 포함되지 않는 구조여서 뺄 수 있었지만, 이번 문제에서는 특정 위치에서 특정 start가 정해져도 최대 길이인지 결정하려면 현재 길이가 필요해지고, 현재 길이를 캐시하려고 하면 메모리가 너무 늘어나버리는 문제가 있었다. 나는 반드시 재귀를 호출할 때 인덱스 0부터 시작해야한다고 생각해서 시그니쳐를 <code class=\"language-text\">search(int cur, int start, int sum)</code> 이런 식으로 생각해서, 인덱스를 증가하면서 이전 수와 비교 (또는 현재 수 기준 다음 수와 비교)하여 감소했으면, 초기화하거나, 그대로 진행하는 것 중의 최대, 증가했으면, 선택하거나, 그대로 진행하는것 중의 최대 이렇게 4가지 선택을 해서 계산하게 했으나 시간초과가 났다.</p>\n<p>그냥 바깥 반복문에서 모든 start를 시도하게 하면, 또 그 search에서 현 start 이상의 다른 start를 지정하는 식으로 호출될 수 있다. 그리고 그렇게 <code class=\"language-text\">search(int start)</code>를 <code class=\"language-text\">start</code> 값 이상의 lis라고 정의하면 <code class=\"language-text\">sum</code>도 필요 없게 된다. 어째서 그럴까? 어떻게 해야 이런 풀이를 생각해낼 수 있을까..</p>\n<p>배울 기법:</p>\n<ul>\n<li><code class=\"language-text\">S[-1]=-inf</code>같은 식으로 지정하여, 바깥 반복문을 돌면서 최대값을 찾아야 하는 것을 -1을 호출하여 모든 경우를 다시 호출하게 만들기(?)</li>\n</ul>\n</details>\n<h2 id=\"tags\"><a href=\"#tags\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tags</h2>\n<p>  #sport, #blog</p>","id":"ad962ba3-4ef5-5a48-b6fd-476362c9a933","fields":{"slug":"백준-문제-풀이"},"frontmatter":{"date":"2019-08-28","title":"백준 문제 풀이","category":"sport","tags":["dev/sport","blog"],"banner":"/assets/bg/2.jpg"},"timeToRead":6},{"excerpt":"백준 16137 - 견우와 직녀https://www.acmicpc.net/problem/16137다리를 연속해서 건너서는 안 된다는 조건 때문에 여러 번 틀림. 다 풀었다고 생각되더라도 다시한번 모든 조건을 구현했는지 확인해야겠다. 아니면 처음부터 다양한 조건들을 나타내는 테스트 케이스들을 하나씩 만들어 보는게 좋을수도. bfs로는 구현하기 까다롭다고 생각했는데 (주기 다리 건너기 때문에) 검색해보니 bfs…","html":"<h3 id=\"백준-16137---견우와-직녀\"><a href=\"#%EB%B0%B1%EC%A4%80-16137---%EA%B2%AC%EC%9A%B0%EC%99%80-%EC%A7%81%EB%85%80\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>백준 16137 - 견우와 직녀</h3>\n<p><a href=\"https://www.acmicpc.net/problem/16137\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.acmicpc.net/problem/16137</a></p>\n<p>다리를 연속해서 건너서는 안 된다는 조건 때문에 여러 번 틀림. 다 풀었다고 생각되더라도 다시한번 모든 조건을 구현했는지 확인해야겠다. 아니면 처음부터 다양한 조건들을 나타내는 테스트 케이스들을 하나씩 만들어 보는게 좋을수도. </p>\n<p>bfs로는 구현하기 까다롭다고 생각했는데 (주기 다리 건너기 때문에) 검색해보니 bfs로 구현한 사람이 있었다. 다리 사용의 유무 때문에도 bfs로 구현하기 어렵다고 생각했지만 bfs로 구현한 코드가 있다. 그 경우 이전 정보에 대해 필요한 유일한 정보인 이전 위치가 절벽이었는지에 대한 정보를 탐색할 때 얻기 위해, 현재 상태 정보에 현재 위치가 절벽인지에 대한 여부를 상태 정보에 넣는다. 또, 탐색 거리를 건너뛰는 문제에 대한 점은 bfs에서도 visited여부만으로 갱신하는 게 아니라, cost를 더 줄일 수 있으면 탐색함으로써 구현 가능하다.</p>\n<h2 id=\"tags\"><a href=\"#tags\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tags</h2>\n<p>  #sport, #blog</p>","id":"4412220d-2f53-5dbc-a04d-092dded43336","fields":{"slug":"백준-문제-풀이"},"frontmatter":{"date":"2019-08-26","title":"백준 문제 풀이","category":"sport","tags":["dev/sport","blog"],"banner":"/assets/bg/2.jpg"},"timeToRead":1},{"excerpt":"각종 명령어를 치면서 정리하자. 또 금방 까먹는다이전에 했던 것과 비슷한 명령들은 생략.exec /bin/sh in first container of pod named \"monolith\" 및 플래그는 또 뭔가 했더니, 알고보니 가 플래그 줄임이고, 가  플래그의 줄임이었다. 그리고 플래그로 pod 내부의 컨테이너 중 어떤 컨테이너를 대상으로 할 지 선택할 수 있다. 아래는  도움말:Options:\n -c, --container…","html":"<p>각종 명령어를 치면서 정리하자. 또 금방 까먹는다</p>\n<p>이전에 했던 것과 비슷한 명령들은 생략.</p>\n<blockquote>\n<p>exec /bin/sh in first container of pod named \"monolith\"</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"ps\"><pre class=\"language-ps\"><code class=\"language-ps\">kubectl exec monolith --stdin --tty /bin/sh\n # is same with:\nkubectl exec monolith -it /bin/sh</code></pre></div>\n<p><code class=\"language-text\">--stdin</code> 및 <code class=\"language-text\">--tty</code>플래그는 또 뭔가 했더니, 알고보니 <code class=\"language-text\">-i</code>가 <code class=\"language-text\">--stdin</code>플래그 줄임이고, <code class=\"language-text\">-t</code>가 <code class=\"language-text\">--tty</code> 플래그의 줄임이었다. 그리고 <code class=\"language-text\">-c</code>플래그로 pod 내부의 컨테이너 중 어떤 컨테이너를 대상으로 할 지 선택할 수 있다. 아래는 <code class=\"language-text\">kubectl exec -h</code> 도움말:</p>\n<blockquote>\n<p>Options:\n-c, --container='': Container name. If omitted, the first container in the pod will be chosen</p>\n<p> -i, --stdin=false: Pass stdin to the container</p>\n<p> -t, --tty=false: Stdin is a TTY</p>\n<p>Usage:\nkubectl exec POD [-c CONTAINER] -- COMMAND [args...][options]</p>\n</blockquote>\n<p>이번 예에서는 https 트래픽을 처리할 수 있는 secure pod를 만들고, 그걸 Service로 외부 노출하여 접속해보는 것으로 보인다.</p>\n<h3 id=\"1\"><a href=\"#1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.</h3>\n<blockquote>\n<p>create tls certificates from files:</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"ps\"><pre class=\"language-ps\"><code class=\"language-ps\">ls tls/\n # &gt; ca-key.pem  ca.pem  cert.pem  key.pem\nkubectl create secret generic tls-certs --from-file tls/\n #&gt; secret/tls-certs created</code></pre></div>\n<blockquote>\n<p>generate nginx configmap from file</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"ps\"><pre class=\"language-ps\"><code class=\"language-ps\">cat nginx/proxy.conf\n # &gt; server {\n # &gt;   listen 443;\n # &gt;   ssl    on;\n # &gt; \n # &gt;   ssl_certificate     /etc/tls/cert.pem;\n # &gt;   ssl_certificate_key /etc/tls/key.pem;\n # &gt; \n # &gt;   location / {\n # &gt;     proxy_pass http://127.0.0.1:80;\n # &gt;   }\n # &gt; }\n\nkubectl create configmap nginx-proxy-conf --from-file nginx/proxy.conf\n # &gt; configmap/nginx-proxy-conf created\n\ncat pods/secure-monolith.yaml</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\">apiVersion: v1\nkind: Pod\nmetadata:\n  name: &quot;secure-monolith&quot;\n  labels:\n    app: monolith\nspec:\n  containers:\n    - name: nginx\n      image: &quot;nginx:1.9.14&quot;\n      lifecycle:\n        preStop:\n          exec:\n            command: [&quot;/usr/sbin/nginx&quot;,&quot;-s&quot;,&quot;quit&quot;]\n      volumeMounts:\n        - name: &quot;nginx-proxy-conf&quot;\n          mountPath: &quot;/etc/nginx/conf.d&quot;\n        - name: &quot;tls-certs&quot;\n          mountPath: &quot;/etc/tls&quot;\n    - name: monolith\n      image: &quot;kelseyhightower/monolith:1.0.0&quot;\n      ports:\n        - name: http\n          containerPort: 80\n        - name: health\n          containerPort: 81\n      resources:\n        limits:\n          cpu: 0.2\n          memory: &quot;10Mi&quot;\n      livenessProbe:\n        httpGet:\n          path: /healthz\n          port: 81\n          scheme: HTTP\n        initialDelaySeconds: 5\n        periodSeconds: 15\n        timeoutSeconds: 5\n      readinessProbe:\n        httpGet:\n          path: /readiness\n          port: 81\n          scheme: HTTP\n        initialDelaySeconds: 5\n        timeoutSeconds: 1\n  volumes:\n    - name: &quot;tls-certs&quot;\n      secret:\n        secretName: &quot;tls-certs&quot;\n    - name: &quot;nginx-proxy-conf&quot;\n      configMap:\n        name: &quot;nginx-proxy-conf&quot;\n        items:\n          - key: &quot;proxy.conf&quot;\n            path: &quot;proxy.conf&quot;</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ps\"><pre class=\"language-ps\"><code class=\"language-ps\">kubectl create -f pods/secure-monolith.yaml\n # &gt; pod/secure-monolith created</code></pre></div>\n<blockquote>\n<p>expose secure-monolith pod with kube service</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"ps\"><pre class=\"language-ps\"><code class=\"language-ps\">cat services/monolith.yaml</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\">kind: Service\napiVersion: v1\nmetadata:\n  name: &quot;monolith&quot;\nspec:\n  selector:\n    app: &quot;monolith&quot;\n    secure: &quot;enabled&quot;\n  ports:\n    - protocol: &quot;TCP&quot;\n      port: 443\n      targetPort: 443\n      nodePort: 31000\n  type: NodePort</code></pre></div>\n<blockquote>\n<p>Things to note:</p>\n<ol>\n<li>이 서비스는 selector를 통해 <code class=\"language-text\">app=monolith,secure=enabled</code>인 pod를 찾아 자동으로 노출한다.</li>\n<li>포트 31000의 외부 트래픽을 내부 포트 443의 nginx로 전달해야 하므로 여기서 nodeport를 expose해야 한다.</li>\n</ol>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"ps\"><pre class=\"language-ps\"><code class=\"language-ps\">kubectl create -f services/monolith.yaml\n # &gt; service/monolith created</code></pre></div>\n<p><code class=\"language-text\">gcloud compute firewall-rules</code> 명령으로 노출된 nodeport의 monolith service로의 트래픽을 허용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ps\"><pre class=\"language-ps\"><code class=\"language-ps\">gcloud compute firewall-rules create allow-monolith-nodeport --allow=tcp:31000\n\n #&gt; Creating firewall...done.</code></pre></div>\n<blockquote>\n<p>get an external IP address for one of the nodes.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"ps\"><pre class=\"language-ps\"><code class=\"language-ps\">gcloud compute instances list</code></pre></div>\n<blockquote>\n<p>try hitting the secure-monolith service using curl:</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">curl -k https://&lt;EXTERNAL_IP&gt;:31000</code></pre></div>\n<p>이 때, 연결이 실패하게 되는데, 예제에서 secure-monolith yaml에 <code class=\"language-text\">secure=enabled</code> 라벨을 빼놓았기 때문이다. 아래와 같이 <code class=\"language-text\">kubectl label pods</code>명령으로 label을 추가할 수 있고, label을 추가하면 서비스를 재시작하지 않고도 서비스가 알아서 갱신되며 endpoint가 생성된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ps\"><pre class=\"language-ps\"><code class=\"language-ps\">kubectl get pods -l &quot;app=monolith,secure=enabled&quot;\n #&gt; No resources found.\nkubectl label pods secure-monolith &#39;secure-enabled&#39;\n #&gt; error: at least one label update is required\nkubectl label pods secure-monolith &#39;secure=enabled&#39;\n #&gt; pod/secure-monolith labeled\nkubectl get pods secure-monolith --show-labels\n #&gt; NAME              READY   STATUS    RESTARTS   AGE     LABELS\n #&gt; secure-monolith   2/2     Running   0          9m54s   app=monolith,secure=enabled</code></pre></div>\n<p>다시 외부 ip로 접속하면 연결이 잘 된다.</p>\n<h2 id=\"tags\"><a href=\"#tags\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tags</h2>\n<p>  #cloud, #blog</p>","id":"847b9205-2cda-584d-995a-c6c1ab39ee40","fields":{"slug":"qwiklab-kubernetes-스터디"},"frontmatter":{"date":"2019-08-26","title":"qwiklab kubernetes 스터디","category":"blog","tags":["dev/cloud","blog"],"banner":"/assets/bg/2.jpg"},"timeToRead":3},{"excerpt":"각종 명령어를 치면서 정리하자. 또 금방 까먹는다1.list active account namelist project idsetting default compute zonecreating a kubernetes engine clusterget authentication credentials for the cluster위 명령을 해야 kubeconfig entry…","html":"<p>각종 명령어를 치면서 정리하자. 또 금방 까먹는다</p>\n<h3 id=\"1\"><a href=\"#1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.</h3>\n<blockquote>\n<p>list active account name</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"ps1\"><pre class=\"language-ps1\"><code class=\"language-ps1\">gcloud auth list</code></pre></div>\n<blockquote>\n<p>list project id</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"ps1\"><pre class=\"language-ps1\"><code class=\"language-ps1\">gcloud config list project</code></pre></div>\n<blockquote>\n<p>setting default compute zone</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"ps1\"><pre class=\"language-ps1\"><code class=\"language-ps1\">gcloud config set compute/zone &lt;us-central1-a&gt;</code></pre></div>\n<blockquote>\n<p>creating a kubernetes engine cluster</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"ps1\"><pre class=\"language-ps1\"><code class=\"language-ps1\">gcloud container clusters create &lt;cluster-name&gt;</code></pre></div>\n<blockquote>\n<p>get authentication credentials for the cluster</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"ps1\"><pre class=\"language-ps1\"><code class=\"language-ps1\">gcloud container clusters get-credentials &lt;cluster-name&gt;</code></pre></div>\n<p>위 명령을 해야 kubeconfig entry가 생성된다는거 같다. 기본 인증서 등등이 없어진다는 말이 이걸 말하는 듯? </p>\n<blockquote>\n<p>deploying and application to the cluster</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"ps1\"><pre class=\"language-ps1\"><code class=\"language-ps1\">kubectl run hello-server --image=gcr.io/google-samples/hello-app:1.0 --port 8080</code></pre></div>\n<blockquote>\n<p>expose kube resource with kubernetes service</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"ps1\"><pre class=\"language-ps1\"><code class=\"language-ps1\">kubectl expose deployment hello-server --type=&quot;LoadBalancer&quot;</code></pre></div>\n<blockquote>\n<p>cleanup cluster</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"ps1\"><pre class=\"language-ps1\"><code class=\"language-ps1\">gcloud container clusters delete &lt;cluster-name&gt;</code></pre></div>\n<h3 id=\"2-orchestrating-the-clous-with-kubernetes\"><a href=\"#2-orchestrating-the-clous-with-kubernetes\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. orchestrating the clous with kubernetes</h3>\n<p>In this lab you will learn how to:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Provision a complete Kubernetes cluster using Kubernetes Engine.\nDeploy and manage Docker containers using kubectl.\nBreak an application into microservices using Kubernetes&#39; Deployments and Services.</code></pre></div>\n<h2 id=\"tags\"><a href=\"#tags\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tags</h2>\n<p>  #meta, #blog</p>","id":"788a55b3-3f51-5e9d-8c73-98be0bba5105","fields":{"slug":"kubernetes-qwiklab-hands-on-스터디-2"},"frontmatter":{"date":"2019-08-23","title":"kubernetes qwiklab hands on 스터디 2","category":"blog","tags":["meta","blog"],"banner":"/assets/bg/3.jpg"},"timeToRead":1},{"excerpt":"mathjax 추가https://www.gatsbyjs.org/packages/gatsby-remark-mathjax/\n이걸로 하려다가 MathJax를 template에 추가하라는데 어떻게 하라는건지 몰라서 아래걸로 함.https://www.gatsbyjs.org/packages/gatsby-remark-katex/\n보이는 대로 설정한 후,  컴포넌트에 require…","html":"<h3 id=\"mathjax-추가\"><a href=\"#mathjax-%EC%B6%94%EA%B0%80\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>mathjax 추가</h3>\n<p><a href=\"https://www.gatsbyjs.org/packages/gatsby-remark-mathjax/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.gatsbyjs.org/packages/gatsby-remark-mathjax/</a>\n이걸로 하려다가 MathJax를 template에 추가하라는데 어떻게 하라는건지 몰라서 아래걸로 함.</p>\n<p><a href=\"https://www.gatsbyjs.org/packages/gatsby-remark-katex/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.gatsbyjs.org/packages/gatsby-remark-katex/</a>\n보이는 대로 설정한 후, <code class=\"language-text\">Post.tsx</code> 컴포넌트에 require 추가하니 잘 되었다. 위에꺼도 아마 비슷한 걸 하라고 한거 같은데 어느 경로에서 가져오란건지 알 수가 없었다.</p>\n<h3 id=\"tag관리\"><a href=\"#tag%EA%B4%80%EB%A6%AC\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tag관리</h3>\n<p>모든 타입 포스트에서 태그라인을 \\#tag형식으로 바꿔야 하며, 블로그에서는 태그 항목 자체를 없애야 한다.</p>\n<ul>\n<li>processor를 쓸 때, 블로그 포스트를 한 태그당 하나밖에 못쓴다는 사실을 알아냈다. 가능하면 수정해야 할 듯.</li>\n<li>블로그에서 title을 기반으로 포스트 url이 처리된다. 즉 title이 겹치면 겹친 포스트 중 한 포스트밖에 못 본다. 이부분은 아마 옵션을 손보면 고칠 수 있을거 같긴 하다. 근데 아마 옵션으로 한번에 가능하게 되어있지 않다면 이곳저곳 손봐야 해서 귀찮을 듯. 이대로 쓰려면 블로그 포스트 제목이 전혀 안 겹치게 해야 한다.</li>\n</ul>\n<p>시도해본 결과 역시 옵션으로 쉽게 바로 되는 부분은 아니다. </p>\n<p>태그 형식 바꾸기는 성공했으나, 블로그에서 태그 항목을 replace로 없애려 했는데 잘 안된다.</p>\n<h2 id=\"tags\"><a href=\"#tags\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tags</h2>\n<p>  #meta, #blog</p>","id":"b4994368-bd97-55a6-ae68-1d64a10e3d72","fields":{"slug":"blog-관리-mathjax추가-및-tag"},"frontmatter":{"date":"2019-06-07","title":"blog 관리 (mathjax추가 및 tag)","category":"meta","tags":["meta","blog"],"banner":"/assets/bg/4.jpg"},"timeToRead":1},{"excerpt":"edwith강의 시청\nhttps://www.edwith.org/machinelearning1_17/lecture/10575/MLE: Maximum Likelihood Estimation최적의 가능성을 가지는 를 추론하는것..?단조 함수라서, 로그를 취해서 계산을 편하게 함.이 값을 최대화해야하므로, 미분이 0이 되는 위치를 찾는다.가 일 때 MLE 관점에서 최적.Simple Error Bound…","html":"<p>edwith강의 시청\n<a href=\"https://www.edwith.org/machinelearning1_17/lecture/10575/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.edwith.org/machinelearning1_17/lecture/10575/</a></p>\n<h3 id=\"mle-maximum-likelihood-estimation\"><a href=\"#mle-maximum-likelihood-estimation\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MLE: Maximum Likelihood Estimation</h3>\n<p>최적의 가능성을 가지는 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>θ</mi></mrow><annotation encoding=\"application/x-tex\">\\theta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span></span></span></span>를 추론하는것..?</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mi>θ</mi><mo>^</mo></mover><mo>=</mo><mi>a</mi><mi>r</mi><mi>g</mi><mi>m</mi><mi>a</mi><msub><mi>x</mi><mi>θ</mi></msub><mi>P</mi><mo stretchy=\"false\">(</mo><mi>D</mi><mi mathvariant=\"normal\">∣</mi><mi>θ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\hat\\theta=argmax_\\theta P(D|\\theta)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9578799999999998em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9578799999999998em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span></span><span style=\"top:-3.26344em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.16666em;\">^</span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">a</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\">)</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mi>θ</mi><mo>^</mo></mover><mo>=</mo><mi>a</mi><mi>r</mi><mi>g</mi><mi>m</mi><mi>a</mi><msub><mi>x</mi><mi>θ</mi></msub><mi>P</mi><mo stretchy=\"false\">(</mo><mi>D</mi><mi mathvariant=\"normal\">∣</mi><mi>θ</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>a</mi><mi>r</mi><mi>g</mi><mi>m</mi><mi>a</mi><msub><mi>x</mi><mi>θ</mi></msub><msup><mi>θ</mi><msub><mi>a</mi><mi>H</mi></msub></msup><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>θ</mi><msup><mo stretchy=\"false\">)</mo><msub><mi>a</mi><mi>T</mi></msub></msup></mrow><annotation encoding=\"application/x-tex\">\\hat\\theta=argmax_\\theta P(D|\\theta)=argmax_\\theta \\theta^{a_H}(1-\\theta)^{a_T}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9578799999999998em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9578799999999998em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span></span><span style=\"top:-3.26344em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.16666em;\">^</span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">a</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">a</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3567071428571427em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.08125em;\">H</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.14329285714285717em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3567071428571427em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.14329285714285717em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>단조 함수라서, 로그를 취해서 계산을 편하게 함.</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mi>θ</mi><mo>^</mo></mover><mo>=</mo><mi>a</mi><mi>r</mi><mi>g</mi><mi>m</mi><mi>a</mi><msub><mi>x</mi><mi>θ</mi></msub><mi>l</mi><mi>n</mi><mi>P</mi><mo stretchy=\"false\">(</mo><mi>D</mi><mi mathvariant=\"normal\">∣</mi><mi>θ</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>a</mi><mi>r</mi><mi>g</mi><mi>m</mi><mi>a</mi><msub><mi>x</mi><mi>θ</mi></msub><mi>l</mi><mi>n</mi><mrow><msup><mi>θ</mi><msub><mi>a</mi><mi>H</mi></msub></msup><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>θ</mi><msup><mo stretchy=\"false\">)</mo><msub><mi>a</mi><mi>T</mi></msub></msup></mrow><mo>=</mo><mi>a</mi><mi>r</mi><mi>g</mi><mi>m</mi><mi>a</mi><msub><mi>x</mi><mi>θ</mi></msub><mo stretchy=\"false\">{</mo><msub><mi>a</mi><mi>H</mi></msub><mi>l</mi><mi>n</mi><mi>θ</mi><mo>+</mo><msub><mi>a</mi><mi>T</mi></msub><mi>l</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>θ</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\hat\\theta=argmax_\\theta lnP(D|\\theta)=argmax_\\theta ln{\\theta^{a_H}(1-\\theta)^{a_T}}=argmax_\\theta \\{a_Hln\\theta+a_Tln(1-\\theta)\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9578799999999998em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9578799999999998em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span></span><span style=\"top:-3.26344em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.16666em;\">^</span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">a</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">a</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">n</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3567071428571427em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.08125em;\">H</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.14329285714285717em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3567071428571427em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.14329285714285717em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">a</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.08125em;\">H</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\">)</span><span class=\"mclose\">}</span></span></span></span></p>\n<p>이 값을 최대화해야하므로, 미분이 0이 되는 위치를 찾는다.</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mi>d</mi><mrow><mi>d</mi><mi>θ</mi></mrow></mfrac><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mi>H</mi></msub><mi>l</mi><mi>n</mi><mi>θ</mi><mo>+</mo><msub><mi>a</mi><mi>T</mi></msub><mi>l</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>θ</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn><mspace linebreak=\"newline\"></mspace><mfrac><msub><mi>a</mi><mi>H</mi></msub><mi>θ</mi></mfrac><mo>−</mo><mfrac><msub><mi>a</mi><mi>T</mi></msub><mrow><mn>1</mn><mo>−</mo><mi>θ</mi></mrow></mfrac><mo>=</mo><mn>0</mn><mspace linebreak=\"newline\"></mspace><mi>θ</mi><mo>=</mo><mfrac><msub><mi>a</mi><mi>H</mi></msub><mrow><msub><mi>a</mi><mi>T</mi></msub><mo>+</mo><msub><mi>a</mi><mi>H</mi></msub></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{d}{d\\theta}(a_Hln\\theta+a_Tln(1-\\theta))=0\n\\newline\n\\frac{a_H}{\\theta}-\\frac{a_T}{1-\\theta}=0\n\\newline\n\\theta=\\frac{a_H}{a_T+a_H}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2251079999999999em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8801079999999999em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.08125em;\">H</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0566969999999998em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7116969999999999em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.410305em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3567071428571427em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.08125em;\">H</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.14329285714285717em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.115028em;vertical-align:-0.403331em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7116969999999999em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">−</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.410305em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3567071428571427em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.14329285714285717em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.403331em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1570019999999999em;vertical-align:-0.44530499999999995em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7116969999999999em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3567071428571427em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.14329285714285717em;\"><span></span></span></span></span></span></span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3567071428571427em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.08125em;\">H</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.14329285714285717em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.410305em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3567071428571427em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.08125em;\">H</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.14329285714285717em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.44530499999999995em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>θ</mi></mrow><annotation encoding=\"application/x-tex\">\\theta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span></span></span></span>가 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><msub><mi>a</mi><mi>H</mi></msub><mrow><msub><mi>a</mi><mi>T</mi></msub><mo>+</mo><msub><mi>a</mi><mi>H</mi></msub></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{a_H}{a_T+a_H}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1570019999999999em;vertical-align:-0.44530499999999995em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7116969999999999em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3567071428571427em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.14329285714285717em;\"><span></span></span></span></span></span></span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3567071428571427em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.08125em;\">H</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.14329285714285717em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.410305em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3567071428571427em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.08125em;\">H</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.14329285714285717em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.44530499999999995em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>일 때 MLE 관점에서 최적.</p>\n<h3 id=\"simple-error-bound\"><a href=\"#simple-error-bound\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Simple Error Bound</h3>\n<p>실제 던졌을 때의 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>θ</mi></mrow><annotation encoding=\"application/x-tex\">\\theta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span></span></span></span>에 대한 최적 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mi>θ</mi><mo>^</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\hat\\theta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9578799999999998em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9578799999999998em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span></span><span style=\"top:-3.26344em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.16666em;\">^</span></span></span></span></span></span></span></span></span>와의 에러 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding=\"application/x-tex\">\\epsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">ϵ</span></span></span></span>?</p>\n<p>Hoeffding's inequality</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">∣</mi><mover accent=\"true\"><mi>θ</mi><mo>^</mo></mover><mo>−</mo><msup><mi>θ</mi><mo>∗</mo></msup><mi mathvariant=\"normal\">∣</mi><mo>≥</mo><mi>ϵ</mi><mo stretchy=\"false\">)</mo><mo>≤</mo><mn>2</mn><msup><mi>e</mi><mrow><mo>−</mo><mn>2</mn><mi>N</mi><msup><mi>ϵ</mi><mn>2</mn></msup></mrow></msup></mrow><annotation encoding=\"application/x-tex\">P(|\\hat\\theta-\\theta^*|\\ge\\epsilon)\\le2e^{-2N\\epsilon^2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2078799999999998em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord\">∣</span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9578799999999998em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span></span><span style=\"top:-3.26344em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.16666em;\">^</span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">ϵ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9869199999999999em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9869199999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">2</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">ϵ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913142857142857em;\"><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>이 식으로, 에러 0.1 이하의 경우가 0.01%가 되도록 하기 위한 N을 구한다던가 하는것이 가능.</p>\n<p>Probably Approximate Correct learning (PAC)\n(case, error)</p>\n<h2 id=\"tags\"><a href=\"#tags\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tags:</h2>\n<h1 id=\"study-machine-learning\"><a href=\"#study-machine-learning\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>study, #machine-learning</h1>","id":"c5cb6f1c-042f-585e-b059-97b82ae31758","fields":{"slug":"딥러닝-공부"},"frontmatter":{"date":"2019-06-05","title":"딥러닝 공부.","category":"blog","tags":["blog"],"banner":"/assets/bg/3.jpg"},"timeToRead":2},{"excerpt":"gh-pages로 블로그 올림.분명히 master 브랜치를 다 지웠는데도 계속  라는 에러가 떠서 왜그런가 했더니,  노드 모듈의 캐시에 저장되있어서였다. https://github.com/transitive-bullshit/react-modern-library-boilerplate/issues/15 여기에 나온대로 의 캐시를 지웠더니 잘 된다.tags  #blog, #github-pages","html":"<h3 id=\"gh-pages로-블로그-올림\"><a href=\"#gh-pages%EB%A1%9C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%98%AC%EB%A6%BC\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>gh-pages로 블로그 올림.</h3>\n<p>분명히 master 브랜치를 다 지웠는데도 계속 <code class=\"language-text\">A branch named &#39;master&#39; already exists.</code> 라는 에러가 떠서 왜그런가 했더니, <code class=\"language-text\">gh-pages</code> 노드 모듈의 캐시에 저장되있어서였다. </p>\n<p><a href=\"https://github.com/transitive-bullshit/react-modern-library-boilerplate/issues/15\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/transitive-bullshit/react-modern-library-boilerplate/issues/15</a> 여기에 나온대로 <code class=\"language-text\">gh-pages</code>의 캐시를 지웠더니 잘 된다.</p>\n<h2 id=\"tags\"><a href=\"#tags\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tags</h2>\n<p>  #blog, #github-pages</p>","id":"46dd0239-294a-5a1d-b4a4-f6348da2d01f","fields":{"slug":"2019-05-25"},"frontmatter":{"date":"2019-05-25","title":"2019-05-25","category":"blog","tags":["blog"],"banner":"/assets/bg/2.jpg"},"timeToRead":1},{"excerpt":"gh-pages로 블로그 올림.분명히 master 브랜치를 다 지웠는데도 계속  라는 에러가 떠서 왜그런가 했더니,  노드 모듈의 캐시에 저장되있어서였다. https://github.com/transitive-bullshit/react-modern-library-boilerplate/issues/15 여기에 나온대로 의 캐시를 지웠더니 잘 된다.tags  #blog, #github-pages","html":"<h3 id=\"gh-pages로-블로그-올림\"><a href=\"#gh-pages%EB%A1%9C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%98%AC%EB%A6%BC\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>gh-pages로 블로그 올림.</h3>\n<p>분명히 master 브랜치를 다 지웠는데도 계속 <code class=\"language-text\">A branch named &#39;master&#39; already exists.</code> 라는 에러가 떠서 왜그런가 했더니, <code class=\"language-text\">gh-pages</code> 노드 모듈의 캐시에 저장되있어서였다. </p>\n<p><a href=\"https://github.com/transitive-bullshit/react-modern-library-boilerplate/issues/15\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/transitive-bullshit/react-modern-library-boilerplate/issues/15</a> 여기에 나온대로 <code class=\"language-text\">gh-pages</code>의 캐시를 지웠더니 잘 된다.</p>\n<h2 id=\"tags\"><a href=\"#tags\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tags</h2>\n<p>  #blog, #github-pages</p>","id":"5e1d4d13-8b61-5c9f-a983-5b4e303c89e3","fields":{"slug":"2019-05-24"},"frontmatter":{"date":"2019-05-24","title":"2019-05-24","category":"blog","tags":["blog"],"banner":"/assets/bg/4.jpg"},"timeToRead":1},{"excerpt":"docker for aws (swarm)으로 aws 배포 성공그놈의 invalid host header 문제를 드디어 해결했다. 원하던 방식으로 한 건 아니고 그냥 빌드해서 로 를 설치하고 으로 응답하게 했는데, 또 계속 안되다가 이상하게 그냥 로는 5000포트에서 성공하길래 왜인가 했더니 에 필요없는  옵션 때문이었다. 지우고 다시 으로 돌리자 드디어 클라이언트 앱이 떴다. 다만 서버에 연결 및 서버 자체로 elasticsearch…","html":"<h3 id=\"docker-for-aws-swarm으로-aws-배포-성공\"><a href=\"#docker-for-aws-swarm%EC%9C%BC%EB%A1%9C-aws-%EB%B0%B0%ED%8F%AC-%EC%84%B1%EA%B3%B5\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>docker for aws (swarm)으로 aws 배포 성공</h3>\n<p>그놈의 invalid host header 문제를 드디어 해결했다. 원하던 방식으로 한 건 아니고 그냥 빌드해서 <code class=\"language-text\">yarn global add serve</code>로 <code class=\"language-text\">serve</code>를 설치하고 <code class=\"language-text\">serve -s build -l 3000</code>으로 응답하게 했는데, 또 계속 안되다가 이상하게 그냥 <code class=\"language-text\">serve -s build</code>로는 5000포트에서 성공하길래 왜인가 했더니 <code class=\"language-text\">docker-compose.yml</code>에 필요없는 <code class=\"language-text\">expose: 3000</code> 옵션 때문이었다. 지우고 다시 <code class=\"language-text\">command: serve -s build -l 3000</code>으로 돌리자 드디어 클라이언트 앱이 떴다. 다만 서버에 연결 및 서버 자체로 elasticsearch service와는 연결이 안되었는데, 하도 스택 생성/삭제를 반복했더니 ec2 사용 시간 요금은 다 쓰지도 않았는데 벌써 ec2 ebs io 프리 티어 제한을 넘어 요금이 2만원을 넘어버려서 그냥 다 지워버렸다. vocabo-cluster의 vpc와 elasticsearch의 vpc를 연결하려 해봤는데, 문서를 찾아보니 한 vpc 내에서 퍼블릭/프라이빗 서브넷 생성이 가능하다고 되있어서 그렇게 하는 식으로 바꿔야할 거 같다.</p>\n<p>어쨌든 dev/prod 파이프라인을 짜보고 싶은데 지금 방식은 prod쪽이다..</p>\n<h2 id=\"tags\"><a href=\"#tags\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tags</h2>\n<p>  #vocabo, #aws, </p>","id":"8336491f-002f-5dbe-b15b-ca0c4028ad63","fields":{"slug":"2019-05-22"},"frontmatter":{"date":"2019-05-22","title":"2019-05-22","category":"blog","tags":["blog"],"banner":"/assets/bg/3.jpg"},"timeToRead":1},{"excerpt":"aws eks에 쿠버네티스 배포해보려 했으나 실패iam에서 역할 만들고 도 설치했는데도 로그인이 도저히 안 된다. 설명을 보니까 아마 클러스터를 만든 vocabo-cluster-admin으로 명령을 줘야 하는데, aws 로그인은 그냥 admin으로 되어있는게 원인일거 같은데, 그러면 뭐 할 때마다 로그인/로그아웃 해야하는건 아닐테고, 어떻게 설정을 해야하는건지.. \n또 찾아보니 무슨 역할 부여 권한? assumeRole…","html":"<h3 id=\"aws-eks에-쿠버네티스-배포해보려-했으나-실패\"><a href=\"#aws-eks%EC%97%90-%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8B%B0%EC%8A%A4-%EB%B0%B0%ED%8F%AC%ED%95%B4%EB%B3%B4%EB%A0%A4-%ED%96%88%EC%9C%BC%EB%82%98-%EC%8B%A4%ED%8C%A8\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>aws eks에 쿠버네티스 배포해보려 했으나 실패</h3>\n<p>iam에서 역할 만들고 <code class=\"language-text\">aws-iam-authenticator</code>도 설치했는데도 로그인이 도저히 안 된다. 설명을 보니까 아마 클러스터를 만든 vocabo-cluster-admin으로 명령을 줘야 하는데, aws 로그인은 그냥 admin으로 되어있는게 원인일거 같은데, 그러면 뭐 할 때마다 로그인/로그아웃 해야하는건 아닐테고, 어떻게 설정을 해야하는건지..\n또 찾아보니 무슨 역할 부여 권한? assumeRole?관련 설정이 필요한 거 같은데 루트 관리자 계정에는 그걸 설정 못한다는거 같기도 하고..</p>\n<p>유투브 영상으로 튜토리얼을 보는게 낫겠다.</p>\n<h2 id=\"tags\"><a href=\"#tags\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tags</h2>\n<p>  #vocabo, #aws, </p>\n<!-- # TIL\n\n## tags\n  \\#powershell, \\#windows -->","id":"c21ee52d-8610-5bcb-87d0-a0e73f6e33b2","fields":{"slug":"2019-05-20"},"frontmatter":{"date":"2019-05-20","title":"2019-05-20","category":"blog","tags":["blog"],"banner":"/assets/bg/3.jpg"},"timeToRead":1},{"excerpt":"vocabo docker swarm for aws로 예제 앱 배포 성공aws 매니저 노드에 ssh로 연결해서 예제 앱 (https://github.com/dockersamples/example-voting-app)의 만 카피해서 로 하니 성공함.\n정확히는 내 서비스도 올려봤지만 매니저 노드의 퍼블릭 ip로 접근해도 접속이 안 되서 대체 어떻게 접속해야하는건지 하고 고민하다가 예제 앱을 올려도 여전히 접속이 안되길래 봤더니 docker-for…","html":"<h3 id=\"vocabo-docker-swarm-for-aws로-예제-앱-배포-성공\"><a href=\"#vocabo-docker-swarm-for-aws%EB%A1%9C-%EC%98%88%EC%A0%9C-%EC%95%B1-%EB%B0%B0%ED%8F%AC-%EC%84%B1%EA%B3%B5\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>vocabo docker swarm for aws로 예제 앱 배포 성공</h3>\n<p>aws 매니저 노드에 ssh로 연결해서 예제 앱 (<a href=\"https://github.com/dockersamples/example-voting-app\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/dockersamples/example-voting-app</a>)의 <code class=\"language-text\">docker-stack.yml</code>만 카피해서 <code class=\"language-text\">docker stack deploy sample -c docker-stack.yml</code>로 하니 성공함.\n정확히는 내 서비스도 올려봤지만 매니저 노드의 퍼블릭 ip로 접근해도 접속이 안 되서 대체 어떻게 접속해야하는건지 하고 고민하다가 예제 앱을 올려도 여전히 접속이 안되길래 봤더니 docker-for-aws의 'Deploy your app' 탭이 아니라, 'Load balancer' 탭에 설명이 나와 있었다. </p>\n<p>설명을 보니, port 매핑만 하면 뭔가 자동으로 접속이 가능해지기는 하는데, dns 도메인 연결은 직접 해줘야 하는 것이다. 생각해보면 당연하다. 근데 ssl/tls 트래픽(아마도 https 말하는걸까?)을 받으려면 추가 설정이 필요한 듯 하다.</p>\n<p>어쨌든 dns 설정을 하고 나니 예제 앱은 잘 돌아갔다. 문제는 내린 다음 내 앱을 돌렸을 때 <code class=\"language-text\">invalid host header</code>라 뜨며 프론트엔드가 접속이 안 된다는 점이다. 서버의 경우 접속이 된다. </p>\n<p>저걸 고치려면 webpack devserver 관련 설정을 해줘야 하는 듯 한데, 그러려면 eject를 해야하고, 그러면 버전 업뎃이 힘들어진다..</p>\n<p>그리고 그걸 하더라도 지금 좀 고민되는게, skaffold는 sync라는 기능을 지원하는데, docker-swarm에도 비슷한 기능이 있을까 싶어서 (어쩌면 그냥 context 설정으로 될지도) 좀 연구가 필요하다.</p>\n<p>TODO</p>\n<ol>\n<li>빠르게 개발 가능한 sync 기능 포함한 dev pipeline</li>\n<li>배포용 build pipeline</li>\n<li>위 두 가지를 클라우드에서 돌릴 수 있어야.</li>\n</ol>\n<h2 id=\"tags\"><a href=\"#tags\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tags</h2>\n<p>  #vocabo, #aws, </p>","id":"28ab9b87-d921-5d92-a8e3-f824624aa39a","fields":{"slug":"2019-05-16"},"frontmatter":{"date":"2019-05-16","title":"2019-05-16","category":"blog","tags":["blog"],"banner":"/assets/bg/3.jpg"},"timeToRead":1},{"excerpt":"vocabo 아직도 쿠버네티스 통신으로 씨름중 5skaffold를 써도 잘 안됬다. 이상한 점은, 같은 도커 이미지를 써도, 으로 실행하면, elastic-built 이미지가 잘 실행되어 모든 서비스가 잘 동작하는데, skaffold를 이용하여 쿠버네티스에 올려서 로그를 확인해 보면, 서버에서 떠야 할 로그를 (localhost 3001 접속 대기중) 띄운다. 도대체 왜 이렇게 달라지지? 싶었는데, 찾아보니 elasticsearch…","html":"<h3 id=\"vocabo-아직도-쿠버네티스-통신으로-씨름중-5\"><a href=\"#vocabo-%EC%95%84%EC%A7%81%EB%8F%84-%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8B%B0%EC%8A%A4-%ED%86%B5%EC%8B%A0%EC%9C%BC%EB%A1%9C-%EC%94%A8%EB%A6%84%EC%A4%91-5\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>vocabo 아직도 쿠버네티스 통신으로 씨름중 5</h3>\n<p>skaffold를 써도 잘 안됬다. 이상한 점은, 같은 도커 이미지를 써도, <code class=\"language-text\">docker-compose up</code>으로 실행하면, elastic-built 이미지가 잘 실행되어 모든 서비스가 잘 동작하는데, skaffold를 이용하여 쿠버네티스에 올려서 로그를 확인해 보면, 서버에서 떠야 할 로그를 (localhost 3001 접속 대기중) 띄운다. 도대체 왜 이렇게 달라지지? 싶었는데, 찾아보니 elasticsearch를 실행하기 위해 작업 부하에서? vm-memory 관련 사이즈 설정 및 기타등등 복잡한 설정을 해줘야 한다고 되어있다. 그게 안 되어있어서 실행되다 꺼져버린건지, 아니면 <code class=\"language-text\">docker-compose.yaml</code>에서 다른 서비스들은 시작 명령들을 줬는데, elastic은 그것 없이도 실행됬었는데, 그게 쿠버네티스에서는 다른 동작을 하게 만든것인지 헷갈린다.</p>\n<p>직접 쿠버네티스 설정을 다 해서 돌리게 할 지, 아니면 구글 마켓플레이스에서 간편 배포로 elasticsearch 또는 bitnami 사에서 만든 elk 스택이 있는데, 이걸 쓰면 편하긴 하지만 내가 직접 설정해보지 못하게 된다..</p>\n<p>또는 쿠버네티스를 포기하고 도커 스웜으로 하는 방법도 있다.</p>\n<ol>\n<li>어떻게든 쿠버네티스에 직접 올린다.</li>\n<li>완성된 elk 스택에 logstash로 데이터만 올린다.</li>\n<li>도커 스웜으로 올린다.</li>\n</ol>\n<p>현재로선 2번 방법이 가장 빠를 것으로 보인다. 3번은 한 번 시도해볼만 한데 또 분명 무슨 문제가 생길 것이고, 저걸 클라우드에 올리는게 상당히 일일 것이다.</p>\n<p><a href=\"https://www.slideshare.net/awskorea/docker-swarm-on-aws\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.slideshare.net/awskorea/docker-swarm-on-aws</a>\n이 자료는 괜찮긴 한데, 이걸 보면 설정 파일 없이 하나하나 설정해서 하는데 이건 또 나름대로 문제가 될 수 있다 (아니면 docker-compose로 호환 되는것일수도).</p>\n<p><a href=\"https://docs.docker.com/docker-for-aws/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.docker.com/docker-for-aws/</a></p>\n<p>그리고 지금 pc2긴 한데, 분명 kengdic 단어리스트가 있던거로 아는데, 여기엔 없다.</p>\n<p>...</p>\n<p>pc1에도 없다. 아무래도 용량이 너무 커서 없앤거 같은데, 어디에 뒀지? 아예 없애지는 않았을 텐데.</p>\n<p>이전 프로젝트명인 memorybook 폴더에 있었다.</p>\n<p>드디어!! logstash로 배포된 elasticsearch에 데이터를 넣었다. </p>\n<p>그런데, 데이터를 다 넣었고 credential문제도 해결했는데도 (url을 <code class=\"language-text\">&lt;username&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/elasticsearch</code> 이렇게 하니깐 되었다. 실제 사용: <code class=\"language-text\">user:(Password)@(elkIP):80/elasticsearch</code> 로 했음. 이상하게 지정 안 했을때의 elasticsearch 기본 포트인 9200으로는 안 되고, 브라우저로는 되길래 브라우저의 포트인 80을 쓰게 했더니 연결이 되었다.)\nsuggest 관련 무슨 검색 에러가 떴는데, 생각해보니 kengdic스키마를 제대로 만들지 않고 그냥 logstash로 밀어넣기만 했다. 제대로 작동하려면 jaso-tokenizer 및 nori-analyzer를 설치하여 스키마를 먼저 만들어주어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">lugin<span class=\"token operator\">-</span><span class=\"token number\">7.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span><span class=\"token operator\">-</span>plugin<span class=\"token punctuation\">.</span>zip\n<span class=\"token operator\">-</span><span class=\"token operator\">></span> Downloading https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>s3<span class=\"token punctuation\">.</span>ap<span class=\"token operator\">-</span>northeast<span class=\"token operator\">-</span><span class=\"token number\">2.</span>amazonaws<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>file<span class=\"token punctuation\">.</span>epikem<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>jaso<span class=\"token operator\">-</span>analyzer<span class=\"token operator\">-</span>plugin<span class=\"token operator\">-</span><span class=\"token number\">7.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span><span class=\"token operator\">-</span>plugin<span class=\"token punctuation\">.</span>zip\n<span class=\"token punctuation\">[</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span> <span class=\"token number\">100</span><span class=\"token operator\">%</span>  \nException <span class=\"token keyword\">in</span> thread <span class=\"token string\">\"main\"</span> java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>IllegalArgumentException<span class=\"token punctuation\">:</span> Plugin <span class=\"token punctuation\">[</span>jaso<span class=\"token operator\">-</span>analyzer<span class=\"token punctuation\">]</span> was built <span class=\"token keyword\">for</span> Elasticsearch version <span class=\"token number\">7.0</span><span class=\"token number\">.0</span> but version <span class=\"token number\">7.0</span><span class=\"token number\">.1</span> is running\n        at org<span class=\"token punctuation\">.</span>elasticsearch<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span>PluginsService<span class=\"token punctuation\">.</span><span class=\"token function\">verifyCompatibility</span><span class=\"token punctuation\">(</span>PluginsService<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">:</span><span class=\"token number\">346</span><span class=\"token punctuation\">)</span>\n        at org<span class=\"token punctuation\">.</span>elasticsearch<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span>InstallPluginCommand<span class=\"token punctuation\">.</span><span class=\"token function\">loadPluginInfo</span><span class=\"token punctuation\">(</span>InstallPluginCommand<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">:</span><span class=\"token number\">718</span><span class=\"token punctuation\">)</span>\n        at org<span class=\"token punctuation\">.</span>elasticsearch<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span>InstallPluginCommand<span class=\"token punctuation\">.</span><span class=\"token function\">installPlugin</span><span class=\"token punctuation\">(</span>InstallPluginCommand<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">:</span><span class=\"token number\">793</span><span class=\"token punctuation\">)</span>\n        at org<span class=\"token punctuation\">.</span>elasticsearch<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span>InstallPluginCommand<span class=\"token punctuation\">.</span><span class=\"token function\">install</span><span class=\"token punctuation\">(</span>InstallPluginCommand<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">:</span><span class=\"token number\">776</span><span class=\"token punctuation\">)</span>\n        at org<span class=\"token punctuation\">.</span>elasticsearch<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span>InstallPluginCommand<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>InstallPluginCommand<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">:</span><span class=\"token number\">231</span><span class=\"token punctuation\">)</span>\n        at org<span class=\"token punctuation\">.</span>elasticsearch<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span>InstallPluginCommand<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>InstallPluginCommand<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">:</span><span class=\"token number\">216</span><span class=\"token punctuation\">)</span>\n        at org<span class=\"token punctuation\">.</span>elasticsearch<span class=\"token punctuation\">.</span>cli<span class=\"token punctuation\">.</span>EnvironmentAwareCommand<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>EnvironmentAwareCommand<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">:</span><span class=\"token number\">86</span><span class=\"token punctuation\">)</span>\n        at org<span class=\"token punctuation\">.</span>elasticsearch<span class=\"token punctuation\">.</span>cli<span class=\"token punctuation\">.</span>Command<span class=\"token punctuation\">.</span><span class=\"token function\">mainWithoutErrorHandling</span><span class=\"token punctuation\">(</span>Command<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">:</span><span class=\"token number\">124</span><span class=\"token punctuation\">)</span>\n        at org<span class=\"token punctuation\">.</span>elasticsearch<span class=\"token punctuation\">.</span>cli<span class=\"token punctuation\">.</span>MultiCommand<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>MultiCommand<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">:</span><span class=\"token number\">77</span><span class=\"token punctuation\">)</span>\n        at org<span class=\"token punctuation\">.</span>elasticsearch<span class=\"token punctuation\">.</span>cli<span class=\"token punctuation\">.</span>Command<span class=\"token punctuation\">.</span><span class=\"token function\">mainWithoutErrorHandling</span><span class=\"token punctuation\">(</span>Command<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">:</span><span class=\"token number\">124</span><span class=\"token punctuation\">)</span>\n        at org<span class=\"token punctuation\">.</span>elasticsearch<span class=\"token punctuation\">.</span>cli<span class=\"token punctuation\">.</span>Command<span class=\"token punctuation\">.</span><span class=\"token function\">main</span><span class=\"token punctuation\">(</span>Command<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">:</span><span class=\"token number\">90</span><span class=\"token punctuation\">)</span>\n        at org<span class=\"token punctuation\">.</span>elasticsearch<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span>PluginCli<span class=\"token punctuation\">.</span><span class=\"token function\">main</span><span class=\"token punctuation\">(</span>PluginCli<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">:</span><span class=\"token number\">47</span><span class=\"token punctuation\">)</span>\nAdministrator@elk<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>vm<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ sudo elasticsearch<span class=\"token operator\">-</span>plugin install https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>s3<span class=\"token punctuation\">.</span>ap<span class=\"token operator\">-</span>northeast<span class=\"token operator\">-</span><span class=\"token number\">2.</span>amazonaws<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>file<span class=\"token punctuation\">.</span>epikem<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>jaso<span class=\"token operator\">-</span>analyzer<span class=\"token operator\">-</span>plugin<span class=\"token operator\">-</span><span class=\"token number\">7.0</span><span class=\"token number\">.1</span><span class=\"token number\">.0</span><span class=\"token operator\">-</span>plugin<span class=\"token punctuation\">.</span>zip\n<span class=\"token operator\">-</span><span class=\"token operator\">></span> Downloading https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>s3<span class=\"token punctuation\">.</span>ap<span class=\"token operator\">-</span>northeast<span class=\"token operator\">-</span><span class=\"token number\">2.</span>amazonaws<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>file<span class=\"token punctuation\">.</span>epikem<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>jaso<span class=\"token operator\">-</span>analyzer<span class=\"token operator\">-</span>plugin<span class=\"token operator\">-</span><span class=\"token number\">7.0</span><span class=\"token number\">.1</span><span class=\"token number\">.0</span><span class=\"token operator\">-</span>plugin<span class=\"token punctuation\">.</span>zip\n<span class=\"token punctuation\">[</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span> <span class=\"token number\">100</span><span class=\"token operator\">%</span>  \n<span class=\"token operator\">-</span><span class=\"token operator\">></span> Installed jaso<span class=\"token operator\">-</span>analyzer\nAdministrator@elk<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>vm<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$</code></pre></div>\n<p>플러그인을 다 설치했는데도 아래와 같은 에러가 뜬다. 전에도 떴었던 거 같기도 한데..</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"error\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"root_cause\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"illegal_argument_exception\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"reason\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Unknown tokenizer type [nori_tokenizer] for [nori-user-dict]\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"illegal_argument_exception\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"reason\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Unknown tokenizer type [nori_tokenizer] for [nori-user-dict]\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token number\">400</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>오늘은 꽤 작업을 많이 했다.</p>\n<ol>\n<li>기성품이긴 하나, elk 스택을 구글 클라우드에 올림.</li>\n<li>로컬 logstash로 올린 elk에 데이터 올림.</li>\n<li>elasticsearch vm에 들어가서 jaso-analyzer를 설치함.</li>\n<li>elasticsearch vm에서 nori-analysis를 설치함.</li>\n<li>server의 elasticsearch js client 버전 6.6.0에서 7.0.1로 업그레이드함.</li>\n</ol>\n<h2 id=\"tags\"><a href=\"#tags\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tags</h2>\n<p>  #vocabo</p>","id":"3897e7b0-3a5c-55fa-b57d-bed38f29822b","fields":{"slug":"2019-05-13"},"frontmatter":{"date":"2019-05-13","title":"2019-05-13","category":"blog","tags":["blog"],"banner":"/assets/bg/1.jpg"},"timeToRead":3},{"excerpt":"vocabo 아직도 쿠버네티스 통신으로 씨름중 4skaffold라는 유틸?을 찾았는데, 상당히 유용한데다 편하다! microservice예제를 보니 이해가 좀 된다. 드디어 할 수 있을 거 같다. 내일 분석해서 해보자.tags  #vocabo","html":"<h3 id=\"vocabo-아직도-쿠버네티스-통신으로-씨름중-4\"><a href=\"#vocabo-%EC%95%84%EC%A7%81%EB%8F%84-%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8B%B0%EC%8A%A4-%ED%86%B5%EC%8B%A0%EC%9C%BC%EB%A1%9C-%EC%94%A8%EB%A6%84%EC%A4%91-4\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>vocabo 아직도 쿠버네티스 통신으로 씨름중 4</h3>\n<p>skaffold라는 유틸?을 찾았는데, 상당히 유용한데다 편하다! microservice예제를 보니 이해가 좀 된다. 드디어 할 수 있을 거 같다. 내일 분석해서 해보자.</p>\n<h2 id=\"tags\"><a href=\"#tags\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tags</h2>\n<p>  #vocabo</p>","id":"5df5b615-8bb5-5895-a5f5-ba0933243f85","fields":{"slug":"2019-05-07"},"frontmatter":{"date":"2019-05-07","title":"2019-05-07","category":"blog","tags":["blog"],"banner":"/assets/bg/3.jpg"},"timeToRead":1},{"excerpt":"vocabo 아직도 쿠버네티스 통신으로 씨름중대체 개념만 알려주고 어떻게 하는건지 예시를 봐도 그냥 http url로 하는 request가 아니라 무슨 nginx 설정같은게 나오고 그래서 계속 헤매고 있다.cluster ip가 클러스터 내에서만 가능한거고, pod가 각각 ip를 갖고있지만, 로드밸런서나 서비스 없이는 클러스터 밖과 통신 안되는거는 질리도록 알겠는데 그래서 클라이언트에서 url…","html":"<h3 id=\"vocabo-아직도-쿠버네티스-통신으로-씨름중\"><a href=\"#vocabo-%EC%95%84%EC%A7%81%EB%8F%84-%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8B%B0%EC%8A%A4-%ED%86%B5%EC%8B%A0%EC%9C%BC%EB%A1%9C-%EC%94%A8%EB%A6%84%EC%A4%91\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>vocabo 아직도 쿠버네티스 통신으로 씨름중</h3>\n<p>대체 개념만 알려주고 어떻게 하는건지 예시를 봐도 그냥 http url로 하는 request가 아니라 무슨 nginx 설정같은게 나오고 그래서 계속 헤매고 있다.</p>\n<p>cluster ip가 클러스터 내에서만 가능한거고, pod가 각각 ip를 갖고있지만, 로드밸런서나 서비스 없이는 클러스터 밖과 통신 안되는거는 질리도록 알겠는데 그래서 클라이언트에서 url을 어떻게 해야 서버로 통신이 들어가느냐는 거다..</p>\n<p>겨우 서비스 이름 등에 따라 환경변수가 채워진다는 걸 보고 그대로 따라했는데 여전히 안 된다. 결국 로드밸런서 추가해서 해당 포드에 접근하는거만 되고 포드간 통신을 성공을 못 하고 있다. 환경변수 설명대로 </p>\n<blockquote>\n<p>📂 <code class=\"language-text\">server.js</code></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">var</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">elasticsearch<span class=\"token punctuation\">.</span>Client</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// host: process.env.ELASTICSEARCH_URL,</span>\n        host<span class=\"token punctuation\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">ELASTIC_PORT</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// log: 'trace'</span>\n        apiVersion<span class=\"token punctuation\">:</span> <span class=\"token string\">'6.6'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>📂 <code class=\"language-text\">client.js</code></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> server_url <span class=\"token operator\">=</span> <span class=\"token string\">'http://SERVER_HOST/...'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이런 식으로 하면 ELASTIC_PORT 환경 변수가 채워져서 통신되지 않을까 했지만 여전히 실패했다.</p>\n<p>내가 생각하는 방식은 클라이언트만 로드밸런서를 넣어서 외부에서 접근가능하게 하고, 나머지 서버와 elastic 포드는 cluster ip만으로 통신하게 하는건데, 이게 왜 이렇게 어렵지? </p>\n<p>게다가 찾아보니 docker image 업데이트할 때, 쿠버네티스 자체 yaml 설정으로는 latest이미지에 푸쉬하는걸 감지하여 포드 업데이트하는게 지원되지 않는 모양이다.\n그래서 나는 도커 이미지를 업데이트할 때마다 콘솔에서 latest 태그를 떼었다 붙였다 하면서 수동으로 업데이트하고있다.. </p>\n<p>kube-dns라는것도 있는 모양이고 아무래도 이걸 써야하나 싶긴 한데..</p>\n<h2 id=\"tags\"><a href=\"#tags\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tags</h2>\n<p>  #vocabo, #kubernetes</p>","id":"2638c380-7b9e-5dab-833a-16b956dbc215","fields":{"slug":"2019-04-26"},"frontmatter":{"date":"2019-04-26","title":"2019-04-26","category":"blog","tags":["blog"],"banner":"/assets/bg/3.jpg"},"timeToRead":1},{"excerpt":"알고리즘 풀이 기록 깃에 올릴까?sport부분이 git 저장소로 되어있지 않은 것을 알았다. 근데 여기에 msvc 캐시 파일 등으로 용량이 커서 git 저장소로 올리려면 .gitignore 설정을 조금 많이 해야 할 것이다.python 버전 문제알고스팟에서 파이썬 버전때문에 f string을 쓰지 못하나 했는데, 찾아보니 파이썬에도 js의 babel과 비슷한 것이 있었다.https://github.com/nvbn/py-backwards…","html":"<h3 id=\"알고리즘-풀이-기록-깃에-올릴까\"><a href=\"#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%ED%92%80%EC%9D%B4-%EA%B8%B0%EB%A1%9D-%EA%B9%83%EC%97%90-%EC%98%AC%EB%A6%B4%EA%B9%8C\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>알고리즘 풀이 기록 깃에 올릴까?</h3>\n<p>sport부분이 git 저장소로 되어있지 않은 것을 알았다. 근데 여기에 msvc 캐시 파일 등으로 용량이 커서 git 저장소로 올리려면 .gitignore 설정을 조금 많이 해야 할 것이다.</p>\n<h3 id=\"python-버전-문제\"><a href=\"#python-%EB%B2%84%EC%A0%84-%EB%AC%B8%EC%A0%9C\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>python 버전 문제</h3>\n<p>알고스팟에서 파이썬 버전때문에 f string을 쓰지 못하나 했는데, 찾아보니 파이썬에도 js의 babel과 비슷한 것이 있었다.</p>\n<p><a href=\"https://github.com/nvbn/py-backwards\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/nvbn/py-backwards</a></p>\n<p>이걸 써서 파이썬 3.7 버전으로 코드를 짜서 3.4버전으로 트랜스파일 할 수 있다.</p>\n<p>아래는 파워셸에서 사용하기 위한 makefile 설정</p>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\"><span class=\"token symbol\">run</span><span class=\"token punctuation\">:</span>\n\tpwsh -command <span class=\"token string\">\"Get-Content .\\input.txt | python3 .\\main.py\"</span>\n<span class=\"token symbol\">test</span><span class=\"token punctuation\">:</span>\n\tpwsh -command <span class=\"token string\">\"Get-Content .\\input.txt | python3 .\\main.py\"</span> test\n<span class=\"token symbol\">runc</span><span class=\"token punctuation\">:</span>\n\tpy-backwards -i .\\main.py -o .\\compiled.py -t 3.4\n\tpwsh -command <span class=\"token string\">\"Get-Content .\\input.txt | python3 .\\compiled.py\"</span>\n<span class=\"token symbol\">testc</span><span class=\"token punctuation\">:</span>\n\tpy-backwards -i .\\main.py -o .\\compiled.py -t 3.4\n\tpwsh -command <span class=\"token string\">\"Get-Content .\\input.txt | python3 .\\compiled.py\"</span> test</code></pre></div>","id":"01f1a594-a795-5e83-b58f-53aed7580cb3","fields":{"slug":"2019-04-21"},"frontmatter":{"date":"2019-04-21","title":"2019-04-21","category":"blog","tags":["blog"],"banner":"/assets/bg/1.jpg"},"timeToRead":1}],"tagName":"blog"}}