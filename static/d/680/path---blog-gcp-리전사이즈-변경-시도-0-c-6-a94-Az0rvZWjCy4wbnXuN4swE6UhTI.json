{"data":{"markdownRemark":{"html":"<p>bitnami 자원과 연동된 compute instance를 바꾸려면 어떻게 해야 하는거지??</p>\n<p>그냥 런치패드의 인스턴스를 복사해다가 사이즈를 줄인 후 수동 시작해서 해결했다. 이렇게 하면 서비스들이 제대로 시작 안될수도 있을거라 생각했는데 의외로 그냥 잘 되었다. 최저사양이므로 한달 744시간 무료다.</p>\n<p>## tags\n\\#vocabo, \\#blog</p>","fields":{"slug":"gcp-리전사이즈-변경-시도"},"frontmatter":{"title":"gcp 리전사이즈 변경 시도","date":"09.10.2019","category":"vocabo","tags":["project/vocabo","blog"],"banner":"/assets/bg/4.jpg"},"timeToRead":1}},"pageContext":{"slug":"gcp-리전사이즈-변경-시도","prev":{"excerpt":"…","html":"<h3 id=\"개구리\"><a href=\"#%EA%B0%9C%EA%B5%AC%EB%A6%AC\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개구리</h3>\n<p>방향이 수직, 위치가 격자로 고정된 두 선분간 거리를 효율적으로 구할 수 있어야 풀 수 있다.</p>\n<p>그걸 차마 구현할 수 있을거라고 생각을 못해서 모든 선들의 몸통을 포함해서 점으로 만든 다음, 모든 점 집합간 다익스트라를 돌리면 되지 않을까 생각했으나 시간복잡도가 될 수가 없었다. (실패)</p>\n<h3 id=\"트럭\"><a href=\"#%ED%8A%B8%EB%9F%AD\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>트럭</h3>\n<p>처음엔 그리디로 한 번에 들어갈 수 있는 하중 기준으로 그룹화해서 그룹 길이만 따져서 더하면 되지 않을까 했는데, 앞차가 나갔을 때 뒷차가 들어올 수도 있다는 점을 고려하지 못했다. </p>\n<p>한 번에 단위시간만 이동가능하고, 앞 차가 다 나갔을 때 뒷차가 들어올 수 있는지 등등도 계산해야 해서 까다로운데 숫자가 작아서 그냥 시뮬레이션을 돌렸다.</p>\n<details><summary>cpp solution</summary>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MaxN<span class=\"token operator\">=</span><span class=\"token number\">1010</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span>MaxN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> bridge<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// https://www.acmicpc.net/problem/13327</span>\n    <span class=\"token comment\">// https://www.acmicpc.net/problem/13335</span>\n    <span class=\"token comment\">// https://www.acmicpc.net/problem/13332</span>\n\n    <span class=\"token comment\">// 길이 W, 최대 하중 L, ai 트럭무게, 한번에 단위시간만 이동가능. </span>\n    <span class=\"token keyword\">int</span> N<span class=\"token punctuation\">,</span>W<span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">;</span>\n    cin<span class=\"token operator\">>></span>N<span class=\"token operator\">>></span>W<span class=\"token operator\">>></span>L<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> n<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        cin<span class=\"token operator\">>></span>arr<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 순서를 바꿀 수 없으므로, 그리디로 해도 될거 같다.</span>\n        <span class=\"token comment\">// 그러나 문제는 단위시간만 이동 가능하다는것.</span>\n        <span class=\"token comment\">// 그 부분은 그냥 해당 길이 k 그룹이 다 건너는데 걸리는 시간을 f(k,w)로 계산하면 된다.</span>\n        <span class=\"token comment\">// 길이 1이면 w+1, 2면 w+2, ... k면 w+k일듯.</span>\n        <span class=\"token comment\">// 아니다. 앞 트럭들중 몇이 다 건넜을 때, 하중이 괜찮다면 뒤의 트럭이 바로 들어와야 한다.</span>\n        <span class=\"token comment\">// </span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 그럼 그냥 시간이 널널하니 다 돌려도 괜찮을 수 있다.</span>\n\n    <span class=\"token keyword\">int</span> t<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> cur<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> curLoad<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">&lt;</span><span class=\"token number\">150000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        t<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        curLoad<span class=\"token operator\">-</span><span class=\"token operator\">=</span>bridge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        bridge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curLoad<span class=\"token operator\">+</span>arr<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            bridge<span class=\"token punctuation\">[</span>W<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            curLoad<span class=\"token operator\">+</span><span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            cur<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> bridge<span class=\"token punctuation\">[</span>W<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">bool</span> left<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>bridge<span class=\"token punctuation\">[</span>W<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ww <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> ww <span class=\"token operator\">&lt;</span> W<span class=\"token punctuation\">;</span> ww<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// cout &lt;&lt; bridge[ww] &lt;&lt; ' ';</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bridge<span class=\"token punctuation\">[</span>ww<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                left<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            bridge<span class=\"token punctuation\">[</span>ww<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>bridge<span class=\"token punctuation\">[</span>ww<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// cout &lt;&lt; endl;</span>\n        <span class=\"token comment\">// cout &lt;&lt; t &lt;&lt; ' ' &lt;&lt; curLoad &lt;&lt; ' ' &lt;&lt; left &lt;&lt; ' ' &lt;&lt; cur &lt;&lt; ' ' &lt;&lt; n &lt;&lt; endl;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>left <span class=\"token operator\">&amp;&amp;</span> cur<span class=\"token operator\">>=</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> t <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</details>\n<h2 id=\"tags\"><a href=\"#tags\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tags</h2>\n<p>  #sport, #blog</p>","id":"e422472f-3a7d-526a-859a-d697653b72a6","fields":{"slug":"acm-icpc-문제-대전-international-regional-2016"},"frontmatter":{"date":"2019-10-01","title":"acm icpc 문제 대전 international regional 2016","category":"sport","tags":["dev/sport","blog"],"banner":"/assets/bg/2.jpg"},"timeToRead":2},"next":{"excerpt":"비교적 쉬운 B,C,H,I는 대부분 풀었고, D를 도전하다가 계속 시간이 지나갔다. 그러다 J가 더 쉬운문제여서 J를 풀다가 인덱싱 부분이 헷갈려서 결국 제출하지 못했다. 7분 지나서 그냥 인덱싱 부분만 1-인덱싱으로 전부 차근차근 고치니 바로 해결됬다.생각보다 상위권 말고 대부분의 팀들은 B,C,H,I만 푼거 같았다. (여전히 L이 펜딩이라 지나봐야 암.)다른 블로그 보니 J가 무슨 convex hull trick…","html":"<p>비교적 쉬운 B,C,H,I는 대부분 풀었고, D를 도전하다가 계속 시간이 지나갔다. 그러다 J가 더 쉬운문제여서 J를 풀다가 인덱싱 부분이 헷갈려서 결국 제출하지 못했다. 7분 지나서 그냥 인덱싱 부분만 1-인덱싱으로 전부 차근차근 고치니 바로 해결됬다.</p>\n<p>생각보다 상위권 말고 대부분의 팀들은 B,C,H,I만 푼거 같았다. (여전히 L이 펜딩이라 지나봐야 암.)</p>\n<p>다른 블로그 보니 J가 무슨 convex hull trick을 써야 한다는 말이 있던데 생각보다 어려운 문제인건가..?</p>\n<p>## tags\n\\#sport, \\#blog</p>","id":"08b18d61-f60f-5c6a-960e-92d1c8c0d38b","fields":{"slug":"acm-icpc-예선-참가"},"frontmatter":{"date":"2019-10-09","title":"acm icpc 예선 참가","category":"sport","tags":["dev/sport","blog"],"banner":"/assets/bg/1.jpg"},"timeToRead":1}}}